package com.ifengyu.im.protobuf;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.ByteString.Output;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageLite;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageLiteOrBuilder;
import com.google.protobuf.Parser;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupInfoOrBuilder;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupModifyType;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupType;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfoOrBuilder;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo;
import com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfoOrBuilder;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class IMGroup {

    public static final class IMApplyJoinGroupToApplicantRsp extends GeneratedMessageLite implements IMApplyJoinGroupToApplicantRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CREATOR_ID_FIELD_NUMBER = 5;
        public static final int CREATOR_NAME_FIELD_NUMBER = 7;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static Parser<IMApplyJoinGroupToApplicantRsp> PARSER = new AbstractParser<IMApplyJoinGroupToApplicantRsp>() {
            public IMApplyJoinGroupToApplicantRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToApplicantRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        private static final IMApplyJoinGroupToApplicantRsp defaultInstance = new IMApplyJoinGroupToApplicantRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int creatorId_;
        /* access modifiers changed from: private */
        public Object creatorName_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToApplicantRsp, Builder> implements IMApplyJoinGroupToApplicantRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int creatorId_;
            private Object creatorName_ = "";
            private int groupId_;
            private Object groupName_ = "";
            private int reqUserId_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.creatorId_ = 0;
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.creatorName_ = "";
                this.bitField0_ &= -65;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -129;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToApplicantRsp getDefaultInstanceForType() {
                return IMApplyJoinGroupToApplicantRsp.getDefaultInstance();
            }

            public IMApplyJoinGroupToApplicantRsp build() {
                IMApplyJoinGroupToApplicantRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToApplicantRsp buildPartial() {
                int i = 1;
                IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp = new IMApplyJoinGroupToApplicantRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToApplicantRsp.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToApplicantRsp.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMApplyJoinGroupToApplicantRsp.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMApplyJoinGroupToApplicantRsp.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMApplyJoinGroupToApplicantRsp.creatorId_ = this.creatorId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMApplyJoinGroupToApplicantRsp.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMApplyJoinGroupToApplicantRsp.creatorName_ = this.creatorName_;
                if ((i2 & 128) == 128) {
                    i |= 128;
                }
                iMApplyJoinGroupToApplicantRsp.attachData_ = this.attachData_;
                iMApplyJoinGroupToApplicantRsp.bitField0_ = i;
                return iMApplyJoinGroupToApplicantRsp;
            }

            public Builder mergeFrom(IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp) {
                if (iMApplyJoinGroupToApplicantRsp != IMApplyJoinGroupToApplicantRsp.getDefaultInstance()) {
                    if (iMApplyJoinGroupToApplicantRsp.hasReqUserId()) {
                        setReqUserId(iMApplyJoinGroupToApplicantRsp.getReqUserId());
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasResultCode()) {
                        setResultCode(iMApplyJoinGroupToApplicantRsp.getResultCode());
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasGroupId()) {
                        setGroupId(iMApplyJoinGroupToApplicantRsp.getGroupId());
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMApplyJoinGroupToApplicantRsp.groupName_;
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasCreatorId()) {
                        setCreatorId(iMApplyJoinGroupToApplicantRsp.getCreatorId());
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasUserHandle()) {
                        setUserHandle(iMApplyJoinGroupToApplicantRsp.getUserHandle());
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasCreatorName()) {
                        this.bitField0_ |= 64;
                        this.creatorName_ = iMApplyJoinGroupToApplicantRsp.creatorName_;
                    }
                    if (iMApplyJoinGroupToApplicantRsp.hasAttachData()) {
                        setAttachData(iMApplyJoinGroupToApplicantRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToApplicantRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasResultCode() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp;
                IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp2;
                try {
                    IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp3 = (IMApplyJoinGroupToApplicantRsp) IMApplyJoinGroupToApplicantRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToApplicantRsp3 != null) {
                        mergeFrom(iMApplyJoinGroupToApplicantRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToApplicantRsp2 = (IMApplyJoinGroupToApplicantRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToApplicantRsp = iMApplyJoinGroupToApplicantRsp2;
                    th = th2;
                }
                if (iMApplyJoinGroupToApplicantRsp != null) {
                    mergeFrom(iMApplyJoinGroupToApplicantRsp);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMApplyJoinGroupToApplicantRsp.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasCreatorId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getCreatorId() {
                return this.creatorId_;
            }

            public Builder setCreatorId(int i) {
                this.bitField0_ |= 16;
                this.creatorId_ = i;
                return this;
            }

            public Builder clearCreatorId() {
                this.bitField0_ &= -17;
                this.creatorId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasCreatorName() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getCreatorName() {
                Object obj = this.creatorName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.creatorName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getCreatorNameBytes() {
                Object obj = this.creatorName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.creatorName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setCreatorName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.creatorName_ = str;
                return this;
            }

            public Builder clearCreatorName() {
                this.bitField0_ &= -65;
                this.creatorName_ = IMApplyJoinGroupToApplicantRsp.getDefaultInstance().getCreatorName();
                return this;
            }

            public Builder setCreatorNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.creatorName_ = byteString;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 128) == 128;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 128;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -129;
                this.attachData_ = IMApplyJoinGroupToApplicantRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMApplyJoinGroupToApplicantRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToApplicantRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToApplicantRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToApplicantRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToApplicantRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.creatorId_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 58:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 64;
                            this.creatorName_ = readBytes2;
                            break;
                        case 162:
                            this.bitField0_ |= 128;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToApplicantRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCreatorId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getCreatorId() {
            return this.creatorId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasCreatorName() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getCreatorName() {
            Object obj = this.creatorName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.creatorName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getCreatorNameBytes() {
            Object obj = this.creatorName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.creatorName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 128) == 128;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.creatorId_ = 0;
            this.userHandle_ = 0;
            this.creatorName_ = "";
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getCreatorNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getCreatorNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToApplicantRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToApplicantRsp iMApplyJoinGroupToApplicantRsp) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToApplicantRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public static final class IMApplyJoinGroupToApplicantRspAck extends GeneratedMessageLite implements IMApplyJoinGroupToApplicantRspAckOrBuilder {
        public static Parser<IMApplyJoinGroupToApplicantRspAck> PARSER = new AbstractParser<IMApplyJoinGroupToApplicantRspAck>() {
            public IMApplyJoinGroupToApplicantRspAck parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToApplicantRspAck(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 1;
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        private static final IMApplyJoinGroupToApplicantRspAck defaultInstance = new IMApplyJoinGroupToApplicantRspAck(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToApplicantRspAck, Builder> implements IMApplyJoinGroupToApplicantRspAckOrBuilder {
            private int bitField0_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.resultCode_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToApplicantRspAck getDefaultInstanceForType() {
                return IMApplyJoinGroupToApplicantRspAck.getDefaultInstance();
            }

            public IMApplyJoinGroupToApplicantRspAck build() {
                IMApplyJoinGroupToApplicantRspAck buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToApplicantRspAck buildPartial() {
                int i = 1;
                IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck = new IMApplyJoinGroupToApplicantRspAck((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToApplicantRspAck.resultCode_ = this.resultCode_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToApplicantRspAck.userHandle_ = this.userHandle_;
                iMApplyJoinGroupToApplicantRspAck.bitField0_ = i;
                return iMApplyJoinGroupToApplicantRspAck;
            }

            public Builder mergeFrom(IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck) {
                if (iMApplyJoinGroupToApplicantRspAck != IMApplyJoinGroupToApplicantRspAck.getDefaultInstance()) {
                    if (iMApplyJoinGroupToApplicantRspAck.hasResultCode()) {
                        setResultCode(iMApplyJoinGroupToApplicantRspAck.getResultCode());
                    }
                    if (iMApplyJoinGroupToApplicantRspAck.hasUserHandle()) {
                        setUserHandle(iMApplyJoinGroupToApplicantRspAck.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToApplicantRspAck.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResultCode()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck;
                IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck2;
                try {
                    IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck3 = (IMApplyJoinGroupToApplicantRspAck) IMApplyJoinGroupToApplicantRspAck.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToApplicantRspAck3 != null) {
                        mergeFrom(iMApplyJoinGroupToApplicantRspAck3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToApplicantRspAck2 = (IMApplyJoinGroupToApplicantRspAck) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToApplicantRspAck = iMApplyJoinGroupToApplicantRspAck2;
                    th = th2;
                }
                if (iMApplyJoinGroupToApplicantRspAck != null) {
                    mergeFrom(iMApplyJoinGroupToApplicantRspAck);
                }
                throw th;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 1;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMApplyJoinGroupToApplicantRspAck(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToApplicantRspAck(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToApplicantRspAck getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToApplicantRspAck getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToApplicantRspAck(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToApplicantRspAck> getParserForType() {
            return PARSER;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.resultCode_ = 0;
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToApplicantRspAck parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspAck) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToApplicantRspAck iMApplyJoinGroupToApplicantRspAck) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToApplicantRspAck);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMApplyJoinGroupToApplicantRspAckOrBuilder extends MessageLiteOrBuilder {
        int getResultCode();

        int getUserHandle();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMApplyJoinGroupToApplicantRspNotify extends GeneratedMessageLite implements IMApplyJoinGroupToApplicantRspNotifyOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CREATOR_ID_FIELD_NUMBER = 5;
        public static final int CREATOR_NAME_FIELD_NUMBER = 7;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static Parser<IMApplyJoinGroupToApplicantRspNotify> PARSER = new AbstractParser<IMApplyJoinGroupToApplicantRspNotify>() {
            public IMApplyJoinGroupToApplicantRspNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToApplicantRspNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        private static final IMApplyJoinGroupToApplicantRspNotify defaultInstance = new IMApplyJoinGroupToApplicantRspNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int creatorId_;
        /* access modifiers changed from: private */
        public Object creatorName_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToApplicantRspNotify, Builder> implements IMApplyJoinGroupToApplicantRspNotifyOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int creatorId_;
            private Object creatorName_ = "";
            private int groupId_;
            private Object groupName_ = "";
            private int reqUserId_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.creatorId_ = 0;
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.creatorName_ = "";
                this.bitField0_ &= -65;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -129;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToApplicantRspNotify getDefaultInstanceForType() {
                return IMApplyJoinGroupToApplicantRspNotify.getDefaultInstance();
            }

            public IMApplyJoinGroupToApplicantRspNotify build() {
                IMApplyJoinGroupToApplicantRspNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToApplicantRspNotify buildPartial() {
                int i = 1;
                IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify = new IMApplyJoinGroupToApplicantRspNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToApplicantRspNotify.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToApplicantRspNotify.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMApplyJoinGroupToApplicantRspNotify.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMApplyJoinGroupToApplicantRspNotify.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMApplyJoinGroupToApplicantRspNotify.creatorId_ = this.creatorId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMApplyJoinGroupToApplicantRspNotify.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMApplyJoinGroupToApplicantRspNotify.creatorName_ = this.creatorName_;
                if ((i2 & 128) == 128) {
                    i |= 128;
                }
                iMApplyJoinGroupToApplicantRspNotify.attachData_ = this.attachData_;
                iMApplyJoinGroupToApplicantRspNotify.bitField0_ = i;
                return iMApplyJoinGroupToApplicantRspNotify;
            }

            public Builder mergeFrom(IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify) {
                if (iMApplyJoinGroupToApplicantRspNotify != IMApplyJoinGroupToApplicantRspNotify.getDefaultInstance()) {
                    if (iMApplyJoinGroupToApplicantRspNotify.hasReqUserId()) {
                        setReqUserId(iMApplyJoinGroupToApplicantRspNotify.getReqUserId());
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasResultCode()) {
                        setResultCode(iMApplyJoinGroupToApplicantRspNotify.getResultCode());
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasGroupId()) {
                        setGroupId(iMApplyJoinGroupToApplicantRspNotify.getGroupId());
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMApplyJoinGroupToApplicantRspNotify.groupName_;
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasCreatorId()) {
                        setCreatorId(iMApplyJoinGroupToApplicantRspNotify.getCreatorId());
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasUserHandle()) {
                        setUserHandle(iMApplyJoinGroupToApplicantRspNotify.getUserHandle());
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasCreatorName()) {
                        this.bitField0_ |= 64;
                        this.creatorName_ = iMApplyJoinGroupToApplicantRspNotify.creatorName_;
                    }
                    if (iMApplyJoinGroupToApplicantRspNotify.hasAttachData()) {
                        setAttachData(iMApplyJoinGroupToApplicantRspNotify.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToApplicantRspNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasResultCode() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify;
                IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify2;
                try {
                    IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify3 = (IMApplyJoinGroupToApplicantRspNotify) IMApplyJoinGroupToApplicantRspNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToApplicantRspNotify3 != null) {
                        mergeFrom(iMApplyJoinGroupToApplicantRspNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToApplicantRspNotify2 = (IMApplyJoinGroupToApplicantRspNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToApplicantRspNotify = iMApplyJoinGroupToApplicantRspNotify2;
                    th = th2;
                }
                if (iMApplyJoinGroupToApplicantRspNotify != null) {
                    mergeFrom(iMApplyJoinGroupToApplicantRspNotify);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMApplyJoinGroupToApplicantRspNotify.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasCreatorId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getCreatorId() {
                return this.creatorId_;
            }

            public Builder setCreatorId(int i) {
                this.bitField0_ |= 16;
                this.creatorId_ = i;
                return this;
            }

            public Builder clearCreatorId() {
                this.bitField0_ &= -17;
                this.creatorId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasCreatorName() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getCreatorName() {
                Object obj = this.creatorName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.creatorName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getCreatorNameBytes() {
                Object obj = this.creatorName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.creatorName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setCreatorName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.creatorName_ = str;
                return this;
            }

            public Builder clearCreatorName() {
                this.bitField0_ &= -65;
                this.creatorName_ = IMApplyJoinGroupToApplicantRspNotify.getDefaultInstance().getCreatorName();
                return this;
            }

            public Builder setCreatorNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.creatorName_ = byteString;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 128) == 128;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 128;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -129;
                this.attachData_ = IMApplyJoinGroupToApplicantRspNotify.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMApplyJoinGroupToApplicantRspNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToApplicantRspNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToApplicantRspNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToApplicantRspNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToApplicantRspNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.creatorId_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 58:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 64;
                            this.creatorName_ = readBytes2;
                            break;
                        case 162:
                            this.bitField0_ |= 128;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToApplicantRspNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCreatorId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getCreatorId() {
            return this.creatorId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasCreatorName() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getCreatorName() {
            Object obj = this.creatorName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.creatorName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getCreatorNameBytes() {
            Object obj = this.creatorName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.creatorName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 128) == 128;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.creatorId_ = 0;
            this.userHandle_ = 0;
            this.creatorName_ = "";
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getCreatorNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getCreatorNameBytes());
            }
            if ((this.bitField0_ & 128) == 128) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToApplicantRspNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToApplicantRspNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToApplicantRspNotify iMApplyJoinGroupToApplicantRspNotify) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToApplicantRspNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMApplyJoinGroupToApplicantRspNotifyOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCreatorId();

        String getCreatorName();

        ByteString getCreatorNameBytes();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getReqUserId();

        int getResultCode();

        int getUserHandle();

        boolean hasAttachData();

        boolean hasCreatorId();

        boolean hasCreatorName();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasReqUserId();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public interface IMApplyJoinGroupToApplicantRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCreatorId();

        String getCreatorName();

        ByteString getCreatorNameBytes();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getReqUserId();

        int getResultCode();

        int getUserHandle();

        boolean hasAttachData();

        boolean hasCreatorId();

        boolean hasCreatorName();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasReqUserId();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMApplyJoinGroupToCreatorNotify extends GeneratedMessageLite implements IMApplyJoinGroupToCreatorNotifyOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CREATOR_ID_FIELD_NUMBER = 5;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static Parser<IMApplyJoinGroupToCreatorNotify> PARSER = new AbstractParser<IMApplyJoinGroupToCreatorNotify>() {
            public IMApplyJoinGroupToCreatorNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToCreatorNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_HANDLE_FIELD_NUMBER = 6;
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int REQ_USER_NAME_FIELD_NUMBER = 2;
        private static final IMApplyJoinGroupToCreatorNotify defaultInstance = new IMApplyJoinGroupToCreatorNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int creatorId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserHandle_;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public Object reqUserName_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToCreatorNotify, Builder> implements IMApplyJoinGroupToCreatorNotifyOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int creatorId_;
            private int groupId_;
            private Object groupName_ = "";
            private int reqUserHandle_;
            private int reqUserId_;
            private Object reqUserName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.reqUserName_ = "";
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.creatorId_ = 0;
                this.bitField0_ &= -17;
                this.reqUserHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToCreatorNotify getDefaultInstanceForType() {
                return IMApplyJoinGroupToCreatorNotify.getDefaultInstance();
            }

            public IMApplyJoinGroupToCreatorNotify build() {
                IMApplyJoinGroupToCreatorNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToCreatorNotify buildPartial() {
                int i = 1;
                IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify = new IMApplyJoinGroupToCreatorNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToCreatorNotify.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToCreatorNotify.reqUserName_ = this.reqUserName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMApplyJoinGroupToCreatorNotify.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMApplyJoinGroupToCreatorNotify.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMApplyJoinGroupToCreatorNotify.creatorId_ = this.creatorId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMApplyJoinGroupToCreatorNotify.reqUserHandle_ = this.reqUserHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMApplyJoinGroupToCreatorNotify.attachData_ = this.attachData_;
                iMApplyJoinGroupToCreatorNotify.bitField0_ = i;
                return iMApplyJoinGroupToCreatorNotify;
            }

            public Builder mergeFrom(IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify) {
                if (iMApplyJoinGroupToCreatorNotify != IMApplyJoinGroupToCreatorNotify.getDefaultInstance()) {
                    if (iMApplyJoinGroupToCreatorNotify.hasReqUserId()) {
                        setReqUserId(iMApplyJoinGroupToCreatorNotify.getReqUserId());
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasReqUserName()) {
                        this.bitField0_ |= 2;
                        this.reqUserName_ = iMApplyJoinGroupToCreatorNotify.reqUserName_;
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasGroupId()) {
                        setGroupId(iMApplyJoinGroupToCreatorNotify.getGroupId());
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMApplyJoinGroupToCreatorNotify.groupName_;
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasCreatorId()) {
                        setCreatorId(iMApplyJoinGroupToCreatorNotify.getCreatorId());
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasReqUserHandle()) {
                        setReqUserHandle(iMApplyJoinGroupToCreatorNotify.getReqUserHandle());
                    }
                    if (iMApplyJoinGroupToCreatorNotify.hasAttachData()) {
                        setAttachData(iMApplyJoinGroupToCreatorNotify.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToCreatorNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasReqUserName() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify;
                IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify2;
                try {
                    IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify3 = (IMApplyJoinGroupToCreatorNotify) IMApplyJoinGroupToCreatorNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToCreatorNotify3 != null) {
                        mergeFrom(iMApplyJoinGroupToCreatorNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToCreatorNotify2 = (IMApplyJoinGroupToCreatorNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToCreatorNotify = iMApplyJoinGroupToCreatorNotify2;
                    th = th2;
                }
                if (iMApplyJoinGroupToCreatorNotify != null) {
                    mergeFrom(iMApplyJoinGroupToCreatorNotify);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasReqUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getReqUserName() {
                Object obj = this.reqUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.reqUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getReqUserNameBytes() {
                Object obj = this.reqUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.reqUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setReqUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = str;
                return this;
            }

            public Builder clearReqUserName() {
                this.bitField0_ &= -3;
                this.reqUserName_ = IMApplyJoinGroupToCreatorNotify.getDefaultInstance().getReqUserName();
                return this;
            }

            public Builder setReqUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = byteString;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMApplyJoinGroupToCreatorNotify.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasCreatorId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getCreatorId() {
                return this.creatorId_;
            }

            public Builder setCreatorId(int i) {
                this.bitField0_ |= 16;
                this.creatorId_ = i;
                return this;
            }

            public Builder clearCreatorId() {
                this.bitField0_ &= -17;
                this.creatorId_ = 0;
                return this;
            }

            public boolean hasReqUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getReqUserHandle() {
                return this.reqUserHandle_;
            }

            public Builder setReqUserHandle(int i) {
                this.bitField0_ |= 32;
                this.reqUserHandle_ = i;
                return this;
            }

            public Builder clearReqUserHandle() {
                this.bitField0_ &= -33;
                this.reqUserHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMApplyJoinGroupToCreatorNotify.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMApplyJoinGroupToCreatorNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToCreatorNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToCreatorNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToCreatorNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToCreatorNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.reqUserName_ = readBytes;
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes2;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.creatorId_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.reqUserHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToCreatorNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasReqUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getReqUserName() {
            Object obj = this.reqUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.reqUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getReqUserNameBytes() {
            Object obj = this.reqUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCreatorId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getCreatorId() {
            return this.creatorId_;
        }

        public boolean hasReqUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getReqUserHandle() {
            return this.reqUserHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.reqUserName_ = "";
            this.groupId_ = 0;
            this.groupName_ = "";
            this.creatorId_ = 0;
            this.reqUserHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.reqUserHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.reqUserHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToCreatorNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToCreatorNotify iMApplyJoinGroupToCreatorNotify) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToCreatorNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMApplyJoinGroupToCreatorNotifyOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCreatorId();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getReqUserHandle();

        int getReqUserId();

        String getReqUserName();

        ByteString getReqUserNameBytes();

        boolean hasAttachData();

        boolean hasCreatorId();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasReqUserHandle();

        boolean hasReqUserId();

        boolean hasReqUserName();
    }

    public static final class IMApplyJoinGroupToCreatorReq extends GeneratedMessageLite implements IMApplyJoinGroupToCreatorReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CREATOR_ID_FIELD_NUMBER = 5;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static Parser<IMApplyJoinGroupToCreatorReq> PARSER = new AbstractParser<IMApplyJoinGroupToCreatorReq>() {
            public IMApplyJoinGroupToCreatorReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToCreatorReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_HANDLE_FIELD_NUMBER = 6;
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int REQ_USER_NAME_FIELD_NUMBER = 2;
        private static final IMApplyJoinGroupToCreatorReq defaultInstance = new IMApplyJoinGroupToCreatorReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int creatorId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserHandle_;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public Object reqUserName_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToCreatorReq, Builder> implements IMApplyJoinGroupToCreatorReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int creatorId_;
            private int groupId_;
            private Object groupName_ = "";
            private int reqUserHandle_;
            private int reqUserId_;
            private Object reqUserName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.reqUserName_ = "";
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.creatorId_ = 0;
                this.bitField0_ &= -17;
                this.reqUserHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToCreatorReq getDefaultInstanceForType() {
                return IMApplyJoinGroupToCreatorReq.getDefaultInstance();
            }

            public IMApplyJoinGroupToCreatorReq build() {
                IMApplyJoinGroupToCreatorReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToCreatorReq buildPartial() {
                int i = 1;
                IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq = new IMApplyJoinGroupToCreatorReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToCreatorReq.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToCreatorReq.reqUserName_ = this.reqUserName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMApplyJoinGroupToCreatorReq.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMApplyJoinGroupToCreatorReq.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMApplyJoinGroupToCreatorReq.creatorId_ = this.creatorId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMApplyJoinGroupToCreatorReq.reqUserHandle_ = this.reqUserHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMApplyJoinGroupToCreatorReq.attachData_ = this.attachData_;
                iMApplyJoinGroupToCreatorReq.bitField0_ = i;
                return iMApplyJoinGroupToCreatorReq;
            }

            public Builder mergeFrom(IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq) {
                if (iMApplyJoinGroupToCreatorReq != IMApplyJoinGroupToCreatorReq.getDefaultInstance()) {
                    if (iMApplyJoinGroupToCreatorReq.hasReqUserId()) {
                        setReqUserId(iMApplyJoinGroupToCreatorReq.getReqUserId());
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasReqUserName()) {
                        this.bitField0_ |= 2;
                        this.reqUserName_ = iMApplyJoinGroupToCreatorReq.reqUserName_;
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasGroupId()) {
                        setGroupId(iMApplyJoinGroupToCreatorReq.getGroupId());
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMApplyJoinGroupToCreatorReq.groupName_;
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasCreatorId()) {
                        setCreatorId(iMApplyJoinGroupToCreatorReq.getCreatorId());
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasReqUserHandle()) {
                        setReqUserHandle(iMApplyJoinGroupToCreatorReq.getReqUserHandle());
                    }
                    if (iMApplyJoinGroupToCreatorReq.hasAttachData()) {
                        setAttachData(iMApplyJoinGroupToCreatorReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToCreatorReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasReqUserName() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq;
                IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq2;
                try {
                    IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq3 = (IMApplyJoinGroupToCreatorReq) IMApplyJoinGroupToCreatorReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToCreatorReq3 != null) {
                        mergeFrom(iMApplyJoinGroupToCreatorReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToCreatorReq2 = (IMApplyJoinGroupToCreatorReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToCreatorReq = iMApplyJoinGroupToCreatorReq2;
                    th = th2;
                }
                if (iMApplyJoinGroupToCreatorReq != null) {
                    mergeFrom(iMApplyJoinGroupToCreatorReq);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasReqUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getReqUserName() {
                Object obj = this.reqUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.reqUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getReqUserNameBytes() {
                Object obj = this.reqUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.reqUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setReqUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = str;
                return this;
            }

            public Builder clearReqUserName() {
                this.bitField0_ &= -3;
                this.reqUserName_ = IMApplyJoinGroupToCreatorReq.getDefaultInstance().getReqUserName();
                return this;
            }

            public Builder setReqUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = byteString;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMApplyJoinGroupToCreatorReq.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasCreatorId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getCreatorId() {
                return this.creatorId_;
            }

            public Builder setCreatorId(int i) {
                this.bitField0_ |= 16;
                this.creatorId_ = i;
                return this;
            }

            public Builder clearCreatorId() {
                this.bitField0_ &= -17;
                this.creatorId_ = 0;
                return this;
            }

            public boolean hasReqUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getReqUserHandle() {
                return this.reqUserHandle_;
            }

            public Builder setReqUserHandle(int i) {
                this.bitField0_ |= 32;
                this.reqUserHandle_ = i;
                return this;
            }

            public Builder clearReqUserHandle() {
                this.bitField0_ &= -33;
                this.reqUserHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMApplyJoinGroupToCreatorReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMApplyJoinGroupToCreatorReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToCreatorReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToCreatorReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToCreatorReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToCreatorReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.reqUserName_ = readBytes;
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes2;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.creatorId_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.reqUserHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToCreatorReq> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasReqUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getReqUserName() {
            Object obj = this.reqUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.reqUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getReqUserNameBytes() {
            Object obj = this.reqUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasCreatorId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getCreatorId() {
            return this.creatorId_;
        }

        public boolean hasReqUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getReqUserHandle() {
            return this.reqUserHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.reqUserName_ = "";
            this.groupId_ = 0;
            this.groupName_ = "";
            this.creatorId_ = 0;
            this.reqUserHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.reqUserHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.creatorId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.reqUserHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToCreatorReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToCreatorReq iMApplyJoinGroupToCreatorReq) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToCreatorReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public static final class IMApplyJoinGroupToCreatorReqAck extends GeneratedMessageLite implements IMApplyJoinGroupToCreatorReqAckOrBuilder {
        public static Parser<IMApplyJoinGroupToCreatorReqAck> PARSER = new AbstractParser<IMApplyJoinGroupToCreatorReqAck>() {
            public IMApplyJoinGroupToCreatorReqAck parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMApplyJoinGroupToCreatorReqAck(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 1;
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        private static final IMApplyJoinGroupToCreatorReqAck defaultInstance = new IMApplyJoinGroupToCreatorReqAck(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMApplyJoinGroupToCreatorReqAck, Builder> implements IMApplyJoinGroupToCreatorReqAckOrBuilder {
            private int bitField0_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.resultCode_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMApplyJoinGroupToCreatorReqAck getDefaultInstanceForType() {
                return IMApplyJoinGroupToCreatorReqAck.getDefaultInstance();
            }

            public IMApplyJoinGroupToCreatorReqAck build() {
                IMApplyJoinGroupToCreatorReqAck buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMApplyJoinGroupToCreatorReqAck buildPartial() {
                int i = 1;
                IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck = new IMApplyJoinGroupToCreatorReqAck((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMApplyJoinGroupToCreatorReqAck.resultCode_ = this.resultCode_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMApplyJoinGroupToCreatorReqAck.userHandle_ = this.userHandle_;
                iMApplyJoinGroupToCreatorReqAck.bitField0_ = i;
                return iMApplyJoinGroupToCreatorReqAck;
            }

            public Builder mergeFrom(IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck) {
                if (iMApplyJoinGroupToCreatorReqAck != IMApplyJoinGroupToCreatorReqAck.getDefaultInstance()) {
                    if (iMApplyJoinGroupToCreatorReqAck.hasResultCode()) {
                        setResultCode(iMApplyJoinGroupToCreatorReqAck.getResultCode());
                    }
                    if (iMApplyJoinGroupToCreatorReqAck.hasUserHandle()) {
                        setUserHandle(iMApplyJoinGroupToCreatorReqAck.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMApplyJoinGroupToCreatorReqAck.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResultCode()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck;
                IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck2;
                try {
                    IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck3 = (IMApplyJoinGroupToCreatorReqAck) IMApplyJoinGroupToCreatorReqAck.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMApplyJoinGroupToCreatorReqAck3 != null) {
                        mergeFrom(iMApplyJoinGroupToCreatorReqAck3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMApplyJoinGroupToCreatorReqAck2 = (IMApplyJoinGroupToCreatorReqAck) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMApplyJoinGroupToCreatorReqAck = iMApplyJoinGroupToCreatorReqAck2;
                    th = th2;
                }
                if (iMApplyJoinGroupToCreatorReqAck != null) {
                    mergeFrom(iMApplyJoinGroupToCreatorReqAck);
                }
                throw th;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 1;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMApplyJoinGroupToCreatorReqAck(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMApplyJoinGroupToCreatorReqAck(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMApplyJoinGroupToCreatorReqAck getDefaultInstance() {
            return defaultInstance;
        }

        public IMApplyJoinGroupToCreatorReqAck getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMApplyJoinGroupToCreatorReqAck(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMApplyJoinGroupToCreatorReqAck> getParserForType() {
            return PARSER;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.resultCode_ = 0;
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(byteString);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(bArr);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(codedInputStream);
        }

        public static IMApplyJoinGroupToCreatorReqAck parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMApplyJoinGroupToCreatorReqAck) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMApplyJoinGroupToCreatorReqAck iMApplyJoinGroupToCreatorReqAck) {
            return newBuilder().mergeFrom(iMApplyJoinGroupToCreatorReqAck);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMApplyJoinGroupToCreatorReqAckOrBuilder extends MessageLiteOrBuilder {
        int getResultCode();

        int getUserHandle();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public interface IMApplyJoinGroupToCreatorReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCreatorId();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getReqUserHandle();

        int getReqUserId();

        String getReqUserName();

        ByteString getReqUserNameBytes();

        boolean hasAttachData();

        boolean hasCreatorId();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasReqUserHandle();

        boolean hasReqUserId();

        boolean hasReqUserName();
    }

    public static final class IMChangeNickNameInGroupNotify extends GeneratedMessageLite implements IMChangeNickNameInGroupNotifyOrBuilder {
        public static final int CHANGENAME_UID_FIELD_NUMBER = 1;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int NICKNAME_INGROUP_FIELD_NUMBER = 3;
        public static Parser<IMChangeNickNameInGroupNotify> PARSER = new AbstractParser<IMChangeNickNameInGroupNotify>() {
            public IMChangeNickNameInGroupNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMChangeNickNameInGroupNotify(codedInputStream, extensionRegistryLite);
            }
        };
        private static final IMChangeNickNameInGroupNotify defaultInstance = new IMChangeNickNameInGroupNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int changenameUid_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object nicknameIngroup_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMChangeNickNameInGroupNotify, Builder> implements IMChangeNickNameInGroupNotifyOrBuilder {
            private int bitField0_;
            private int changenameUid_;
            private int groupId_;
            private Object nicknameIngroup_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.changenameUid_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.nicknameIngroup_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMChangeNickNameInGroupNotify getDefaultInstanceForType() {
                return IMChangeNickNameInGroupNotify.getDefaultInstance();
            }

            public IMChangeNickNameInGroupNotify build() {
                IMChangeNickNameInGroupNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMChangeNickNameInGroupNotify buildPartial() {
                int i = 1;
                IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify = new IMChangeNickNameInGroupNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMChangeNickNameInGroupNotify.changenameUid_ = this.changenameUid_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMChangeNickNameInGroupNotify.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMChangeNickNameInGroupNotify.nicknameIngroup_ = this.nicknameIngroup_;
                iMChangeNickNameInGroupNotify.bitField0_ = i;
                return iMChangeNickNameInGroupNotify;
            }

            public Builder mergeFrom(IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify) {
                if (iMChangeNickNameInGroupNotify != IMChangeNickNameInGroupNotify.getDefaultInstance()) {
                    if (iMChangeNickNameInGroupNotify.hasChangenameUid()) {
                        setChangenameUid(iMChangeNickNameInGroupNotify.getChangenameUid());
                    }
                    if (iMChangeNickNameInGroupNotify.hasGroupId()) {
                        setGroupId(iMChangeNickNameInGroupNotify.getGroupId());
                    }
                    if (iMChangeNickNameInGroupNotify.hasNicknameIngroup()) {
                        this.bitField0_ |= 4;
                        this.nicknameIngroup_ = iMChangeNickNameInGroupNotify.nicknameIngroup_;
                    }
                    setUnknownFields(getUnknownFields().concat(iMChangeNickNameInGroupNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasChangenameUid() && hasGroupId() && hasNicknameIngroup()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify;
                IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify2;
                try {
                    IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify3 = (IMChangeNickNameInGroupNotify) IMChangeNickNameInGroupNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMChangeNickNameInGroupNotify3 != null) {
                        mergeFrom(iMChangeNickNameInGroupNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMChangeNickNameInGroupNotify2 = (IMChangeNickNameInGroupNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMChangeNickNameInGroupNotify = iMChangeNickNameInGroupNotify2;
                    th = th2;
                }
                if (iMChangeNickNameInGroupNotify != null) {
                    mergeFrom(iMChangeNickNameInGroupNotify);
                }
                throw th;
            }

            public boolean hasChangenameUid() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getChangenameUid() {
                return this.changenameUid_;
            }

            public Builder setChangenameUid(int i) {
                this.bitField0_ |= 1;
                this.changenameUid_ = i;
                return this;
            }

            public Builder clearChangenameUid() {
                this.bitField0_ &= -2;
                this.changenameUid_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNicknameIngroup() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getNicknameIngroup() {
                Object obj = this.nicknameIngroup_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.nicknameIngroup_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNicknameIngroupBytes() {
                Object obj = this.nicknameIngroup_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.nicknameIngroup_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNicknameIngroup(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = str;
                return this;
            }

            public Builder clearNicknameIngroup() {
                this.bitField0_ &= -5;
                this.nicknameIngroup_ = IMChangeNickNameInGroupNotify.getDefaultInstance().getNicknameIngroup();
                return this;
            }

            public Builder setNicknameIngroupBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = byteString;
                return this;
            }
        }

        private IMChangeNickNameInGroupNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMChangeNickNameInGroupNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMChangeNickNameInGroupNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMChangeNickNameInGroupNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMChangeNickNameInGroupNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.changenameUid_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.nicknameIngroup_ = readBytes;
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMChangeNickNameInGroupNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasChangenameUid() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getChangenameUid() {
            return this.changenameUid_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNicknameIngroup() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getNicknameIngroup() {
            Object obj = this.nicknameIngroup_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.nicknameIngroup_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNicknameIngroupBytes() {
            Object obj = this.nicknameIngroup_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.nicknameIngroup_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.changenameUid_ = 0;
            this.groupId_ = 0;
            this.nicknameIngroup_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasChangenameUid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNicknameIngroup()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.changenameUid_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getNicknameIngroupBytes());
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.changenameUid_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getNicknameIngroupBytes());
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMChangeNickNameInGroupNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(byteString);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(bArr);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(inputStream);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMChangeNickNameInGroupNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMChangeNickNameInGroupNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMChangeNickNameInGroupNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMChangeNickNameInGroupNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMChangeNickNameInGroupNotify iMChangeNickNameInGroupNotify) {
            return newBuilder().mergeFrom(iMChangeNickNameInGroupNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMChangeNickNameInGroupNotifyOrBuilder extends MessageLiteOrBuilder {
        int getChangenameUid();

        int getGroupId();

        String getNicknameIngroup();

        ByteString getNicknameIngroupBytes();

        boolean hasChangenameUid();

        boolean hasGroupId();

        boolean hasNicknameIngroup();
    }

    public static final class IMGroupChangeMemberNotify extends GeneratedMessageLite implements IMGroupChangeMemberNotifyOrBuilder {
        public static final int CHANGE_TYPE_FIELD_NUMBER = 2;
        public static final int CHG_USER_ID_LIST_FIELD_NUMBER = 5;
        public static final int CUR_USER_ID_LIST_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_USERINFO_LIST_FIELD_NUMBER = 6;
        public static Parser<IMGroupChangeMemberNotify> PARSER = new AbstractParser<IMGroupChangeMemberNotify>() {
            public IMGroupChangeMemberNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupChangeMemberNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupChangeMemberNotify defaultInstance = new IMGroupChangeMemberNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public GroupModifyType changeType_;
        /* access modifiers changed from: private */
        public List<Integer> chgUserIdList_;
        /* access modifiers changed from: private */
        public List<Integer> curUserIdList_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public List<GroupUserInfo> groupUserinfoList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupChangeMemberNotify, Builder> implements IMGroupChangeMemberNotifyOrBuilder {
            private int bitField0_;
            private GroupModifyType changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            private List<Integer> chgUserIdList_ = Collections.emptyList();
            private List<Integer> curUserIdList_ = Collections.emptyList();
            private int groupId_;
            private List<GroupUserInfo> groupUserinfoList_ = Collections.emptyList();
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupChangeMemberNotify getDefaultInstanceForType() {
                return IMGroupChangeMemberNotify.getDefaultInstance();
            }

            public IMGroupChangeMemberNotify build() {
                IMGroupChangeMemberNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupChangeMemberNotify buildPartial() {
                int i = 1;
                IMGroupChangeMemberNotify iMGroupChangeMemberNotify = new IMGroupChangeMemberNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupChangeMemberNotify.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupChangeMemberNotify.changeType_ = this.changeType_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupChangeMemberNotify.groupId_ = this.groupId_;
                if ((this.bitField0_ & 8) == 8) {
                    this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    this.bitField0_ &= -9;
                }
                iMGroupChangeMemberNotify.curUserIdList_ = this.curUserIdList_;
                if ((this.bitField0_ & 16) == 16) {
                    this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupChangeMemberNotify.chgUserIdList_ = this.chgUserIdList_;
                if ((this.bitField0_ & 32) == 32) {
                    this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    this.bitField0_ &= -33;
                }
                iMGroupChangeMemberNotify.groupUserinfoList_ = this.groupUserinfoList_;
                iMGroupChangeMemberNotify.bitField0_ = i;
                return iMGroupChangeMemberNotify;
            }

            public Builder mergeFrom(IMGroupChangeMemberNotify iMGroupChangeMemberNotify) {
                if (iMGroupChangeMemberNotify != IMGroupChangeMemberNotify.getDefaultInstance()) {
                    if (iMGroupChangeMemberNotify.hasUserId()) {
                        setUserId(iMGroupChangeMemberNotify.getUserId());
                    }
                    if (iMGroupChangeMemberNotify.hasChangeType()) {
                        setChangeType(iMGroupChangeMemberNotify.getChangeType());
                    }
                    if (iMGroupChangeMemberNotify.hasGroupId()) {
                        setGroupId(iMGroupChangeMemberNotify.getGroupId());
                    }
                    if (!iMGroupChangeMemberNotify.curUserIdList_.isEmpty()) {
                        if (this.curUserIdList_.isEmpty()) {
                            this.curUserIdList_ = iMGroupChangeMemberNotify.curUserIdList_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureCurUserIdListIsMutable();
                            this.curUserIdList_.addAll(iMGroupChangeMemberNotify.curUserIdList_);
                        }
                    }
                    if (!iMGroupChangeMemberNotify.chgUserIdList_.isEmpty()) {
                        if (this.chgUserIdList_.isEmpty()) {
                            this.chgUserIdList_ = iMGroupChangeMemberNotify.chgUserIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureChgUserIdListIsMutable();
                            this.chgUserIdList_.addAll(iMGroupChangeMemberNotify.chgUserIdList_);
                        }
                    }
                    if (!iMGroupChangeMemberNotify.groupUserinfoList_.isEmpty()) {
                        if (this.groupUserinfoList_.isEmpty()) {
                            this.groupUserinfoList_ = iMGroupChangeMemberNotify.groupUserinfoList_;
                            this.bitField0_ &= -33;
                        } else {
                            ensureGroupUserinfoListIsMutable();
                            this.groupUserinfoList_.addAll(iMGroupChangeMemberNotify.groupUserinfoList_);
                        }
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupChangeMemberNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasChangeType() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupChangeMemberNotify iMGroupChangeMemberNotify;
                IMGroupChangeMemberNotify iMGroupChangeMemberNotify2;
                try {
                    IMGroupChangeMemberNotify iMGroupChangeMemberNotify3 = (IMGroupChangeMemberNotify) IMGroupChangeMemberNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupChangeMemberNotify3 != null) {
                        mergeFrom(iMGroupChangeMemberNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupChangeMemberNotify2 = (IMGroupChangeMemberNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupChangeMemberNotify = iMGroupChangeMemberNotify2;
                    th = th2;
                }
                if (iMGroupChangeMemberNotify != null) {
                    mergeFrom(iMGroupChangeMemberNotify);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasChangeType() {
                return (this.bitField0_ & 2) == 2;
            }

            public GroupModifyType getChangeType() {
                return this.changeType_;
            }

            public Builder setChangeType(GroupModifyType groupModifyType) {
                if (groupModifyType == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.changeType_ = groupModifyType;
                return this;
            }

            public Builder clearChangeType() {
                this.bitField0_ &= -3;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            private void ensureCurUserIdListIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.curUserIdList_ = new ArrayList(this.curUserIdList_);
                    this.bitField0_ |= 8;
                }
            }

            public List<Integer> getCurUserIdListList() {
                return Collections.unmodifiableList(this.curUserIdList_);
            }

            public int getCurUserIdListCount() {
                return this.curUserIdList_.size();
            }

            public int getCurUserIdList(int i) {
                return ((Integer) this.curUserIdList_.get(i)).intValue();
            }

            public Builder setCurUserIdList(int i, int i2) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addCurUserIdList(int i) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllCurUserIdList(Iterable<? extends Integer> iterable) {
                ensureCurUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.curUserIdList_);
                return this;
            }

            public Builder clearCurUserIdList() {
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            private void ensureChgUserIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.chgUserIdList_ = new ArrayList(this.chgUserIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getChgUserIdListList() {
                return Collections.unmodifiableList(this.chgUserIdList_);
            }

            public int getChgUserIdListCount() {
                return this.chgUserIdList_.size();
            }

            public int getChgUserIdList(int i) {
                return ((Integer) this.chgUserIdList_.get(i)).intValue();
            }

            public Builder setChgUserIdList(int i, int i2) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addChgUserIdList(int i) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllChgUserIdList(Iterable<? extends Integer> iterable) {
                ensureChgUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.chgUserIdList_);
                return this;
            }

            public Builder clearChgUserIdList() {
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            private void ensureGroupUserinfoListIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.groupUserinfoList_ = new ArrayList(this.groupUserinfoList_);
                    this.bitField0_ |= 32;
                }
            }

            public List<GroupUserInfo> getGroupUserinfoListList() {
                return Collections.unmodifiableList(this.groupUserinfoList_);
            }

            public int getGroupUserinfoListCount() {
                return this.groupUserinfoList_.size();
            }

            public GroupUserInfo getGroupUserinfoList(int i) {
                return (GroupUserInfo) this.groupUserinfoList_.get(i);
            }

            public Builder setGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, groupUserInfo);
                return this;
            }

            public Builder setGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupUserinfoList(Iterable<? extends GroupUserInfo> iterable) {
                ensureGroupUserinfoListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupUserinfoList_);
                return this;
            }

            public Builder clearGroupUserinfoList() {
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            public Builder removeGroupUserinfoList(int i) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.remove(i);
                return this;
            }
        }

        private IMGroupChangeMemberNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupChangeMemberNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupChangeMemberNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupChangeMemberNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupChangeMemberNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            int readEnum = codedInputStream.readEnum();
                            GroupModifyType valueOf = GroupModifyType.valueOf(readEnum);
                            if (valueOf != null) {
                                this.bitField0_ |= 2;
                                this.changeType_ = valueOf;
                                break;
                            } else {
                                newInstance.writeRawVarint32(readTag);
                                newInstance.writeRawVarint32(readEnum);
                                break;
                            }
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            if (!(z2 & true)) {
                                this.curUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 34:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.chgUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit2 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit2);
                            break;
                        case 50:
                            if (!(z2 & true)) {
                                this.groupUserinfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupUserinfoList_.add(codedInputStream.readMessage(GroupUserInfo.PARSER, extensionRegistryLite));
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    }
                    if (z2 & true) {
                        this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    }
                    if (z2 & true) {
                        this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
            }
            if (z2 & true) {
                this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
            }
            if (z2 & true) {
                this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupChangeMemberNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasChangeType() {
            return (this.bitField0_ & 2) == 2;
        }

        public GroupModifyType getChangeType() {
            return this.changeType_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public List<Integer> getCurUserIdListList() {
            return this.curUserIdList_;
        }

        public int getCurUserIdListCount() {
            return this.curUserIdList_.size();
        }

        public int getCurUserIdList(int i) {
            return ((Integer) this.curUserIdList_.get(i)).intValue();
        }

        public List<Integer> getChgUserIdListList() {
            return this.chgUserIdList_;
        }

        public int getChgUserIdListCount() {
            return this.chgUserIdList_.size();
        }

        public int getChgUserIdList(int i) {
            return ((Integer) this.chgUserIdList_.get(i)).intValue();
        }

        public List<GroupUserInfo> getGroupUserinfoListList() {
            return this.groupUserinfoList_;
        }

        public List<? extends GroupUserInfoOrBuilder> getGroupUserinfoListOrBuilderList() {
            return this.groupUserinfoList_;
        }

        public int getGroupUserinfoListCount() {
            return this.groupUserinfoList_.size();
        }

        public GroupUserInfo getGroupUserinfoList(int i) {
            return (GroupUserInfo) this.groupUserinfoList_.get(i);
        }

        public GroupUserInfoOrBuilder getGroupUserinfoListOrBuilder(int i) {
            return (GroupUserInfoOrBuilder) this.groupUserinfoList_.get(i);
        }

        private void initFields() {
            this.userId_ = 0;
            this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            this.groupId_ = 0;
            this.curUserIdList_ = Collections.emptyList();
            this.chgUserIdList_ = Collections.emptyList();
            this.groupUserinfoList_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasChangeType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            for (int i = 0; i < this.curUserIdList_.size(); i++) {
                codedOutputStream.writeUInt32(4, ((Integer) this.curUserIdList_.get(i)).intValue());
            }
            for (int i2 = 0; i2 < this.chgUserIdList_.size(); i2++) {
                codedOutputStream.writeUInt32(5, ((Integer) this.chgUserIdList_.get(i2)).intValue());
            }
            for (int i3 = 0; i3 < this.groupUserinfoList_.size(); i3++) {
                codedOutputStream.writeMessage(6, (MessageLite) this.groupUserinfoList_.get(i3));
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeEnumSize(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 = i + CodedOutputStream.computeUInt32Size(3, this.groupId_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            for (int i6 = 0; i6 < this.curUserIdList_.size(); i6++) {
                i5 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.curUserIdList_.get(i6)).intValue());
            }
            int size = i2 + i5 + (getCurUserIdListList().size() * 1);
            int i7 = 0;
            for (int i8 = 0; i8 < this.chgUserIdList_.size(); i8++) {
                i7 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.chgUserIdList_.get(i8)).intValue());
            }
            int size2 = size + i7 + (getChgUserIdListList().size() * 1);
            while (true) {
                int i9 = size2;
                if (i3 < this.groupUserinfoList_.size()) {
                    size2 = CodedOutputStream.computeMessageSize(6, (MessageLite) this.groupUserinfoList_.get(i3)) + i9;
                    i3++;
                } else {
                    int size3 = this.unknownFields.size() + i9;
                    this.memoizedSerializedSize = size3;
                    return size3;
                }
            }
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupChangeMemberNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(byteString);
        }

        public static IMGroupChangeMemberNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupChangeMemberNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(bArr);
        }

        public static IMGroupChangeMemberNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupChangeMemberNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(inputStream);
        }

        public static IMGroupChangeMemberNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupChangeMemberNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupChangeMemberNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupChangeMemberNotify iMGroupChangeMemberNotify) {
            return newBuilder().mergeFrom(iMGroupChangeMemberNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupChangeMemberNotifyOrBuilder extends MessageLiteOrBuilder {
        GroupModifyType getChangeType();

        int getChgUserIdList(int i);

        int getChgUserIdListCount();

        List<Integer> getChgUserIdListList();

        int getCurUserIdList(int i);

        int getCurUserIdListCount();

        List<Integer> getCurUserIdListList();

        int getGroupId();

        GroupUserInfo getGroupUserinfoList(int i);

        int getGroupUserinfoListCount();

        List<GroupUserInfo> getGroupUserinfoListList();

        int getUserId();

        boolean hasChangeType();

        boolean hasGroupId();

        boolean hasUserId();
    }

    public static final class IMGroupChangeMemberReq extends GeneratedMessageLite implements IMGroupChangeMemberReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CHANGE_TYPE_FIELD_NUMBER = 2;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int ISFROMUSER_FIELD_NUMBER = 4;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 5;
        public static Parser<IMGroupChangeMemberReq> PARSER = new AbstractParser<IMGroupChangeMemberReq>() {
            public IMGroupChangeMemberReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupChangeMemberReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupChangeMemberReq defaultInstance = new IMGroupChangeMemberReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public GroupModifyType changeType_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupChangeMemberReq, Builder> implements IMGroupChangeMemberReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private GroupModifyType changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            private int groupId_;
            private int isfromuser_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.isfromuser_ = 0;
                this.bitField0_ &= -9;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupChangeMemberReq getDefaultInstanceForType() {
                return IMGroupChangeMemberReq.getDefaultInstance();
            }

            public IMGroupChangeMemberReq build() {
                IMGroupChangeMemberReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupChangeMemberReq buildPartial() {
                int i = 1;
                IMGroupChangeMemberReq iMGroupChangeMemberReq = new IMGroupChangeMemberReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupChangeMemberReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupChangeMemberReq.changeType_ = this.changeType_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupChangeMemberReq.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupChangeMemberReq.isfromuser_ = this.isfromuser_;
                if ((this.bitField0_ & 16) == 16) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupChangeMemberReq.memberIdList_ = this.memberIdList_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMGroupChangeMemberReq.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupChangeMemberReq.attachData_ = this.attachData_;
                iMGroupChangeMemberReq.bitField0_ = i;
                return iMGroupChangeMemberReq;
            }

            public Builder mergeFrom(IMGroupChangeMemberReq iMGroupChangeMemberReq) {
                if (iMGroupChangeMemberReq != IMGroupChangeMemberReq.getDefaultInstance()) {
                    if (iMGroupChangeMemberReq.hasUserId()) {
                        setUserId(iMGroupChangeMemberReq.getUserId());
                    }
                    if (iMGroupChangeMemberReq.hasChangeType()) {
                        setChangeType(iMGroupChangeMemberReq.getChangeType());
                    }
                    if (iMGroupChangeMemberReq.hasGroupId()) {
                        setGroupId(iMGroupChangeMemberReq.getGroupId());
                    }
                    if (iMGroupChangeMemberReq.hasIsfromuser()) {
                        setIsfromuser(iMGroupChangeMemberReq.getIsfromuser());
                    }
                    if (!iMGroupChangeMemberReq.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupChangeMemberReq.memberIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupChangeMemberReq.memberIdList_);
                        }
                    }
                    if (iMGroupChangeMemberReq.hasUserHandle()) {
                        setUserHandle(iMGroupChangeMemberReq.getUserHandle());
                    }
                    if (iMGroupChangeMemberReq.hasAttachData()) {
                        setAttachData(iMGroupChangeMemberReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupChangeMemberReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasChangeType() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupChangeMemberReq iMGroupChangeMemberReq;
                IMGroupChangeMemberReq iMGroupChangeMemberReq2;
                try {
                    IMGroupChangeMemberReq iMGroupChangeMemberReq3 = (IMGroupChangeMemberReq) IMGroupChangeMemberReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupChangeMemberReq3 != null) {
                        mergeFrom(iMGroupChangeMemberReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupChangeMemberReq2 = (IMGroupChangeMemberReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupChangeMemberReq = iMGroupChangeMemberReq2;
                    th = th2;
                }
                if (iMGroupChangeMemberReq != null) {
                    mergeFrom(iMGroupChangeMemberReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasChangeType() {
                return (this.bitField0_ & 2) == 2;
            }

            public GroupModifyType getChangeType() {
                return this.changeType_;
            }

            public Builder setChangeType(GroupModifyType groupModifyType) {
                if (groupModifyType == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.changeType_ = groupModifyType;
                return this;
            }

            public Builder clearChangeType() {
                this.bitField0_ &= -3;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 8;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -9;
                this.isfromuser_ = 0;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupChangeMemberReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupChangeMemberReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupChangeMemberReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupChangeMemberReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupChangeMemberReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupChangeMemberReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            int readEnum = codedInputStream.readEnum();
                            GroupModifyType valueOf = GroupModifyType.valueOf(readEnum);
                            if (valueOf != null) {
                                this.bitField0_ |= 2;
                                this.changeType_ = valueOf;
                                break;
                            } else {
                                newInstance.writeRawVarint32(readTag);
                                newInstance.writeRawVarint32(readEnum);
                                break;
                            }
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 48:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupChangeMemberReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasChangeType() {
            return (this.bitField0_ & 2) == 2;
        }

        public GroupModifyType getChangeType() {
            return this.changeType_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            this.groupId_ = 0;
            this.isfromuser_ = 0;
            this.memberIdList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasChangeType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.isfromuser_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(5, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeEnumSize(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeUInt32Size(4, this.isfromuser_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupChangeMemberReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupChangeMemberReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupChangeMemberReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupChangeMemberReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupChangeMemberReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupChangeMemberReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupChangeMemberReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupChangeMemberReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupChangeMemberReq iMGroupChangeMemberReq) {
            return newBuilder().mergeFrom(iMGroupChangeMemberReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupChangeMemberReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupModifyType getChangeType();

        int getGroupId();

        int getIsfromuser();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasChangeType();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupChangeMemberRsp extends GeneratedMessageLite implements IMGroupChangeMemberRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CHANGE_TYPE_FIELD_NUMBER = 2;
        public static final int CHG_USER_ID_LIST_FIELD_NUMBER = 6;
        public static final int CUR_USER_ID_LIST_FIELD_NUMBER = 5;
        public static final int GROUP_ID_FIELD_NUMBER = 4;
        public static final int GROUP_USERINFO_LIST_FIELD_NUMBER = 7;
        public static final int ISFROMUSER_FIELD_NUMBER = 9;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 8;
        public static Parser<IMGroupChangeMemberRsp> PARSER = new AbstractParser<IMGroupChangeMemberRsp>() {
            public IMGroupChangeMemberRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupChangeMemberRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 3;
        public static final int USER_HANDLE_FIELD_NUMBER = 10;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupChangeMemberRsp defaultInstance = new IMGroupChangeMemberRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public GroupModifyType changeType_;
        /* access modifiers changed from: private */
        public List<Integer> chgUserIdList_;
        /* access modifiers changed from: private */
        public List<Integer> curUserIdList_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public List<GroupUserInfo> groupUserinfoList_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupChangeMemberRsp, Builder> implements IMGroupChangeMemberRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private GroupModifyType changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            private List<Integer> chgUserIdList_ = Collections.emptyList();
            private List<Integer> curUserIdList_ = Collections.emptyList();
            private int groupId_;
            private List<GroupUserInfo> groupUserinfoList_ = Collections.emptyList();
            private int isfromuser_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                this.bitField0_ &= -9;
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -65;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -129;
                this.isfromuser_ = 0;
                this.bitField0_ &= -257;
                this.userHandle_ = 0;
                this.bitField0_ &= -513;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -1025;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupChangeMemberRsp getDefaultInstanceForType() {
                return IMGroupChangeMemberRsp.getDefaultInstance();
            }

            public IMGroupChangeMemberRsp build() {
                IMGroupChangeMemberRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupChangeMemberRsp buildPartial() {
                int i = 1;
                IMGroupChangeMemberRsp iMGroupChangeMemberRsp = new IMGroupChangeMemberRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupChangeMemberRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupChangeMemberRsp.changeType_ = this.changeType_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupChangeMemberRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupChangeMemberRsp.groupId_ = this.groupId_;
                if ((this.bitField0_ & 16) == 16) {
                    this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupChangeMemberRsp.curUserIdList_ = this.curUserIdList_;
                if ((this.bitField0_ & 32) == 32) {
                    this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    this.bitField0_ &= -33;
                }
                iMGroupChangeMemberRsp.chgUserIdList_ = this.chgUserIdList_;
                if ((this.bitField0_ & 64) == 64) {
                    this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    this.bitField0_ &= -65;
                }
                iMGroupChangeMemberRsp.groupUserinfoList_ = this.groupUserinfoList_;
                if ((this.bitField0_ & 128) == 128) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -129;
                }
                iMGroupChangeMemberRsp.memberIdList_ = this.memberIdList_;
                if ((i2 & 256) == 256) {
                    i |= 16;
                }
                iMGroupChangeMemberRsp.isfromuser_ = this.isfromuser_;
                if ((i2 & 512) == 512) {
                    i |= 32;
                }
                iMGroupChangeMemberRsp.userHandle_ = this.userHandle_;
                if ((i2 & 1024) == 1024) {
                    i |= 64;
                }
                iMGroupChangeMemberRsp.attachData_ = this.attachData_;
                iMGroupChangeMemberRsp.bitField0_ = i;
                return iMGroupChangeMemberRsp;
            }

            public Builder mergeFrom(IMGroupChangeMemberRsp iMGroupChangeMemberRsp) {
                if (iMGroupChangeMemberRsp != IMGroupChangeMemberRsp.getDefaultInstance()) {
                    if (iMGroupChangeMemberRsp.hasUserId()) {
                        setUserId(iMGroupChangeMemberRsp.getUserId());
                    }
                    if (iMGroupChangeMemberRsp.hasChangeType()) {
                        setChangeType(iMGroupChangeMemberRsp.getChangeType());
                    }
                    if (iMGroupChangeMemberRsp.hasResultCode()) {
                        setResultCode(iMGroupChangeMemberRsp.getResultCode());
                    }
                    if (iMGroupChangeMemberRsp.hasGroupId()) {
                        setGroupId(iMGroupChangeMemberRsp.getGroupId());
                    }
                    if (!iMGroupChangeMemberRsp.curUserIdList_.isEmpty()) {
                        if (this.curUserIdList_.isEmpty()) {
                            this.curUserIdList_ = iMGroupChangeMemberRsp.curUserIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureCurUserIdListIsMutable();
                            this.curUserIdList_.addAll(iMGroupChangeMemberRsp.curUserIdList_);
                        }
                    }
                    if (!iMGroupChangeMemberRsp.chgUserIdList_.isEmpty()) {
                        if (this.chgUserIdList_.isEmpty()) {
                            this.chgUserIdList_ = iMGroupChangeMemberRsp.chgUserIdList_;
                            this.bitField0_ &= -33;
                        } else {
                            ensureChgUserIdListIsMutable();
                            this.chgUserIdList_.addAll(iMGroupChangeMemberRsp.chgUserIdList_);
                        }
                    }
                    if (!iMGroupChangeMemberRsp.groupUserinfoList_.isEmpty()) {
                        if (this.groupUserinfoList_.isEmpty()) {
                            this.groupUserinfoList_ = iMGroupChangeMemberRsp.groupUserinfoList_;
                            this.bitField0_ &= -65;
                        } else {
                            ensureGroupUserinfoListIsMutable();
                            this.groupUserinfoList_.addAll(iMGroupChangeMemberRsp.groupUserinfoList_);
                        }
                    }
                    if (!iMGroupChangeMemberRsp.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupChangeMemberRsp.memberIdList_;
                            this.bitField0_ &= -129;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupChangeMemberRsp.memberIdList_);
                        }
                    }
                    if (iMGroupChangeMemberRsp.hasIsfromuser()) {
                        setIsfromuser(iMGroupChangeMemberRsp.getIsfromuser());
                    }
                    if (iMGroupChangeMemberRsp.hasUserHandle()) {
                        setUserHandle(iMGroupChangeMemberRsp.getUserHandle());
                    }
                    if (iMGroupChangeMemberRsp.hasAttachData()) {
                        setAttachData(iMGroupChangeMemberRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupChangeMemberRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasChangeType() && hasResultCode() && hasGroupId() && hasIsfromuser()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupChangeMemberRsp iMGroupChangeMemberRsp;
                IMGroupChangeMemberRsp iMGroupChangeMemberRsp2;
                try {
                    IMGroupChangeMemberRsp iMGroupChangeMemberRsp3 = (IMGroupChangeMemberRsp) IMGroupChangeMemberRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupChangeMemberRsp3 != null) {
                        mergeFrom(iMGroupChangeMemberRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupChangeMemberRsp2 = (IMGroupChangeMemberRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupChangeMemberRsp = iMGroupChangeMemberRsp2;
                    th = th2;
                }
                if (iMGroupChangeMemberRsp != null) {
                    mergeFrom(iMGroupChangeMemberRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasChangeType() {
                return (this.bitField0_ & 2) == 2;
            }

            public GroupModifyType getChangeType() {
                return this.changeType_;
            }

            public Builder setChangeType(GroupModifyType groupModifyType) {
                if (groupModifyType == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.changeType_ = groupModifyType;
                return this;
            }

            public Builder clearChangeType() {
                this.bitField0_ &= -3;
                this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 8;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -9;
                this.groupId_ = 0;
                return this;
            }

            private void ensureCurUserIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.curUserIdList_ = new ArrayList(this.curUserIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getCurUserIdListList() {
                return Collections.unmodifiableList(this.curUserIdList_);
            }

            public int getCurUserIdListCount() {
                return this.curUserIdList_.size();
            }

            public int getCurUserIdList(int i) {
                return ((Integer) this.curUserIdList_.get(i)).intValue();
            }

            public Builder setCurUserIdList(int i, int i2) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addCurUserIdList(int i) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllCurUserIdList(Iterable<? extends Integer> iterable) {
                ensureCurUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.curUserIdList_);
                return this;
            }

            public Builder clearCurUserIdList() {
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            private void ensureChgUserIdListIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.chgUserIdList_ = new ArrayList(this.chgUserIdList_);
                    this.bitField0_ |= 32;
                }
            }

            public List<Integer> getChgUserIdListList() {
                return Collections.unmodifiableList(this.chgUserIdList_);
            }

            public int getChgUserIdListCount() {
                return this.chgUserIdList_.size();
            }

            public int getChgUserIdList(int i) {
                return ((Integer) this.chgUserIdList_.get(i)).intValue();
            }

            public Builder setChgUserIdList(int i, int i2) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addChgUserIdList(int i) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllChgUserIdList(Iterable<? extends Integer> iterable) {
                ensureChgUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.chgUserIdList_);
                return this;
            }

            public Builder clearChgUserIdList() {
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            private void ensureGroupUserinfoListIsMutable() {
                if ((this.bitField0_ & 64) != 64) {
                    this.groupUserinfoList_ = new ArrayList(this.groupUserinfoList_);
                    this.bitField0_ |= 64;
                }
            }

            public List<GroupUserInfo> getGroupUserinfoListList() {
                return Collections.unmodifiableList(this.groupUserinfoList_);
            }

            public int getGroupUserinfoListCount() {
                return this.groupUserinfoList_.size();
            }

            public GroupUserInfo getGroupUserinfoList(int i) {
                return (GroupUserInfo) this.groupUserinfoList_.get(i);
            }

            public Builder setGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, groupUserInfo);
                return this;
            }

            public Builder setGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupUserinfoList(Iterable<? extends GroupUserInfo> iterable) {
                ensureGroupUserinfoListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupUserinfoList_);
                return this;
            }

            public Builder clearGroupUserinfoList() {
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -65;
                return this;
            }

            public Builder removeGroupUserinfoList(int i) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.remove(i);
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 128;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -129;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 256) == 256;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 256;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -257;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 512) == 512;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 512;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -513;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 1024;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -1025;
                this.attachData_ = IMGroupChangeMemberRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupChangeMemberRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupChangeMemberRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupChangeMemberRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupChangeMemberRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupChangeMemberRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            boolean z = false;
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z2) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z2 = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            int readEnum = codedInputStream.readEnum();
                            GroupModifyType valueOf = GroupModifyType.valueOf(readEnum);
                            if (valueOf != null) {
                                this.bitField0_ |= 2;
                                this.changeType_ = valueOf;
                                break;
                            } else {
                                newInstance.writeRawVarint32(readTag);
                                newInstance.writeRawVarint32(readEnum);
                                break;
                            }
                        case 24:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            if (!(z & true)) {
                                this.curUserIdList_ = new ArrayList();
                                z |= true;
                            }
                            this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_ = new ArrayList();
                                z |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 48:
                            if (!(z & true)) {
                                this.chgUserIdList_ = new ArrayList();
                                z |= true;
                            }
                            this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 50:
                            int pushLimit2 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_ = new ArrayList();
                                z |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit2);
                            break;
                        case 58:
                            if (!(z & true)) {
                                this.groupUserinfoList_ = new ArrayList();
                                z |= true;
                            }
                            this.groupUserinfoList_.add(codedInputStream.readMessage(GroupUserInfo.PARSER, extensionRegistryLite));
                            break;
                        case 64:
                            if (!(z & true)) {
                                this.memberIdList_ = new ArrayList();
                                z |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 66:
                            int pushLimit3 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit3);
                            break;
                        case 72:
                            this.bitField0_ |= 16;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 80:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z2 = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z & true) {
                        this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    }
                    if (z & true) {
                        this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    }
                    if (z & true) {
                        this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    }
                    if (z & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z & true) {
                this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
            }
            if (z & true) {
                this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
            }
            if (z & true) {
                this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
            }
            if (z & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupChangeMemberRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasChangeType() {
            return (this.bitField0_ & 2) == 2;
        }

        public GroupModifyType getChangeType() {
            return this.changeType_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public List<Integer> getCurUserIdListList() {
            return this.curUserIdList_;
        }

        public int getCurUserIdListCount() {
            return this.curUserIdList_.size();
        }

        public int getCurUserIdList(int i) {
            return ((Integer) this.curUserIdList_.get(i)).intValue();
        }

        public List<Integer> getChgUserIdListList() {
            return this.chgUserIdList_;
        }

        public int getChgUserIdListCount() {
            return this.chgUserIdList_.size();
        }

        public int getChgUserIdList(int i) {
            return ((Integer) this.chgUserIdList_.get(i)).intValue();
        }

        public List<GroupUserInfo> getGroupUserinfoListList() {
            return this.groupUserinfoList_;
        }

        public List<? extends GroupUserInfoOrBuilder> getGroupUserinfoListOrBuilderList() {
            return this.groupUserinfoList_;
        }

        public int getGroupUserinfoListCount() {
            return this.groupUserinfoList_.size();
        }

        public GroupUserInfo getGroupUserinfoList(int i) {
            return (GroupUserInfo) this.groupUserinfoList_.get(i);
        }

        public GroupUserInfoOrBuilder getGroupUserinfoListOrBuilder(int i) {
            return (GroupUserInfoOrBuilder) this.groupUserinfoList_.get(i);
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.changeType_ = GroupModifyType.GROUP_MODIFY_TYPE_ADD;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.curUserIdList_ = Collections.emptyList();
            this.chgUserIdList_ = Collections.emptyList();
            this.groupUserinfoList_ = Collections.emptyList();
            this.memberIdList_ = Collections.emptyList();
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasChangeType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsfromuser()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.groupId_);
            }
            for (int i = 0; i < this.curUserIdList_.size(); i++) {
                codedOutputStream.writeUInt32(5, ((Integer) this.curUserIdList_.get(i)).intValue());
            }
            for (int i2 = 0; i2 < this.chgUserIdList_.size(); i2++) {
                codedOutputStream.writeUInt32(6, ((Integer) this.chgUserIdList_.get(i2)).intValue());
            }
            for (int i3 = 0; i3 < this.groupUserinfoList_.size(); i3++) {
                codedOutputStream.writeMessage(7, (MessageLite) this.groupUserinfoList_.get(i3));
            }
            for (int i4 = 0; i4 < this.memberIdList_.size(); i4++) {
                codedOutputStream.writeUInt32(8, ((Integer) this.memberIdList_.get(i4)).intValue());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(9, this.isfromuser_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(10, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeEnumSize(2, this.changeType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeUInt32Size(4, this.groupId_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            for (int i6 = 0; i6 < this.curUserIdList_.size(); i6++) {
                i5 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.curUserIdList_.get(i6)).intValue());
            }
            int size = i2 + i5 + (getCurUserIdListList().size() * 1);
            int i7 = 0;
            for (int i8 = 0; i8 < this.chgUserIdList_.size(); i8++) {
                i7 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.chgUserIdList_.get(i8)).intValue());
            }
            int size2 = size + i7 + (getChgUserIdListList().size() * 1);
            for (int i9 = 0; i9 < this.groupUserinfoList_.size(); i9++) {
                size2 += CodedOutputStream.computeMessageSize(7, (MessageLite) this.groupUserinfoList_.get(i9));
            }
            int i10 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i10 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i10;
            }
            int size3 = size2 + i10 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size3 += CodedOutputStream.computeUInt32Size(9, this.isfromuser_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size3 += CodedOutputStream.computeUInt32Size(10, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size3 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size4 = size3 + this.unknownFields.size();
            this.memoizedSerializedSize = size4;
            return size4;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupChangeMemberRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupChangeMemberRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupChangeMemberRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupChangeMemberRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupChangeMemberRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupChangeMemberRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupChangeMemberRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupChangeMemberRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupChangeMemberRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupChangeMemberRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupChangeMemberRsp iMGroupChangeMemberRsp) {
            return newBuilder().mergeFrom(iMGroupChangeMemberRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupChangeMemberRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupModifyType getChangeType();

        int getChgUserIdList(int i);

        int getChgUserIdListCount();

        List<Integer> getChgUserIdListList();

        int getCurUserIdList(int i);

        int getCurUserIdListCount();

        List<Integer> getCurUserIdListList();

        int getGroupId();

        GroupUserInfo getGroupUserinfoList(int i);

        int getGroupUserinfoListCount();

        List<GroupUserInfo> getGroupUserinfoListList();

        int getIsfromuser();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasChangeType();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupConferenceMemberNotify extends GeneratedMessageLite implements IMGroupConferenceMemberNotifyOrBuilder {
        public static final int CONFERENCE_ID_FIELD_NUMBER = 3;
        public static final int CONFERENCE_ID_LIST_FIELD_NUMBER = 5;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 4;
        public static Parser<IMGroupConferenceMemberNotify> PARSER = new AbstractParser<IMGroupConferenceMemberNotify>() {
            public IMGroupConferenceMemberNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupConferenceMemberNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int STR_CONFERENCE_UIDS_FIELD_NUMBER = 7;
        public static final int STR_MEMBER_UIDS_FIELD_NUMBER = 6;
        public static final int USER_UID_FIELD_NUMBER = 1;
        private static final IMGroupConferenceMemberNotify defaultInstance = new IMGroupConferenceMemberNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<Integer> conferenceIdList_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object strConferenceUids_;
        /* access modifiers changed from: private */
        public Object strMemberUids_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userUid_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupConferenceMemberNotify, Builder> implements IMGroupConferenceMemberNotifyOrBuilder {
            private int bitField0_;
            private List<Integer> conferenceIdList_ = Collections.emptyList();
            private Object conferenceId_ = "";
            private int groupId_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private Object strConferenceUids_ = "";
            private Object strMemberUids_ = "";
            private int userUid_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userUid_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.conferenceId_ = "";
                this.bitField0_ &= -5;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                this.conferenceIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.strMemberUids_ = "";
                this.bitField0_ &= -33;
                this.strConferenceUids_ = "";
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupConferenceMemberNotify getDefaultInstanceForType() {
                return IMGroupConferenceMemberNotify.getDefaultInstance();
            }

            public IMGroupConferenceMemberNotify build() {
                IMGroupConferenceMemberNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupConferenceMemberNotify buildPartial() {
                int i = 1;
                IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify = new IMGroupConferenceMemberNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupConferenceMemberNotify.userUid_ = this.userUid_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupConferenceMemberNotify.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupConferenceMemberNotify.conferenceId_ = this.conferenceId_;
                if ((this.bitField0_ & 8) == 8) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -9;
                }
                iMGroupConferenceMemberNotify.memberIdList_ = this.memberIdList_;
                if ((this.bitField0_ & 16) == 16) {
                    this.conferenceIdList_ = Collections.unmodifiableList(this.conferenceIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupConferenceMemberNotify.conferenceIdList_ = this.conferenceIdList_;
                if ((i2 & 32) == 32) {
                    i |= 8;
                }
                iMGroupConferenceMemberNotify.strMemberUids_ = this.strMemberUids_;
                if ((i2 & 64) == 64) {
                    i |= 16;
                }
                iMGroupConferenceMemberNotify.strConferenceUids_ = this.strConferenceUids_;
                iMGroupConferenceMemberNotify.bitField0_ = i;
                return iMGroupConferenceMemberNotify;
            }

            public Builder mergeFrom(IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify) {
                if (iMGroupConferenceMemberNotify != IMGroupConferenceMemberNotify.getDefaultInstance()) {
                    if (iMGroupConferenceMemberNotify.hasUserUid()) {
                        setUserUid(iMGroupConferenceMemberNotify.getUserUid());
                    }
                    if (iMGroupConferenceMemberNotify.hasGroupId()) {
                        setGroupId(iMGroupConferenceMemberNotify.getGroupId());
                    }
                    if (iMGroupConferenceMemberNotify.hasConferenceId()) {
                        this.bitField0_ |= 4;
                        this.conferenceId_ = iMGroupConferenceMemberNotify.conferenceId_;
                    }
                    if (!iMGroupConferenceMemberNotify.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupConferenceMemberNotify.memberIdList_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupConferenceMemberNotify.memberIdList_);
                        }
                    }
                    if (!iMGroupConferenceMemberNotify.conferenceIdList_.isEmpty()) {
                        if (this.conferenceIdList_.isEmpty()) {
                            this.conferenceIdList_ = iMGroupConferenceMemberNotify.conferenceIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureConferenceIdListIsMutable();
                            this.conferenceIdList_.addAll(iMGroupConferenceMemberNotify.conferenceIdList_);
                        }
                    }
                    if (iMGroupConferenceMemberNotify.hasStrMemberUids()) {
                        this.bitField0_ |= 32;
                        this.strMemberUids_ = iMGroupConferenceMemberNotify.strMemberUids_;
                    }
                    if (iMGroupConferenceMemberNotify.hasStrConferenceUids()) {
                        this.bitField0_ |= 64;
                        this.strConferenceUids_ = iMGroupConferenceMemberNotify.strConferenceUids_;
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupConferenceMemberNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasGroupId() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify;
                IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify2;
                try {
                    IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify3 = (IMGroupConferenceMemberNotify) IMGroupConferenceMemberNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupConferenceMemberNotify3 != null) {
                        mergeFrom(iMGroupConferenceMemberNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupConferenceMemberNotify2 = (IMGroupConferenceMemberNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupConferenceMemberNotify = iMGroupConferenceMemberNotify2;
                    th = th2;
                }
                if (iMGroupConferenceMemberNotify != null) {
                    mergeFrom(iMGroupConferenceMemberNotify);
                }
                throw th;
            }

            public boolean hasUserUid() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserUid() {
                return this.userUid_;
            }

            public Builder setUserUid(int i) {
                this.bitField0_ |= 1;
                this.userUid_ = i;
                return this;
            }

            public Builder clearUserUid() {
                this.bitField0_ &= -2;
                this.userUid_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -5;
                this.conferenceId_ = IMGroupConferenceMemberNotify.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = byteString;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 8;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            private void ensureConferenceIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.conferenceIdList_ = new ArrayList(this.conferenceIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getConferenceIdListList() {
                return Collections.unmodifiableList(this.conferenceIdList_);
            }

            public int getConferenceIdListCount() {
                return this.conferenceIdList_.size();
            }

            public int getConferenceIdList(int i) {
                return ((Integer) this.conferenceIdList_.get(i)).intValue();
            }

            public Builder setConferenceIdList(int i, int i2) {
                ensureConferenceIdListIsMutable();
                this.conferenceIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addConferenceIdList(int i) {
                ensureConferenceIdListIsMutable();
                this.conferenceIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllConferenceIdList(Iterable<? extends Integer> iterable) {
                ensureConferenceIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.conferenceIdList_);
                return this;
            }

            public Builder clearConferenceIdList() {
                this.conferenceIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasStrMemberUids() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getStrMemberUids() {
                Object obj = this.strMemberUids_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.strMemberUids_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getStrMemberUidsBytes() {
                Object obj = this.strMemberUids_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.strMemberUids_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setStrMemberUids(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.strMemberUids_ = str;
                return this;
            }

            public Builder clearStrMemberUids() {
                this.bitField0_ &= -33;
                this.strMemberUids_ = IMGroupConferenceMemberNotify.getDefaultInstance().getStrMemberUids();
                return this;
            }

            public Builder setStrMemberUidsBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.strMemberUids_ = byteString;
                return this;
            }

            public boolean hasStrConferenceUids() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getStrConferenceUids() {
                Object obj = this.strConferenceUids_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.strConferenceUids_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getStrConferenceUidsBytes() {
                Object obj = this.strConferenceUids_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.strConferenceUids_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setStrConferenceUids(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.strConferenceUids_ = str;
                return this;
            }

            public Builder clearStrConferenceUids() {
                this.bitField0_ &= -65;
                this.strConferenceUids_ = IMGroupConferenceMemberNotify.getDefaultInstance().getStrConferenceUids();
                return this;
            }

            public Builder setStrConferenceUidsBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.strConferenceUids_ = byteString;
                return this;
            }
        }

        private IMGroupConferenceMemberNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupConferenceMemberNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupConferenceMemberNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupConferenceMemberNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupConferenceMemberNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userUid_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.conferenceId_ = readBytes;
                            break;
                        case 32:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 34:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.conferenceIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.conferenceIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit2 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.conferenceIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.conferenceIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit2);
                            break;
                        case 50:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.strMemberUids_ = readBytes2;
                            break;
                        case 58:
                            ByteString readBytes3 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.strConferenceUids_ = readBytes3;
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    if (z2 & true) {
                        this.conferenceIdList_ = Collections.unmodifiableList(this.conferenceIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            if (z2 & true) {
                this.conferenceIdList_ = Collections.unmodifiableList(this.conferenceIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupConferenceMemberNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasUserUid() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserUid() {
            return this.userUid_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public List<Integer> getConferenceIdListList() {
            return this.conferenceIdList_;
        }

        public int getConferenceIdListCount() {
            return this.conferenceIdList_.size();
        }

        public int getConferenceIdList(int i) {
            return ((Integer) this.conferenceIdList_.get(i)).intValue();
        }

        public boolean hasStrMemberUids() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getStrMemberUids() {
            Object obj = this.strMemberUids_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.strMemberUids_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getStrMemberUidsBytes() {
            Object obj = this.strMemberUids_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.strMemberUids_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasStrConferenceUids() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getStrConferenceUids() {
            Object obj = this.strConferenceUids_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.strConferenceUids_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getStrConferenceUidsBytes() {
            Object obj = this.strConferenceUids_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.strConferenceUids_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.userUid_ = 0;
            this.groupId_ = 0;
            this.conferenceId_ = "";
            this.memberIdList_ = Collections.emptyList();
            this.conferenceIdList_ = Collections.emptyList();
            this.strMemberUids_ = "";
            this.strConferenceUids_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userUid_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getConferenceIdBytes());
            }
            for (int i = 0; i < this.memberIdList_.size(); i++) {
                codedOutputStream.writeUInt32(4, ((Integer) this.memberIdList_.get(i)).intValue());
            }
            for (int i2 = 0; i2 < this.conferenceIdList_.size(); i2++) {
                codedOutputStream.writeUInt32(5, ((Integer) this.conferenceIdList_.get(i2)).intValue());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(6, getStrMemberUidsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(7, getStrConferenceUidsBytes());
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userUid_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 = i + CodedOutputStream.computeBytesSize(3, getConferenceIdBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            for (int i6 = 0; i6 < this.memberIdList_.size(); i6++) {
                i5 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i6)).intValue());
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            int i7 = 0;
            while (i3 < this.conferenceIdList_.size()) {
                i3++;
                i7 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.conferenceIdList_.get(i3)).intValue()) + i7;
            }
            int size2 = size + i7 + (getConferenceIdListList().size() * 1);
            if ((this.bitField0_ & 8) == 8) {
                size2 += CodedOutputStream.computeBytesSize(6, getStrMemberUidsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                size2 += CodedOutputStream.computeBytesSize(7, getStrConferenceUidsBytes());
            }
            int size3 = size2 + this.unknownFields.size();
            this.memoizedSerializedSize = size3;
            return size3;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupConferenceMemberNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(byteString);
        }

        public static IMGroupConferenceMemberNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupConferenceMemberNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(bArr);
        }

        public static IMGroupConferenceMemberNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupConferenceMemberNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(inputStream);
        }

        public static IMGroupConferenceMemberNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupConferenceMemberNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupConferenceMemberNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupConferenceMemberNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupConferenceMemberNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupConferenceMemberNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupConferenceMemberNotify iMGroupConferenceMemberNotify) {
            return newBuilder().mergeFrom(iMGroupConferenceMemberNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupConferenceMemberNotifyOrBuilder extends MessageLiteOrBuilder {
        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getConferenceIdList(int i);

        int getConferenceIdListCount();

        List<Integer> getConferenceIdListList();

        int getGroupId();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        String getStrConferenceUids();

        ByteString getStrConferenceUidsBytes();

        String getStrMemberUids();

        ByteString getStrMemberUidsBytes();

        int getUserUid();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasStrConferenceUids();

        boolean hasStrMemberUids();

        boolean hasUserUid();
    }

    public static final class IMGroupCreateReq extends GeneratedMessageLite implements IMGroupCreateReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_AVATAR_FIELD_NUMBER = 5;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static final int GROUP_TYPE_FIELD_NUMBER = 3;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 6;
        public static Parser<IMGroupCreateReq> PARSER = new AbstractParser<IMGroupCreateReq>() {
            public IMGroupCreateReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupCreateReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 7;
        public static final int USER_ID_FIELD_NUMBER = 1;
        public static final int USER_NAME_FIELD_NUMBER = 2;
        private static final IMGroupCreateReq defaultInstance = new IMGroupCreateReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object groupAvatar_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public GroupType groupType_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;
        /* access modifiers changed from: private */
        public Object userName_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupCreateReq, Builder> implements IMGroupCreateReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object groupAvatar_ = "";
            private Object groupName_ = "";
            private GroupType groupType_ = GroupType.GROUP_TYPE_TMP;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;
            private Object userName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.userName_ = "";
                this.bitField0_ &= -3;
                this.groupType_ = GroupType.GROUP_TYPE_TMP;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.groupAvatar_ = "";
                this.bitField0_ &= -17;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                this.bitField0_ &= -65;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -129;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupCreateReq getDefaultInstanceForType() {
                return IMGroupCreateReq.getDefaultInstance();
            }

            public IMGroupCreateReq build() {
                IMGroupCreateReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupCreateReq buildPartial() {
                int i = 1;
                IMGroupCreateReq iMGroupCreateReq = new IMGroupCreateReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupCreateReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupCreateReq.userName_ = this.userName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupCreateReq.groupType_ = this.groupType_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupCreateReq.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupCreateReq.groupAvatar_ = this.groupAvatar_;
                if ((this.bitField0_ & 32) == 32) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -33;
                }
                iMGroupCreateReq.memberIdList_ = this.memberIdList_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupCreateReq.userHandle_ = this.userHandle_;
                if ((i2 & 128) == 128) {
                    i |= 64;
                }
                iMGroupCreateReq.attachData_ = this.attachData_;
                iMGroupCreateReq.bitField0_ = i;
                return iMGroupCreateReq;
            }

            public Builder mergeFrom(IMGroupCreateReq iMGroupCreateReq) {
                if (iMGroupCreateReq != IMGroupCreateReq.getDefaultInstance()) {
                    if (iMGroupCreateReq.hasUserId()) {
                        setUserId(iMGroupCreateReq.getUserId());
                    }
                    if (iMGroupCreateReq.hasUserName()) {
                        this.bitField0_ |= 2;
                        this.userName_ = iMGroupCreateReq.userName_;
                    }
                    if (iMGroupCreateReq.hasGroupType()) {
                        setGroupType(iMGroupCreateReq.getGroupType());
                    }
                    if (iMGroupCreateReq.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMGroupCreateReq.groupName_;
                    }
                    if (iMGroupCreateReq.hasGroupAvatar()) {
                        this.bitField0_ |= 16;
                        this.groupAvatar_ = iMGroupCreateReq.groupAvatar_;
                    }
                    if (!iMGroupCreateReq.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupCreateReq.memberIdList_;
                            this.bitField0_ &= -33;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupCreateReq.memberIdList_);
                        }
                    }
                    if (iMGroupCreateReq.hasUserHandle()) {
                        setUserHandle(iMGroupCreateReq.getUserHandle());
                    }
                    if (iMGroupCreateReq.hasAttachData()) {
                        setAttachData(iMGroupCreateReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupCreateReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasUserName() && hasGroupType() && hasGroupName() && hasGroupAvatar()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupCreateReq iMGroupCreateReq;
                IMGroupCreateReq iMGroupCreateReq2;
                try {
                    IMGroupCreateReq iMGroupCreateReq3 = (IMGroupCreateReq) IMGroupCreateReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupCreateReq3 != null) {
                        mergeFrom(iMGroupCreateReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupCreateReq2 = (IMGroupCreateReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupCreateReq = iMGroupCreateReq2;
                    th = th2;
                }
                if (iMGroupCreateReq != null) {
                    mergeFrom(iMGroupCreateReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getUserName() {
                Object obj = this.userName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.userName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getUserNameBytes() {
                Object obj = this.userName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.userName_ = str;
                return this;
            }

            public Builder clearUserName() {
                this.bitField0_ &= -3;
                this.userName_ = IMGroupCreateReq.getDefaultInstance().getUserName();
                return this;
            }

            public Builder setUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.userName_ = byteString;
                return this;
            }

            public boolean hasGroupType() {
                return (this.bitField0_ & 4) == 4;
            }

            public GroupType getGroupType() {
                return this.groupType_;
            }

            public Builder setGroupType(GroupType groupType) {
                if (groupType == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.groupType_ = groupType;
                return this;
            }

            public Builder clearGroupType() {
                this.bitField0_ &= -5;
                this.groupType_ = GroupType.GROUP_TYPE_TMP;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMGroupCreateReq.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasGroupAvatar() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getGroupAvatar() {
                Object obj = this.groupAvatar_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupAvatar_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupAvatarBytes() {
                Object obj = this.groupAvatar_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupAvatar_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupAvatar(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupAvatar_ = str;
                return this;
            }

            public Builder clearGroupAvatar() {
                this.bitField0_ &= -17;
                this.groupAvatar_ = IMGroupCreateReq.getDefaultInstance().getGroupAvatar();
                return this;
            }

            public Builder setGroupAvatarBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupAvatar_ = byteString;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 32;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 64;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 128) == 128;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 128;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -129;
                this.attachData_ = IMGroupCreateReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupCreateReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupCreateReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupCreateReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupCreateReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupCreateReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.userName_ = readBytes;
                            break;
                        case 24:
                            int readEnum = codedInputStream.readEnum();
                            GroupType valueOf = GroupType.valueOf(readEnum);
                            if (valueOf != null) {
                                this.bitField0_ |= 4;
                                this.groupType_ = valueOf;
                                break;
                            } else {
                                newInstance.writeRawVarint32(readTag);
                                newInstance.writeRawVarint32(readEnum);
                                break;
                            }
                        case 34:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes2;
                            break;
                        case 42:
                            ByteString readBytes3 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.groupAvatar_ = readBytes3;
                            break;
                        case 48:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 50:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 56:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupCreateReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getUserName() {
            Object obj = this.userName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getUserNameBytes() {
            Object obj = this.userName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupType() {
            return (this.bitField0_ & 4) == 4;
        }

        public GroupType getGroupType() {
            return this.groupType_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasGroupAvatar() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getGroupAvatar() {
            Object obj = this.groupAvatar_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupAvatar_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupAvatarBytes() {
            Object obj = this.groupAvatar_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupAvatar_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.userName_ = "";
            this.groupType_ = GroupType.GROUP_TYPE_TMP;
            this.groupName_ = "";
            this.groupAvatar_ = "";
            this.memberIdList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupAvatar()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.groupType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getGroupAvatarBytes());
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(6, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(7, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeBytesSize(2, getUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeEnumSize(3, this.groupType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                i += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 = i + CodedOutputStream.computeBytesSize(5, getGroupAvatarBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeUInt32Size(7, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupCreateReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupCreateReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupCreateReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupCreateReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupCreateReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupCreateReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupCreateReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupCreateReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupCreateReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupCreateReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupCreateReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupCreateReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupCreateReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupCreateReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupCreateReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupCreateReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupCreateReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupCreateReq iMGroupCreateReq) {
            return newBuilder().mergeFrom(iMGroupCreateReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupCreateReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getGroupAvatar();

        ByteString getGroupAvatarBytes();

        String getGroupName();

        ByteString getGroupNameBytes();

        GroupType getGroupType();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getUserHandle();

        int getUserId();

        String getUserName();

        ByteString getUserNameBytes();

        boolean hasAttachData();

        boolean hasGroupAvatar();

        boolean hasGroupName();

        boolean hasGroupType();

        boolean hasUserHandle();

        boolean hasUserId();

        boolean hasUserName();
    }

    public static final class IMGroupCreateRsp extends GeneratedMessageLite implements IMGroupCreateRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_AVATAR_FIELD_NUMBER = 9;
        public static final int GROUP_ID_FIELD_NUMBER = 5;
        public static final int GROUP_NAME_FIELD_NUMBER = 7;
        public static final int GROUP_TYPE_FIELD_NUMBER = 6;
        public static Parser<IMGroupCreateRsp> PARSER = new AbstractParser<IMGroupCreateRsp>() {
            public IMGroupCreateRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupCreateRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 3;
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        public static final int USER_ID_LIST_FIELD_NUMBER = 8;
        public static final int USER_NAME_FIELD_NUMBER = 2;
        private static final IMGroupCreateRsp defaultInstance = new IMGroupCreateRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object groupAvatar_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public GroupType groupType_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public List<Integer> userIdList_;
        /* access modifiers changed from: private */
        public int userId_;
        /* access modifiers changed from: private */
        public Object userName_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupCreateRsp, Builder> implements IMGroupCreateRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object groupAvatar_ = "";
            private int groupId_;
            private Object groupName_ = "";
            private GroupType groupType_ = GroupType.GROUP_TYPE_NORMAL;
            private int resultCode_;
            private int userHandle_;
            private List<Integer> userIdList_ = Collections.emptyList();
            private int userId_;
            private Object userName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.userName_ = "";
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.groupId_ = 0;
                this.bitField0_ &= -17;
                this.groupType_ = GroupType.GROUP_TYPE_NORMAL;
                this.bitField0_ &= -33;
                this.groupName_ = "";
                this.bitField0_ &= -65;
                this.userIdList_ = Collections.emptyList();
                this.bitField0_ &= -129;
                this.groupAvatar_ = "";
                this.bitField0_ &= -257;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -513;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupCreateRsp getDefaultInstanceForType() {
                return IMGroupCreateRsp.getDefaultInstance();
            }

            public IMGroupCreateRsp build() {
                IMGroupCreateRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupCreateRsp buildPartial() {
                int i = 1;
                IMGroupCreateRsp iMGroupCreateRsp = new IMGroupCreateRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupCreateRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupCreateRsp.userName_ = this.userName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupCreateRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupCreateRsp.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupCreateRsp.groupId_ = this.groupId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupCreateRsp.groupType_ = this.groupType_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMGroupCreateRsp.groupName_ = this.groupName_;
                if ((this.bitField0_ & 128) == 128) {
                    this.userIdList_ = Collections.unmodifiableList(this.userIdList_);
                    this.bitField0_ &= -129;
                }
                iMGroupCreateRsp.userIdList_ = this.userIdList_;
                if ((i2 & 256) == 256) {
                    i |= 128;
                }
                iMGroupCreateRsp.groupAvatar_ = this.groupAvatar_;
                if ((i2 & 512) == 512) {
                    i |= 256;
                }
                iMGroupCreateRsp.attachData_ = this.attachData_;
                iMGroupCreateRsp.bitField0_ = i;
                return iMGroupCreateRsp;
            }

            public Builder mergeFrom(IMGroupCreateRsp iMGroupCreateRsp) {
                if (iMGroupCreateRsp != IMGroupCreateRsp.getDefaultInstance()) {
                    if (iMGroupCreateRsp.hasUserId()) {
                        setUserId(iMGroupCreateRsp.getUserId());
                    }
                    if (iMGroupCreateRsp.hasUserName()) {
                        this.bitField0_ |= 2;
                        this.userName_ = iMGroupCreateRsp.userName_;
                    }
                    if (iMGroupCreateRsp.hasResultCode()) {
                        setResultCode(iMGroupCreateRsp.getResultCode());
                    }
                    if (iMGroupCreateRsp.hasUserHandle()) {
                        setUserHandle(iMGroupCreateRsp.getUserHandle());
                    }
                    if (iMGroupCreateRsp.hasGroupId()) {
                        setGroupId(iMGroupCreateRsp.getGroupId());
                    }
                    if (iMGroupCreateRsp.hasGroupType()) {
                        setGroupType(iMGroupCreateRsp.getGroupType());
                    }
                    if (iMGroupCreateRsp.hasGroupName()) {
                        this.bitField0_ |= 64;
                        this.groupName_ = iMGroupCreateRsp.groupName_;
                    }
                    if (!iMGroupCreateRsp.userIdList_.isEmpty()) {
                        if (this.userIdList_.isEmpty()) {
                            this.userIdList_ = iMGroupCreateRsp.userIdList_;
                            this.bitField0_ &= -129;
                        } else {
                            ensureUserIdListIsMutable();
                            this.userIdList_.addAll(iMGroupCreateRsp.userIdList_);
                        }
                    }
                    if (iMGroupCreateRsp.hasGroupAvatar()) {
                        this.bitField0_ |= 256;
                        this.groupAvatar_ = iMGroupCreateRsp.groupAvatar_;
                    }
                    if (iMGroupCreateRsp.hasAttachData()) {
                        setAttachData(iMGroupCreateRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupCreateRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasUserName() && hasResultCode() && hasGroupType() && hasGroupName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupCreateRsp iMGroupCreateRsp;
                IMGroupCreateRsp iMGroupCreateRsp2;
                try {
                    IMGroupCreateRsp iMGroupCreateRsp3 = (IMGroupCreateRsp) IMGroupCreateRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupCreateRsp3 != null) {
                        mergeFrom(iMGroupCreateRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupCreateRsp2 = (IMGroupCreateRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupCreateRsp = iMGroupCreateRsp2;
                    th = th2;
                }
                if (iMGroupCreateRsp != null) {
                    mergeFrom(iMGroupCreateRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getUserName() {
                Object obj = this.userName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.userName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getUserNameBytes() {
                Object obj = this.userName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.userName_ = str;
                return this;
            }

            public Builder clearUserName() {
                this.bitField0_ &= -3;
                this.userName_ = IMGroupCreateRsp.getDefaultInstance().getUserName();
                return this;
            }

            public Builder setUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.userName_ = byteString;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 16;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -17;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupType() {
                return (this.bitField0_ & 32) == 32;
            }

            public GroupType getGroupType() {
                return this.groupType_;
            }

            public Builder setGroupType(GroupType groupType) {
                if (groupType == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.groupType_ = groupType;
                return this;
            }

            public Builder clearGroupType() {
                this.bitField0_ &= -33;
                this.groupType_ = GroupType.GROUP_TYPE_NORMAL;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 64) == 64;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -65;
                this.groupName_ = IMGroupCreateRsp.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.groupName_ = byteString;
                return this;
            }

            private void ensureUserIdListIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.userIdList_ = new ArrayList(this.userIdList_);
                    this.bitField0_ |= 128;
                }
            }

            public List<Integer> getUserIdListList() {
                return Collections.unmodifiableList(this.userIdList_);
            }

            public int getUserIdListCount() {
                return this.userIdList_.size();
            }

            public int getUserIdList(int i) {
                return ((Integer) this.userIdList_.get(i)).intValue();
            }

            public Builder setUserIdList(int i, int i2) {
                ensureUserIdListIsMutable();
                this.userIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addUserIdList(int i) {
                ensureUserIdListIsMutable();
                this.userIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllUserIdList(Iterable<? extends Integer> iterable) {
                ensureUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.userIdList_);
                return this;
            }

            public Builder clearUserIdList() {
                this.userIdList_ = Collections.emptyList();
                this.bitField0_ &= -129;
                return this;
            }

            public boolean hasGroupAvatar() {
                return (this.bitField0_ & 256) == 256;
            }

            public String getGroupAvatar() {
                Object obj = this.groupAvatar_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupAvatar_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupAvatarBytes() {
                Object obj = this.groupAvatar_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupAvatar_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupAvatar(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 256;
                this.groupAvatar_ = str;
                return this;
            }

            public Builder clearGroupAvatar() {
                this.bitField0_ &= -257;
                this.groupAvatar_ = IMGroupCreateRsp.getDefaultInstance().getGroupAvatar();
                return this;
            }

            public Builder setGroupAvatarBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 256;
                this.groupAvatar_ = byteString;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 512) == 512;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 512;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -513;
                this.attachData_ = IMGroupCreateRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupCreateRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupCreateRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupCreateRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupCreateRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupCreateRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.userName_ = readBytes;
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            int readEnum = codedInputStream.readEnum();
                            GroupType valueOf = GroupType.valueOf(readEnum);
                            if (valueOf != null) {
                                this.bitField0_ |= 32;
                                this.groupType_ = valueOf;
                                break;
                            } else {
                                newInstance.writeRawVarint32(readTag);
                                newInstance.writeRawVarint32(readEnum);
                                break;
                            }
                        case 58:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 64;
                            this.groupName_ = readBytes2;
                            break;
                        case 64:
                            if (!(z2 & true)) {
                                this.userIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.userIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 66:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.userIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.userIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 74:
                            ByteString readBytes3 = codedInputStream.readBytes();
                            this.bitField0_ |= 128;
                            this.groupAvatar_ = readBytes3;
                            break;
                        case 162:
                            this.bitField0_ |= 256;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.userIdList_ = Collections.unmodifiableList(this.userIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.userIdList_ = Collections.unmodifiableList(this.userIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupCreateRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getUserName() {
            Object obj = this.userName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getUserNameBytes() {
            Object obj = this.userName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupType() {
            return (this.bitField0_ & 32) == 32;
        }

        public GroupType getGroupType() {
            return this.groupType_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 64) == 64;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getUserIdListList() {
            return this.userIdList_;
        }

        public int getUserIdListCount() {
            return this.userIdList_.size();
        }

        public int getUserIdList(int i) {
            return ((Integer) this.userIdList_.get(i)).intValue();
        }

        public boolean hasGroupAvatar() {
            return (this.bitField0_ & 128) == 128;
        }

        public String getGroupAvatar() {
            Object obj = this.groupAvatar_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupAvatar_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupAvatarBytes() {
            Object obj = this.groupAvatar_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupAvatar_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 256) == 256;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.userName_ = "";
            this.resultCode_ = 0;
            this.userHandle_ = 0;
            this.groupId_ = 0;
            this.groupType_ = GroupType.GROUP_TYPE_NORMAL;
            this.groupName_ = "";
            this.userIdList_ = Collections.emptyList();
            this.groupAvatar_ = "";
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.groupId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeEnum(6, this.groupType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getGroupNameBytes());
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.userIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(8, ((Integer) this.userIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(9, getGroupAvatarBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeBytesSize(2, getUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i += CodedOutputStream.computeUInt32Size(5, this.groupId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i += CodedOutputStream.computeEnumSize(6, this.groupType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 = i + CodedOutputStream.computeBytesSize(7, getGroupNameBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.userIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.userIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getUserIdListList().size() * 1);
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeBytesSize(9, getGroupAvatarBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupCreateRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupCreateRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupCreateRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupCreateRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupCreateRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupCreateRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupCreateRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupCreateRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupCreateRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupCreateRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupCreateRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupCreateRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupCreateRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupCreateRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupCreateRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupCreateRsp iMGroupCreateRsp) {
            return newBuilder().mergeFrom(iMGroupCreateRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupCreateRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getGroupAvatar();

        ByteString getGroupAvatarBytes();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        GroupType getGroupType();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        int getUserIdList(int i);

        int getUserIdListCount();

        List<Integer> getUserIdListList();

        String getUserName();

        ByteString getUserNameBytes();

        boolean hasAttachData();

        boolean hasGroupAvatar();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasGroupType();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();

        boolean hasUserName();
    }

    public static final class IMGroupDestroyConferenceNotify extends GeneratedMessageLite implements IMGroupDestroyConferenceNotifyOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 5;
        public static Parser<IMGroupDestroyConferenceNotify> PARSER = new AbstractParser<IMGroupDestroyConferenceNotify>() {
            public IMGroupDestroyConferenceNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupDestroyConferenceNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_UID_FIELD_NUMBER = 2;
        public static final int STR_MEMBER_UIDS_FIELD_NUMBER = 6;
        public static final int USER_HANDLE_FIELD_NUMBER = 9;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupDestroyConferenceNotify defaultInstance = new IMGroupDestroyConferenceNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUid_;
        /* access modifiers changed from: private */
        public Object strMemberUids_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupDestroyConferenceNotify, Builder> implements IMGroupDestroyConferenceNotifyOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int reqUid_;
            private Object strMemberUids_ = "";
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.reqUid_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.conferenceId_ = "";
                this.bitField0_ &= -9;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.strMemberUids_ = "";
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                this.bitField0_ &= -65;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -129;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupDestroyConferenceNotify getDefaultInstanceForType() {
                return IMGroupDestroyConferenceNotify.getDefaultInstance();
            }

            public IMGroupDestroyConferenceNotify build() {
                IMGroupDestroyConferenceNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupDestroyConferenceNotify buildPartial() {
                int i = 1;
                IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify = new IMGroupDestroyConferenceNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupDestroyConferenceNotify.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupDestroyConferenceNotify.reqUid_ = this.reqUid_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupDestroyConferenceNotify.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupDestroyConferenceNotify.conferenceId_ = this.conferenceId_;
                if ((this.bitField0_ & 16) == 16) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupDestroyConferenceNotify.memberIdList_ = this.memberIdList_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMGroupDestroyConferenceNotify.strMemberUids_ = this.strMemberUids_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupDestroyConferenceNotify.userHandle_ = this.userHandle_;
                if ((i2 & 128) == 128) {
                    i |= 64;
                }
                iMGroupDestroyConferenceNotify.attachData_ = this.attachData_;
                iMGroupDestroyConferenceNotify.bitField0_ = i;
                return iMGroupDestroyConferenceNotify;
            }

            public Builder mergeFrom(IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify) {
                if (iMGroupDestroyConferenceNotify != IMGroupDestroyConferenceNotify.getDefaultInstance()) {
                    if (iMGroupDestroyConferenceNotify.hasUserId()) {
                        setUserId(iMGroupDestroyConferenceNotify.getUserId());
                    }
                    if (iMGroupDestroyConferenceNotify.hasReqUid()) {
                        setReqUid(iMGroupDestroyConferenceNotify.getReqUid());
                    }
                    if (iMGroupDestroyConferenceNotify.hasGroupId()) {
                        setGroupId(iMGroupDestroyConferenceNotify.getGroupId());
                    }
                    if (iMGroupDestroyConferenceNotify.hasConferenceId()) {
                        this.bitField0_ |= 8;
                        this.conferenceId_ = iMGroupDestroyConferenceNotify.conferenceId_;
                    }
                    if (!iMGroupDestroyConferenceNotify.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupDestroyConferenceNotify.memberIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupDestroyConferenceNotify.memberIdList_);
                        }
                    }
                    if (iMGroupDestroyConferenceNotify.hasStrMemberUids()) {
                        this.bitField0_ |= 32;
                        this.strMemberUids_ = iMGroupDestroyConferenceNotify.strMemberUids_;
                    }
                    if (iMGroupDestroyConferenceNotify.hasUserHandle()) {
                        setUserHandle(iMGroupDestroyConferenceNotify.getUserHandle());
                    }
                    if (iMGroupDestroyConferenceNotify.hasAttachData()) {
                        setAttachData(iMGroupDestroyConferenceNotify.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupDestroyConferenceNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasReqUid() && hasGroupId() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify;
                IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify2;
                try {
                    IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify3 = (IMGroupDestroyConferenceNotify) IMGroupDestroyConferenceNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupDestroyConferenceNotify3 != null) {
                        mergeFrom(iMGroupDestroyConferenceNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupDestroyConferenceNotify2 = (IMGroupDestroyConferenceNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupDestroyConferenceNotify = iMGroupDestroyConferenceNotify2;
                    th = th2;
                }
                if (iMGroupDestroyConferenceNotify != null) {
                    mergeFrom(iMGroupDestroyConferenceNotify);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasReqUid() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getReqUid() {
                return this.reqUid_;
            }

            public Builder setReqUid(int i) {
                this.bitField0_ |= 2;
                this.reqUid_ = i;
                return this;
            }

            public Builder clearReqUid() {
                this.bitField0_ &= -3;
                this.reqUid_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -9;
                this.conferenceId_ = IMGroupDestroyConferenceNotify.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = byteString;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasStrMemberUids() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getStrMemberUids() {
                Object obj = this.strMemberUids_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.strMemberUids_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getStrMemberUidsBytes() {
                Object obj = this.strMemberUids_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.strMemberUids_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setStrMemberUids(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.strMemberUids_ = str;
                return this;
            }

            public Builder clearStrMemberUids() {
                this.bitField0_ &= -33;
                this.strMemberUids_ = IMGroupDestroyConferenceNotify.getDefaultInstance().getStrMemberUids();
                return this;
            }

            public Builder setStrMemberUidsBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.strMemberUids_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 64;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 128) == 128;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 128;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -129;
                this.attachData_ = IMGroupDestroyConferenceNotify.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupDestroyConferenceNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupDestroyConferenceNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupDestroyConferenceNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupDestroyConferenceNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupDestroyConferenceNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.reqUid_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.conferenceId_ = readBytes;
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 50:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.strMemberUids_ = readBytes2;
                            break;
                        case 72:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupDestroyConferenceNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasReqUid() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getReqUid() {
            return this.reqUid_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasStrMemberUids() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getStrMemberUids() {
            Object obj = this.strMemberUids_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.strMemberUids_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getStrMemberUidsBytes() {
            Object obj = this.strMemberUids_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.strMemberUids_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.reqUid_ = 0;
            this.groupId_ = 0;
            this.conferenceId_ = "";
            this.memberIdList_ = Collections.emptyList();
            this.strMemberUids_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqUid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.reqUid_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getConferenceIdBytes());
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(5, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(6, getStrMemberUidsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(9, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.reqUid_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeBytesSize(4, getConferenceIdBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeBytesSize(6, getStrMemberUidsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeUInt32Size(9, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupDestroyConferenceNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(byteString);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(bArr);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(inputStream);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupDestroyConferenceNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupDestroyConferenceNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupDestroyConferenceNotify iMGroupDestroyConferenceNotify) {
            return newBuilder().mergeFrom(iMGroupDestroyConferenceNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupDestroyConferenceNotifyOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getReqUid();

        String getStrMemberUids();

        ByteString getStrMemberUidsBytes();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasReqUid();

        boolean hasStrMemberUids();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupDestroyConferenceReq extends GeneratedMessageLite implements IMGroupDestroyConferenceReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 3;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupDestroyConferenceReq> PARSER = new AbstractParser<IMGroupDestroyConferenceReq>() {
            public IMGroupDestroyConferenceReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupDestroyConferenceReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupDestroyConferenceReq defaultInstance = new IMGroupDestroyConferenceReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupDestroyConferenceReq, Builder> implements IMGroupDestroyConferenceReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.conferenceId_ = "";
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupDestroyConferenceReq getDefaultInstanceForType() {
                return IMGroupDestroyConferenceReq.getDefaultInstance();
            }

            public IMGroupDestroyConferenceReq build() {
                IMGroupDestroyConferenceReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupDestroyConferenceReq buildPartial() {
                int i = 1;
                IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq = new IMGroupDestroyConferenceReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupDestroyConferenceReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupDestroyConferenceReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupDestroyConferenceReq.conferenceId_ = this.conferenceId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupDestroyConferenceReq.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupDestroyConferenceReq.attachData_ = this.attachData_;
                iMGroupDestroyConferenceReq.bitField0_ = i;
                return iMGroupDestroyConferenceReq;
            }

            public Builder mergeFrom(IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq) {
                if (iMGroupDestroyConferenceReq != IMGroupDestroyConferenceReq.getDefaultInstance()) {
                    if (iMGroupDestroyConferenceReq.hasUserId()) {
                        setUserId(iMGroupDestroyConferenceReq.getUserId());
                    }
                    if (iMGroupDestroyConferenceReq.hasGroupId()) {
                        setGroupId(iMGroupDestroyConferenceReq.getGroupId());
                    }
                    if (iMGroupDestroyConferenceReq.hasConferenceId()) {
                        this.bitField0_ |= 4;
                        this.conferenceId_ = iMGroupDestroyConferenceReq.conferenceId_;
                    }
                    if (iMGroupDestroyConferenceReq.hasUserHandle()) {
                        setUserHandle(iMGroupDestroyConferenceReq.getUserHandle());
                    }
                    if (iMGroupDestroyConferenceReq.hasAttachData()) {
                        setAttachData(iMGroupDestroyConferenceReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupDestroyConferenceReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq;
                IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq2;
                try {
                    IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq3 = (IMGroupDestroyConferenceReq) IMGroupDestroyConferenceReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupDestroyConferenceReq3 != null) {
                        mergeFrom(iMGroupDestroyConferenceReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupDestroyConferenceReq2 = (IMGroupDestroyConferenceReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupDestroyConferenceReq = iMGroupDestroyConferenceReq2;
                    th = th2;
                }
                if (iMGroupDestroyConferenceReq != null) {
                    mergeFrom(iMGroupDestroyConferenceReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -5;
                this.conferenceId_ = IMGroupDestroyConferenceReq.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMGroupDestroyConferenceReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupDestroyConferenceReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupDestroyConferenceReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupDestroyConferenceReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupDestroyConferenceReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupDestroyConferenceReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.conferenceId_ = readBytes;
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 16;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupDestroyConferenceReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 16) == 16;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupDestroyConferenceReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupDestroyConferenceReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupDestroyConferenceReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupDestroyConferenceReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupDestroyConferenceReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupDestroyConferenceReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupDestroyConferenceReq iMGroupDestroyConferenceReq) {
            return newBuilder().mergeFrom(iMGroupDestroyConferenceReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupDestroyConferenceReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupDestroyConferenceRsp extends GeneratedMessageLite implements IMGroupDestroyConferenceRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupDestroyConferenceRsp> PARSER = new AbstractParser<IMGroupDestroyConferenceRsp>() {
            public IMGroupDestroyConferenceRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupDestroyConferenceRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 3;
        public static final int USER_HANDLE_FIELD_NUMBER = 5;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupDestroyConferenceRsp defaultInstance = new IMGroupDestroyConferenceRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupDestroyConferenceRsp, Builder> implements IMGroupDestroyConferenceRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.conferenceId_ = "";
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                this.bitField0_ &= -17;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupDestroyConferenceRsp getDefaultInstanceForType() {
                return IMGroupDestroyConferenceRsp.getDefaultInstance();
            }

            public IMGroupDestroyConferenceRsp build() {
                IMGroupDestroyConferenceRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupDestroyConferenceRsp buildPartial() {
                int i = 1;
                IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp = new IMGroupDestroyConferenceRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupDestroyConferenceRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupDestroyConferenceRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupDestroyConferenceRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupDestroyConferenceRsp.conferenceId_ = this.conferenceId_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupDestroyConferenceRsp.userHandle_ = this.userHandle_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupDestroyConferenceRsp.attachData_ = this.attachData_;
                iMGroupDestroyConferenceRsp.bitField0_ = i;
                return iMGroupDestroyConferenceRsp;
            }

            public Builder mergeFrom(IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp) {
                if (iMGroupDestroyConferenceRsp != IMGroupDestroyConferenceRsp.getDefaultInstance()) {
                    if (iMGroupDestroyConferenceRsp.hasUserId()) {
                        setUserId(iMGroupDestroyConferenceRsp.getUserId());
                    }
                    if (iMGroupDestroyConferenceRsp.hasGroupId()) {
                        setGroupId(iMGroupDestroyConferenceRsp.getGroupId());
                    }
                    if (iMGroupDestroyConferenceRsp.hasResultCode()) {
                        setResultCode(iMGroupDestroyConferenceRsp.getResultCode());
                    }
                    if (iMGroupDestroyConferenceRsp.hasConferenceId()) {
                        this.bitField0_ |= 8;
                        this.conferenceId_ = iMGroupDestroyConferenceRsp.conferenceId_;
                    }
                    if (iMGroupDestroyConferenceRsp.hasUserHandle()) {
                        setUserHandle(iMGroupDestroyConferenceRsp.getUserHandle());
                    }
                    if (iMGroupDestroyConferenceRsp.hasAttachData()) {
                        setAttachData(iMGroupDestroyConferenceRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupDestroyConferenceRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasResultCode() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp;
                IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp2;
                try {
                    IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp3 = (IMGroupDestroyConferenceRsp) IMGroupDestroyConferenceRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupDestroyConferenceRsp3 != null) {
                        mergeFrom(iMGroupDestroyConferenceRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupDestroyConferenceRsp2 = (IMGroupDestroyConferenceRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupDestroyConferenceRsp = iMGroupDestroyConferenceRsp2;
                    th = th2;
                }
                if (iMGroupDestroyConferenceRsp != null) {
                    mergeFrom(iMGroupDestroyConferenceRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -9;
                this.conferenceId_ = IMGroupDestroyConferenceRsp.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 16;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 32) == 32;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -33;
                this.attachData_ = IMGroupDestroyConferenceRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupDestroyConferenceRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupDestroyConferenceRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupDestroyConferenceRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupDestroyConferenceRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupDestroyConferenceRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.conferenceId_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupDestroyConferenceRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.resultCode_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupDestroyConferenceRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupDestroyConferenceRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupDestroyConferenceRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyConferenceRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupDestroyConferenceRsp iMGroupDestroyConferenceRsp) {
            return newBuilder().mergeFrom(iMGroupDestroyConferenceRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupDestroyConferenceRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupDestroyGroupReq extends GeneratedMessageLite implements IMGroupDestroyGroupReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupDestroyGroupReq> PARSER = new AbstractParser<IMGroupDestroyGroupReq>() {
            public IMGroupDestroyGroupReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupDestroyGroupReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupDestroyGroupReq defaultInstance = new IMGroupDestroyGroupReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupDestroyGroupReq, Builder> implements IMGroupDestroyGroupReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupDestroyGroupReq getDefaultInstanceForType() {
                return IMGroupDestroyGroupReq.getDefaultInstance();
            }

            public IMGroupDestroyGroupReq build() {
                IMGroupDestroyGroupReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupDestroyGroupReq buildPartial() {
                int i = 1;
                IMGroupDestroyGroupReq iMGroupDestroyGroupReq = new IMGroupDestroyGroupReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupDestroyGroupReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupDestroyGroupReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupDestroyGroupReq.userHandle_ = this.userHandle_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupDestroyGroupReq.attachData_ = this.attachData_;
                iMGroupDestroyGroupReq.bitField0_ = i;
                return iMGroupDestroyGroupReq;
            }

            public Builder mergeFrom(IMGroupDestroyGroupReq iMGroupDestroyGroupReq) {
                if (iMGroupDestroyGroupReq != IMGroupDestroyGroupReq.getDefaultInstance()) {
                    if (iMGroupDestroyGroupReq.hasUserId()) {
                        setUserId(iMGroupDestroyGroupReq.getUserId());
                    }
                    if (iMGroupDestroyGroupReq.hasGroupId()) {
                        setGroupId(iMGroupDestroyGroupReq.getGroupId());
                    }
                    if (iMGroupDestroyGroupReq.hasUserHandle()) {
                        setUserHandle(iMGroupDestroyGroupReq.getUserHandle());
                    }
                    if (iMGroupDestroyGroupReq.hasAttachData()) {
                        setAttachData(iMGroupDestroyGroupReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupDestroyGroupReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupDestroyGroupReq iMGroupDestroyGroupReq;
                IMGroupDestroyGroupReq iMGroupDestroyGroupReq2;
                try {
                    IMGroupDestroyGroupReq iMGroupDestroyGroupReq3 = (IMGroupDestroyGroupReq) IMGroupDestroyGroupReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupDestroyGroupReq3 != null) {
                        mergeFrom(iMGroupDestroyGroupReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupDestroyGroupReq2 = (IMGroupDestroyGroupReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupDestroyGroupReq = iMGroupDestroyGroupReq2;
                    th = th2;
                }
                if (iMGroupDestroyGroupReq != null) {
                    mergeFrom(iMGroupDestroyGroupReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 4;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupDestroyGroupReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupDestroyGroupReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupDestroyGroupReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupDestroyGroupReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupDestroyGroupReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupDestroyGroupReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 4;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 8;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupDestroyGroupReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 8) == 8;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupDestroyGroupReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupDestroyGroupReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupDestroyGroupReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupDestroyGroupReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupDestroyGroupReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupDestroyGroupReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupDestroyGroupReq iMGroupDestroyGroupReq) {
            return newBuilder().mergeFrom(iMGroupDestroyGroupReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupDestroyGroupReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupDestroyGroupRsp extends GeneratedMessageLite implements IMGroupDestroyGroupRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupDestroyGroupRsp> PARSER = new AbstractParser<IMGroupDestroyGroupRsp>() {
            public IMGroupDestroyGroupRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupDestroyGroupRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 4;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupDestroyGroupRsp defaultInstance = new IMGroupDestroyGroupRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupDestroyGroupRsp, Builder> implements IMGroupDestroyGroupRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupDestroyGroupRsp getDefaultInstanceForType() {
                return IMGroupDestroyGroupRsp.getDefaultInstance();
            }

            public IMGroupDestroyGroupRsp build() {
                IMGroupDestroyGroupRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupDestroyGroupRsp buildPartial() {
                int i = 1;
                IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp = new IMGroupDestroyGroupRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupDestroyGroupRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupDestroyGroupRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupDestroyGroupRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupDestroyGroupRsp.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupDestroyGroupRsp.attachData_ = this.attachData_;
                iMGroupDestroyGroupRsp.bitField0_ = i;
                return iMGroupDestroyGroupRsp;
            }

            public Builder mergeFrom(IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp) {
                if (iMGroupDestroyGroupRsp != IMGroupDestroyGroupRsp.getDefaultInstance()) {
                    if (iMGroupDestroyGroupRsp.hasUserId()) {
                        setUserId(iMGroupDestroyGroupRsp.getUserId());
                    }
                    if (iMGroupDestroyGroupRsp.hasGroupId()) {
                        setGroupId(iMGroupDestroyGroupRsp.getGroupId());
                    }
                    if (iMGroupDestroyGroupRsp.hasResultCode()) {
                        setResultCode(iMGroupDestroyGroupRsp.getResultCode());
                    }
                    if (iMGroupDestroyGroupRsp.hasUserHandle()) {
                        setUserHandle(iMGroupDestroyGroupRsp.getUserHandle());
                    }
                    if (iMGroupDestroyGroupRsp.hasAttachData()) {
                        setAttachData(iMGroupDestroyGroupRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupDestroyGroupRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasResultCode()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp;
                IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp2;
                try {
                    IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp3 = (IMGroupDestroyGroupRsp) IMGroupDestroyGroupRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupDestroyGroupRsp3 != null) {
                        mergeFrom(iMGroupDestroyGroupRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupDestroyGroupRsp2 = (IMGroupDestroyGroupRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupDestroyGroupRsp = iMGroupDestroyGroupRsp2;
                    th = th2;
                }
                if (iMGroupDestroyGroupRsp != null) {
                    mergeFrom(iMGroupDestroyGroupRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMGroupDestroyGroupRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupDestroyGroupRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupDestroyGroupRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupDestroyGroupRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupDestroyGroupRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupDestroyGroupRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 16;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupDestroyGroupRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 16) == 16;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.resultCode_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(4, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupDestroyGroupRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupDestroyGroupRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupDestroyGroupRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupDestroyGroupRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupDestroyGroupRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupDestroyGroupRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupDestroyGroupRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupDestroyGroupRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupDestroyGroupRsp iMGroupDestroyGroupRsp) {
            return newBuilder().mergeFrom(iMGroupDestroyGroupRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupDestroyGroupRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupInfoChangeNotify extends GeneratedMessageLite implements IMGroupInfoChangeNotifyOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CREATOR_FIELD_NUMBER = 3;
        public static final int GROUP_ID_FIELD_NUMBER = 1;
        public static final int NEW_CREATOR_FIELD_NUMBER = 4;
        public static final int NEW_GROUP_NAME_FIELD_NUMBER = 5;
        public static Parser<IMGroupInfoChangeNotify> PARSER = new AbstractParser<IMGroupInfoChangeNotify>() {
            public IMGroupInfoChangeNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupInfoChangeNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REASON_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        private static final IMGroupInfoChangeNotify defaultInstance = new IMGroupInfoChangeNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int creator_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int newCreator_;
        /* access modifiers changed from: private */
        public Object newGroupName_;
        /* access modifiers changed from: private */
        public int reason_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupInfoChangeNotify, Builder> implements IMGroupInfoChangeNotifyOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int creator_;
            private int groupId_;
            private int newCreator_;
            private Object newGroupName_ = "";
            private int reason_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.groupId_ = 0;
                this.bitField0_ &= -2;
                this.reason_ = 0;
                this.bitField0_ &= -3;
                this.creator_ = 0;
                this.bitField0_ &= -5;
                this.newCreator_ = 0;
                this.bitField0_ &= -9;
                this.newGroupName_ = "";
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupInfoChangeNotify getDefaultInstanceForType() {
                return IMGroupInfoChangeNotify.getDefaultInstance();
            }

            public IMGroupInfoChangeNotify build() {
                IMGroupInfoChangeNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupInfoChangeNotify buildPartial() {
                int i = 1;
                IMGroupInfoChangeNotify iMGroupInfoChangeNotify = new IMGroupInfoChangeNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupInfoChangeNotify.groupId_ = this.groupId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupInfoChangeNotify.reason_ = this.reason_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupInfoChangeNotify.creator_ = this.creator_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupInfoChangeNotify.newCreator_ = this.newCreator_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupInfoChangeNotify.newGroupName_ = this.newGroupName_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupInfoChangeNotify.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMGroupInfoChangeNotify.attachData_ = this.attachData_;
                iMGroupInfoChangeNotify.bitField0_ = i;
                return iMGroupInfoChangeNotify;
            }

            public Builder mergeFrom(IMGroupInfoChangeNotify iMGroupInfoChangeNotify) {
                if (iMGroupInfoChangeNotify != IMGroupInfoChangeNotify.getDefaultInstance()) {
                    if (iMGroupInfoChangeNotify.hasGroupId()) {
                        setGroupId(iMGroupInfoChangeNotify.getGroupId());
                    }
                    if (iMGroupInfoChangeNotify.hasReason()) {
                        setReason(iMGroupInfoChangeNotify.getReason());
                    }
                    if (iMGroupInfoChangeNotify.hasCreator()) {
                        setCreator(iMGroupInfoChangeNotify.getCreator());
                    }
                    if (iMGroupInfoChangeNotify.hasNewCreator()) {
                        setNewCreator(iMGroupInfoChangeNotify.getNewCreator());
                    }
                    if (iMGroupInfoChangeNotify.hasNewGroupName()) {
                        this.bitField0_ |= 16;
                        this.newGroupName_ = iMGroupInfoChangeNotify.newGroupName_;
                    }
                    if (iMGroupInfoChangeNotify.hasUserHandle()) {
                        setUserHandle(iMGroupInfoChangeNotify.getUserHandle());
                    }
                    if (iMGroupInfoChangeNotify.hasAttachData()) {
                        setAttachData(iMGroupInfoChangeNotify.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupInfoChangeNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasGroupId() && hasReason()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupInfoChangeNotify iMGroupInfoChangeNotify;
                IMGroupInfoChangeNotify iMGroupInfoChangeNotify2;
                try {
                    IMGroupInfoChangeNotify iMGroupInfoChangeNotify3 = (IMGroupInfoChangeNotify) IMGroupInfoChangeNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupInfoChangeNotify3 != null) {
                        mergeFrom(iMGroupInfoChangeNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupInfoChangeNotify2 = (IMGroupInfoChangeNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupInfoChangeNotify = iMGroupInfoChangeNotify2;
                    th = th2;
                }
                if (iMGroupInfoChangeNotify != null) {
                    mergeFrom(iMGroupInfoChangeNotify);
                }
                throw th;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 1;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasReason() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getReason() {
                return this.reason_;
            }

            public Builder setReason(int i) {
                this.bitField0_ |= 2;
                this.reason_ = i;
                return this;
            }

            public Builder clearReason() {
                this.bitField0_ &= -3;
                this.reason_ = 0;
                return this;
            }

            public boolean hasCreator() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getCreator() {
                return this.creator_;
            }

            public Builder setCreator(int i) {
                this.bitField0_ |= 4;
                this.creator_ = i;
                return this;
            }

            public Builder clearCreator() {
                this.bitField0_ &= -5;
                this.creator_ = 0;
                return this;
            }

            public boolean hasNewCreator() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getNewCreator() {
                return this.newCreator_;
            }

            public Builder setNewCreator(int i) {
                this.bitField0_ |= 8;
                this.newCreator_ = i;
                return this;
            }

            public Builder clearNewCreator() {
                this.bitField0_ &= -9;
                this.newCreator_ = 0;
                return this;
            }

            public boolean hasNewGroupName() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getNewGroupName() {
                Object obj = this.newGroupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.newGroupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNewGroupNameBytes() {
                Object obj = this.newGroupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.newGroupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNewGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.newGroupName_ = str;
                return this;
            }

            public Builder clearNewGroupName() {
                this.bitField0_ &= -17;
                this.newGroupName_ = IMGroupInfoChangeNotify.getDefaultInstance().getNewGroupName();
                return this;
            }

            public Builder setNewGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.newGroupName_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupInfoChangeNotify.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupInfoChangeNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupInfoChangeNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupInfoChangeNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupInfoChangeNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupInfoChangeNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.reason_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.creator_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.newCreator_ = codedInputStream.readUInt32();
                            break;
                        case 42:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.newGroupName_ = readBytes;
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupInfoChangeNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasReason() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getReason() {
            return this.reason_;
        }

        public boolean hasCreator() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getCreator() {
            return this.creator_;
        }

        public boolean hasNewCreator() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getNewCreator() {
            return this.newCreator_;
        }

        public boolean hasNewGroupName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getNewGroupName() {
            Object obj = this.newGroupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.newGroupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNewGroupNameBytes() {
            Object obj = this.newGroupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.newGroupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.groupId_ = 0;
            this.reason_ = 0;
            this.creator_ = 0;
            this.newCreator_ = 0;
            this.newGroupName_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReason()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.groupId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.reason_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.creator_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.newCreator_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getNewGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.groupId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.reason_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.creator_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.newCreator_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getNewGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupInfoChangeNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(byteString);
        }

        public static IMGroupInfoChangeNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupInfoChangeNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(bArr);
        }

        public static IMGroupInfoChangeNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupInfoChangeNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(inputStream);
        }

        public static IMGroupInfoChangeNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoChangeNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupInfoChangeNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoChangeNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupInfoChangeNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoChangeNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupInfoChangeNotify iMGroupInfoChangeNotify) {
            return newBuilder().mergeFrom(iMGroupInfoChangeNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupInfoChangeNotifyOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCreator();

        int getGroupId();

        int getNewCreator();

        String getNewGroupName();

        ByteString getNewGroupNameBytes();

        int getReason();

        int getUserHandle();

        boolean hasAttachData();

        boolean hasCreator();

        boolean hasGroupId();

        boolean hasNewCreator();

        boolean hasNewGroupName();

        boolean hasReason();

        boolean hasUserHandle();
    }

    public static final class IMGroupInfoListReq extends GeneratedMessageLite implements IMGroupInfoListReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_VERSION_LIST_FIELD_NUMBER = 2;
        public static Parser<IMGroupInfoListReq> PARSER = new AbstractParser<IMGroupInfoListReq>() {
            public IMGroupInfoListReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupInfoListReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupInfoListReq defaultInstance = new IMGroupInfoListReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<GroupVersionInfo> groupVersionList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupInfoListReq, Builder> implements IMGroupInfoListReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<GroupVersionInfo> groupVersionList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupVersionList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupInfoListReq getDefaultInstanceForType() {
                return IMGroupInfoListReq.getDefaultInstance();
            }

            public IMGroupInfoListReq build() {
                IMGroupInfoListReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupInfoListReq buildPartial() {
                int i = 1;
                IMGroupInfoListReq iMGroupInfoListReq = new IMGroupInfoListReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupInfoListReq.userId_ = this.userId_;
                if ((this.bitField0_ & 2) == 2) {
                    this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
                    this.bitField0_ &= -3;
                }
                iMGroupInfoListReq.groupVersionList_ = this.groupVersionList_;
                if ((i2 & 4) == 4) {
                    i |= 2;
                }
                iMGroupInfoListReq.userHandle_ = this.userHandle_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMGroupInfoListReq.attachData_ = this.attachData_;
                iMGroupInfoListReq.bitField0_ = i;
                return iMGroupInfoListReq;
            }

            public Builder mergeFrom(IMGroupInfoListReq iMGroupInfoListReq) {
                if (iMGroupInfoListReq != IMGroupInfoListReq.getDefaultInstance()) {
                    if (iMGroupInfoListReq.hasUserId()) {
                        setUserId(iMGroupInfoListReq.getUserId());
                    }
                    if (!iMGroupInfoListReq.groupVersionList_.isEmpty()) {
                        if (this.groupVersionList_.isEmpty()) {
                            this.groupVersionList_ = iMGroupInfoListReq.groupVersionList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureGroupVersionListIsMutable();
                            this.groupVersionList_.addAll(iMGroupInfoListReq.groupVersionList_);
                        }
                    }
                    if (iMGroupInfoListReq.hasUserHandle()) {
                        setUserHandle(iMGroupInfoListReq.getUserHandle());
                    }
                    if (iMGroupInfoListReq.hasAttachData()) {
                        setAttachData(iMGroupInfoListReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupInfoListReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                for (int i = 0; i < getGroupVersionListCount(); i++) {
                    if (!getGroupVersionList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupInfoListReq iMGroupInfoListReq;
                IMGroupInfoListReq iMGroupInfoListReq2;
                try {
                    IMGroupInfoListReq iMGroupInfoListReq3 = (IMGroupInfoListReq) IMGroupInfoListReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupInfoListReq3 != null) {
                        mergeFrom(iMGroupInfoListReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupInfoListReq2 = (IMGroupInfoListReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupInfoListReq = iMGroupInfoListReq2;
                    th = th2;
                }
                if (iMGroupInfoListReq != null) {
                    mergeFrom(iMGroupInfoListReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            private void ensureGroupVersionListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.groupVersionList_ = new ArrayList(this.groupVersionList_);
                    this.bitField0_ |= 2;
                }
            }

            public List<GroupVersionInfo> getGroupVersionListList() {
                return Collections.unmodifiableList(this.groupVersionList_);
            }

            public int getGroupVersionListCount() {
                return this.groupVersionList_.size();
            }

            public GroupVersionInfo getGroupVersionList(int i) {
                return (GroupVersionInfo) this.groupVersionList_.get(i);
            }

            public Builder setGroupVersionList(int i, GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.set(i, groupVersionInfo);
                return this;
            }

            public Builder setGroupVersionList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupVersionList(GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(groupVersionInfo);
                return this;
            }

            public Builder addGroupVersionList(int i, GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(i, groupVersionInfo);
                return this;
            }

            public Builder addGroupVersionList(com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(builder.build());
                return this;
            }

            public Builder addGroupVersionList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupVersionList(Iterable<? extends GroupVersionInfo> iterable) {
                ensureGroupVersionListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupVersionList_);
                return this;
            }

            public Builder clearGroupVersionList() {
                this.groupVersionList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            public Builder removeGroupVersionList(int i) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.remove(i);
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 4;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupInfoListReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupInfoListReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupInfoListReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupInfoListReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupInfoListReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupInfoListReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            if (!(z2 & true)) {
                                this.groupVersionList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupVersionList_.add(codedInputStream.readMessage(GroupVersionInfo.PARSER, extensionRegistryLite));
                            break;
                        case 24:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupInfoListReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public List<GroupVersionInfo> getGroupVersionListList() {
            return this.groupVersionList_;
        }

        public List<? extends GroupVersionInfoOrBuilder> getGroupVersionListOrBuilderList() {
            return this.groupVersionList_;
        }

        public int getGroupVersionListCount() {
            return this.groupVersionList_.size();
        }

        public GroupVersionInfo getGroupVersionList(int i) {
            return (GroupVersionInfo) this.groupVersionList_.get(i);
        }

        public GroupVersionInfoOrBuilder getGroupVersionListOrBuilder(int i) {
            return (GroupVersionInfoOrBuilder) this.groupVersionList_.get(i);
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupVersionList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getGroupVersionListCount(); i++) {
                if (!getGroupVersionList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupVersionList_.size()) {
                    break;
                }
                codedOutputStream.writeMessage(2, (MessageLite) this.groupVersionList_.get(i2));
                i = i2 + 1;
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            while (true) {
                i2 = i;
                if (i3 >= this.groupVersionList_.size()) {
                    break;
                }
                i = CodedOutputStream.computeMessageSize(2, (MessageLite) this.groupVersionList_.get(i3)) + i2;
                i3++;
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = this.unknownFields.size() + i2;
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupInfoListReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupInfoListReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupInfoListReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoListReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupInfoListReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupInfoListReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupInfoListReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoListReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupInfoListReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupInfoListReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoListReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupInfoListReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoListReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupInfoListReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupInfoListReq iMGroupInfoListReq) {
            return newBuilder().mergeFrom(iMGroupInfoListReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupInfoListReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupVersionInfo getGroupVersionList(int i);

        int getGroupVersionListCount();

        List<GroupVersionInfo> getGroupVersionListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupInfoListRsp extends GeneratedMessageLite implements IMGroupInfoListRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_INFO_LIST_FIELD_NUMBER = 2;
        public static Parser<IMGroupInfoListRsp> PARSER = new AbstractParser<IMGroupInfoListRsp>() {
            public IMGroupInfoListRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupInfoListRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupInfoListRsp defaultInstance = new IMGroupInfoListRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<GroupInfo> groupInfoList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupInfoListRsp, Builder> implements IMGroupInfoListRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<GroupInfo> groupInfoList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupInfoList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupInfoListRsp getDefaultInstanceForType() {
                return IMGroupInfoListRsp.getDefaultInstance();
            }

            public IMGroupInfoListRsp build() {
                IMGroupInfoListRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupInfoListRsp buildPartial() {
                int i = 1;
                IMGroupInfoListRsp iMGroupInfoListRsp = new IMGroupInfoListRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupInfoListRsp.userId_ = this.userId_;
                if ((this.bitField0_ & 2) == 2) {
                    this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
                    this.bitField0_ &= -3;
                }
                iMGroupInfoListRsp.groupInfoList_ = this.groupInfoList_;
                if ((i2 & 4) == 4) {
                    i |= 2;
                }
                iMGroupInfoListRsp.userHandle_ = this.userHandle_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMGroupInfoListRsp.attachData_ = this.attachData_;
                iMGroupInfoListRsp.bitField0_ = i;
                return iMGroupInfoListRsp;
            }

            public Builder mergeFrom(IMGroupInfoListRsp iMGroupInfoListRsp) {
                if (iMGroupInfoListRsp != IMGroupInfoListRsp.getDefaultInstance()) {
                    if (iMGroupInfoListRsp.hasUserId()) {
                        setUserId(iMGroupInfoListRsp.getUserId());
                    }
                    if (!iMGroupInfoListRsp.groupInfoList_.isEmpty()) {
                        if (this.groupInfoList_.isEmpty()) {
                            this.groupInfoList_ = iMGroupInfoListRsp.groupInfoList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureGroupInfoListIsMutable();
                            this.groupInfoList_.addAll(iMGroupInfoListRsp.groupInfoList_);
                        }
                    }
                    if (iMGroupInfoListRsp.hasUserHandle()) {
                        setUserHandle(iMGroupInfoListRsp.getUserHandle());
                    }
                    if (iMGroupInfoListRsp.hasAttachData()) {
                        setAttachData(iMGroupInfoListRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupInfoListRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                for (int i = 0; i < getGroupInfoListCount(); i++) {
                    if (!getGroupInfoList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupInfoListRsp iMGroupInfoListRsp;
                IMGroupInfoListRsp iMGroupInfoListRsp2;
                try {
                    IMGroupInfoListRsp iMGroupInfoListRsp3 = (IMGroupInfoListRsp) IMGroupInfoListRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupInfoListRsp3 != null) {
                        mergeFrom(iMGroupInfoListRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupInfoListRsp2 = (IMGroupInfoListRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupInfoListRsp = iMGroupInfoListRsp2;
                    th = th2;
                }
                if (iMGroupInfoListRsp != null) {
                    mergeFrom(iMGroupInfoListRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            private void ensureGroupInfoListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.groupInfoList_ = new ArrayList(this.groupInfoList_);
                    this.bitField0_ |= 2;
                }
            }

            public List<GroupInfo> getGroupInfoListList() {
                return Collections.unmodifiableList(this.groupInfoList_);
            }

            public int getGroupInfoListCount() {
                return this.groupInfoList_.size();
            }

            public GroupInfo getGroupInfoList(int i) {
                return (GroupInfo) this.groupInfoList_.get(i);
            }

            public Builder setGroupInfoList(int i, GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.set(i, groupInfo);
                return this;
            }

            public Builder setGroupInfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupInfoList(GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(groupInfo);
                return this;
            }

            public Builder addGroupInfoList(int i, GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(i, groupInfo);
                return this;
            }

            public Builder addGroupInfoList(com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(builder.build());
                return this;
            }

            public Builder addGroupInfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupInfoList(Iterable<? extends GroupInfo> iterable) {
                ensureGroupInfoListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupInfoList_);
                return this;
            }

            public Builder clearGroupInfoList() {
                this.groupInfoList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            public Builder removeGroupInfoList(int i) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.remove(i);
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 4;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupInfoListRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupInfoListRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupInfoListRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupInfoListRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupInfoListRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupInfoListRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            if (!(z2 & true)) {
                                this.groupInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupInfoList_.add(codedInputStream.readMessage(GroupInfo.PARSER, extensionRegistryLite));
                            break;
                        case 24:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupInfoListRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public List<GroupInfo> getGroupInfoListList() {
            return this.groupInfoList_;
        }

        public List<? extends GroupInfoOrBuilder> getGroupInfoListOrBuilderList() {
            return this.groupInfoList_;
        }

        public int getGroupInfoListCount() {
            return this.groupInfoList_.size();
        }

        public GroupInfo getGroupInfoList(int i) {
            return (GroupInfo) this.groupInfoList_.get(i);
        }

        public GroupInfoOrBuilder getGroupInfoListOrBuilder(int i) {
            return (GroupInfoOrBuilder) this.groupInfoList_.get(i);
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupInfoList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getGroupInfoListCount(); i++) {
                if (!getGroupInfoList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupInfoList_.size()) {
                    break;
                }
                codedOutputStream.writeMessage(2, (MessageLite) this.groupInfoList_.get(i2));
                i = i2 + 1;
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            while (true) {
                i2 = i;
                if (i3 >= this.groupInfoList_.size()) {
                    break;
                }
                i = CodedOutputStream.computeMessageSize(2, (MessageLite) this.groupInfoList_.get(i3)) + i2;
                i3++;
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = this.unknownFields.size() + i2;
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupInfoListRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupInfoListRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupInfoListRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupInfoListRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupInfoListRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupInfoListRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoListRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupInfoListRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupInfoListRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupInfoListRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupInfoListRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupInfoListRsp iMGroupInfoListRsp) {
            return newBuilder().mergeFrom(iMGroupInfoListRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupInfoListRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupInfo getGroupInfoList(int i);

        int getGroupInfoListCount();

        List<GroupInfo> getGroupInfoListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupJoinConferenceReq extends GeneratedMessageLite implements IMGroupJoinConferenceReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 3;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupJoinConferenceReq> PARSER = new AbstractParser<IMGroupJoinConferenceReq>() {
            public IMGroupJoinConferenceReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupJoinConferenceReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupJoinConferenceReq defaultInstance = new IMGroupJoinConferenceReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupJoinConferenceReq, Builder> implements IMGroupJoinConferenceReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.conferenceId_ = "";
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupJoinConferenceReq getDefaultInstanceForType() {
                return IMGroupJoinConferenceReq.getDefaultInstance();
            }

            public IMGroupJoinConferenceReq build() {
                IMGroupJoinConferenceReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupJoinConferenceReq buildPartial() {
                int i = 1;
                IMGroupJoinConferenceReq iMGroupJoinConferenceReq = new IMGroupJoinConferenceReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupJoinConferenceReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupJoinConferenceReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupJoinConferenceReq.conferenceId_ = this.conferenceId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupJoinConferenceReq.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupJoinConferenceReq.attachData_ = this.attachData_;
                iMGroupJoinConferenceReq.bitField0_ = i;
                return iMGroupJoinConferenceReq;
            }

            public Builder mergeFrom(IMGroupJoinConferenceReq iMGroupJoinConferenceReq) {
                if (iMGroupJoinConferenceReq != IMGroupJoinConferenceReq.getDefaultInstance()) {
                    if (iMGroupJoinConferenceReq.hasUserId()) {
                        setUserId(iMGroupJoinConferenceReq.getUserId());
                    }
                    if (iMGroupJoinConferenceReq.hasGroupId()) {
                        setGroupId(iMGroupJoinConferenceReq.getGroupId());
                    }
                    if (iMGroupJoinConferenceReq.hasConferenceId()) {
                        this.bitField0_ |= 4;
                        this.conferenceId_ = iMGroupJoinConferenceReq.conferenceId_;
                    }
                    if (iMGroupJoinConferenceReq.hasUserHandle()) {
                        setUserHandle(iMGroupJoinConferenceReq.getUserHandle());
                    }
                    if (iMGroupJoinConferenceReq.hasAttachData()) {
                        setAttachData(iMGroupJoinConferenceReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupJoinConferenceReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupJoinConferenceReq iMGroupJoinConferenceReq;
                IMGroupJoinConferenceReq iMGroupJoinConferenceReq2;
                try {
                    IMGroupJoinConferenceReq iMGroupJoinConferenceReq3 = (IMGroupJoinConferenceReq) IMGroupJoinConferenceReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupJoinConferenceReq3 != null) {
                        mergeFrom(iMGroupJoinConferenceReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupJoinConferenceReq2 = (IMGroupJoinConferenceReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupJoinConferenceReq = iMGroupJoinConferenceReq2;
                    th = th2;
                }
                if (iMGroupJoinConferenceReq != null) {
                    mergeFrom(iMGroupJoinConferenceReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -5;
                this.conferenceId_ = IMGroupJoinConferenceReq.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMGroupJoinConferenceReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupJoinConferenceReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupJoinConferenceReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupJoinConferenceReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupJoinConferenceReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupJoinConferenceReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.conferenceId_ = readBytes;
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 16;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupJoinConferenceReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 16) == 16;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupJoinConferenceReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupJoinConferenceReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupJoinConferenceReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupJoinConferenceReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupJoinConferenceReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupJoinConferenceReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupJoinConferenceReq iMGroupJoinConferenceReq) {
            return newBuilder().mergeFrom(iMGroupJoinConferenceReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupJoinConferenceReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupJoinConferenceRsp extends GeneratedMessageLite implements IMGroupJoinConferenceRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupJoinConferenceRsp> PARSER = new AbstractParser<IMGroupJoinConferenceRsp>() {
            public IMGroupJoinConferenceRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupJoinConferenceRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 3;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupJoinConferenceRsp defaultInstance = new IMGroupJoinConferenceRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupJoinConferenceRsp, Builder> implements IMGroupJoinConferenceRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.conferenceId_ = "";
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                this.bitField0_ &= -17;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupJoinConferenceRsp getDefaultInstanceForType() {
                return IMGroupJoinConferenceRsp.getDefaultInstance();
            }

            public IMGroupJoinConferenceRsp build() {
                IMGroupJoinConferenceRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupJoinConferenceRsp buildPartial() {
                int i = 1;
                IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp = new IMGroupJoinConferenceRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupJoinConferenceRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupJoinConferenceRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupJoinConferenceRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupJoinConferenceRsp.conferenceId_ = this.conferenceId_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupJoinConferenceRsp.userHandle_ = this.userHandle_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupJoinConferenceRsp.attachData_ = this.attachData_;
                iMGroupJoinConferenceRsp.bitField0_ = i;
                return iMGroupJoinConferenceRsp;
            }

            public Builder mergeFrom(IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp) {
                if (iMGroupJoinConferenceRsp != IMGroupJoinConferenceRsp.getDefaultInstance()) {
                    if (iMGroupJoinConferenceRsp.hasUserId()) {
                        setUserId(iMGroupJoinConferenceRsp.getUserId());
                    }
                    if (iMGroupJoinConferenceRsp.hasGroupId()) {
                        setGroupId(iMGroupJoinConferenceRsp.getGroupId());
                    }
                    if (iMGroupJoinConferenceRsp.hasResultCode()) {
                        setResultCode(iMGroupJoinConferenceRsp.getResultCode());
                    }
                    if (iMGroupJoinConferenceRsp.hasConferenceId()) {
                        this.bitField0_ |= 8;
                        this.conferenceId_ = iMGroupJoinConferenceRsp.conferenceId_;
                    }
                    if (iMGroupJoinConferenceRsp.hasUserHandle()) {
                        setUserHandle(iMGroupJoinConferenceRsp.getUserHandle());
                    }
                    if (iMGroupJoinConferenceRsp.hasAttachData()) {
                        setAttachData(iMGroupJoinConferenceRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupJoinConferenceRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasResultCode()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp;
                IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp2;
                try {
                    IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp3 = (IMGroupJoinConferenceRsp) IMGroupJoinConferenceRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupJoinConferenceRsp3 != null) {
                        mergeFrom(iMGroupJoinConferenceRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupJoinConferenceRsp2 = (IMGroupJoinConferenceRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupJoinConferenceRsp = iMGroupJoinConferenceRsp2;
                    th = th2;
                }
                if (iMGroupJoinConferenceRsp != null) {
                    mergeFrom(iMGroupJoinConferenceRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -9;
                this.conferenceId_ = IMGroupJoinConferenceRsp.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 16;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 32) == 32;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -33;
                this.attachData_ = IMGroupJoinConferenceRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupJoinConferenceRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupJoinConferenceRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupJoinConferenceRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupJoinConferenceRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupJoinConferenceRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.conferenceId_ = readBytes;
                            break;
                        case 48:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupJoinConferenceRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.resultCode_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupJoinConferenceRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupJoinConferenceRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupJoinConferenceRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupJoinConferenceRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupJoinConferenceRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJoinConferenceRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupJoinConferenceRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJoinConferenceRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupJoinConferenceRsp iMGroupJoinConferenceRsp) {
            return newBuilder().mergeFrom(iMGroupJoinConferenceRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupJoinConferenceRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupJudgeInGroupReq extends GeneratedMessageLite implements IMGroupJudgeInGroupReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CHECK_USER_ID_FIELD_NUMBER = 3;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupJudgeInGroupReq> PARSER = new AbstractParser<IMGroupJudgeInGroupReq>() {
            public IMGroupJudgeInGroupReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupJudgeInGroupReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupJudgeInGroupReq defaultInstance = new IMGroupJudgeInGroupReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int checkUserId_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupJudgeInGroupReq, Builder> implements IMGroupJudgeInGroupReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int checkUserId_;
            private int groupId_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.checkUserId_ = 0;
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupJudgeInGroupReq getDefaultInstanceForType() {
                return IMGroupJudgeInGroupReq.getDefaultInstance();
            }

            public IMGroupJudgeInGroupReq build() {
                IMGroupJudgeInGroupReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupJudgeInGroupReq buildPartial() {
                int i = 1;
                IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq = new IMGroupJudgeInGroupReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupJudgeInGroupReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupJudgeInGroupReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupJudgeInGroupReq.checkUserId_ = this.checkUserId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupJudgeInGroupReq.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupJudgeInGroupReq.attachData_ = this.attachData_;
                iMGroupJudgeInGroupReq.bitField0_ = i;
                return iMGroupJudgeInGroupReq;
            }

            public Builder mergeFrom(IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq) {
                if (iMGroupJudgeInGroupReq != IMGroupJudgeInGroupReq.getDefaultInstance()) {
                    if (iMGroupJudgeInGroupReq.hasUserId()) {
                        setUserId(iMGroupJudgeInGroupReq.getUserId());
                    }
                    if (iMGroupJudgeInGroupReq.hasGroupId()) {
                        setGroupId(iMGroupJudgeInGroupReq.getGroupId());
                    }
                    if (iMGroupJudgeInGroupReq.hasCheckUserId()) {
                        setCheckUserId(iMGroupJudgeInGroupReq.getCheckUserId());
                    }
                    if (iMGroupJudgeInGroupReq.hasUserHandle()) {
                        setUserHandle(iMGroupJudgeInGroupReq.getUserHandle());
                    }
                    if (iMGroupJudgeInGroupReq.hasAttachData()) {
                        setAttachData(iMGroupJudgeInGroupReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupJudgeInGroupReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasCheckUserId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq;
                IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq2;
                try {
                    IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq3 = (IMGroupJudgeInGroupReq) IMGroupJudgeInGroupReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupJudgeInGroupReq3 != null) {
                        mergeFrom(iMGroupJudgeInGroupReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupJudgeInGroupReq2 = (IMGroupJudgeInGroupReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupJudgeInGroupReq = iMGroupJudgeInGroupReq2;
                    th = th2;
                }
                if (iMGroupJudgeInGroupReq != null) {
                    mergeFrom(iMGroupJudgeInGroupReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasCheckUserId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getCheckUserId() {
                return this.checkUserId_;
            }

            public Builder setCheckUserId(int i) {
                this.bitField0_ |= 4;
                this.checkUserId_ = i;
                return this;
            }

            public Builder clearCheckUserId() {
                this.bitField0_ &= -5;
                this.checkUserId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMGroupJudgeInGroupReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupJudgeInGroupReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupJudgeInGroupReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupJudgeInGroupReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupJudgeInGroupReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupJudgeInGroupReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.checkUserId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 16;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupJudgeInGroupReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasCheckUserId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getCheckUserId() {
            return this.checkUserId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 16) == 16;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.checkUserId_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCheckUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.checkUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.checkUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupJudgeInGroupReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupJudgeInGroupReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupJudgeInGroupReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupJudgeInGroupReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupJudgeInGroupReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupJudgeInGroupReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupJudgeInGroupReq iMGroupJudgeInGroupReq) {
            return newBuilder().mergeFrom(iMGroupJudgeInGroupReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupJudgeInGroupReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCheckUserId();

        int getGroupId();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasCheckUserId();

        boolean hasGroupId();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupJudgeInGroupRsp extends GeneratedMessageLite implements IMGroupJudgeInGroupRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CHECK_USER_ID_FIELD_NUMBER = 3;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int ISIN_FIELD_NUMBER = 5;
        public static Parser<IMGroupJudgeInGroupRsp> PARSER = new AbstractParser<IMGroupJudgeInGroupRsp>() {
            public IMGroupJudgeInGroupRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupJudgeInGroupRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 4;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupJudgeInGroupRsp defaultInstance = new IMGroupJudgeInGroupRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int checkUserId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isin_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupJudgeInGroupRsp, Builder> implements IMGroupJudgeInGroupRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int checkUserId_;
            private int groupId_;
            private int isin_;
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.checkUserId_ = 0;
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                this.bitField0_ &= -9;
                this.isin_ = 0;
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupJudgeInGroupRsp getDefaultInstanceForType() {
                return IMGroupJudgeInGroupRsp.getDefaultInstance();
            }

            public IMGroupJudgeInGroupRsp build() {
                IMGroupJudgeInGroupRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupJudgeInGroupRsp buildPartial() {
                int i = 1;
                IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp = new IMGroupJudgeInGroupRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupJudgeInGroupRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupJudgeInGroupRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupJudgeInGroupRsp.checkUserId_ = this.checkUserId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupJudgeInGroupRsp.resultCode_ = this.resultCode_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupJudgeInGroupRsp.isin_ = this.isin_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupJudgeInGroupRsp.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMGroupJudgeInGroupRsp.attachData_ = this.attachData_;
                iMGroupJudgeInGroupRsp.bitField0_ = i;
                return iMGroupJudgeInGroupRsp;
            }

            public Builder mergeFrom(IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp) {
                if (iMGroupJudgeInGroupRsp != IMGroupJudgeInGroupRsp.getDefaultInstance()) {
                    if (iMGroupJudgeInGroupRsp.hasUserId()) {
                        setUserId(iMGroupJudgeInGroupRsp.getUserId());
                    }
                    if (iMGroupJudgeInGroupRsp.hasGroupId()) {
                        setGroupId(iMGroupJudgeInGroupRsp.getGroupId());
                    }
                    if (iMGroupJudgeInGroupRsp.hasCheckUserId()) {
                        setCheckUserId(iMGroupJudgeInGroupRsp.getCheckUserId());
                    }
                    if (iMGroupJudgeInGroupRsp.hasResultCode()) {
                        setResultCode(iMGroupJudgeInGroupRsp.getResultCode());
                    }
                    if (iMGroupJudgeInGroupRsp.hasIsin()) {
                        setIsin(iMGroupJudgeInGroupRsp.getIsin());
                    }
                    if (iMGroupJudgeInGroupRsp.hasUserHandle()) {
                        setUserHandle(iMGroupJudgeInGroupRsp.getUserHandle());
                    }
                    if (iMGroupJudgeInGroupRsp.hasAttachData()) {
                        setAttachData(iMGroupJudgeInGroupRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupJudgeInGroupRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasCheckUserId() && hasResultCode() && hasIsin()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp;
                IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp2;
                try {
                    IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp3 = (IMGroupJudgeInGroupRsp) IMGroupJudgeInGroupRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupJudgeInGroupRsp3 != null) {
                        mergeFrom(iMGroupJudgeInGroupRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupJudgeInGroupRsp2 = (IMGroupJudgeInGroupRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupJudgeInGroupRsp = iMGroupJudgeInGroupRsp2;
                    th = th2;
                }
                if (iMGroupJudgeInGroupRsp != null) {
                    mergeFrom(iMGroupJudgeInGroupRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasCheckUserId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getCheckUserId() {
                return this.checkUserId_;
            }

            public Builder setCheckUserId(int i) {
                this.bitField0_ |= 4;
                this.checkUserId_ = i;
                return this;
            }

            public Builder clearCheckUserId() {
                this.bitField0_ &= -5;
                this.checkUserId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 8;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -9;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasIsin() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getIsin() {
                return this.isin_;
            }

            public Builder setIsin(int i) {
                this.bitField0_ |= 16;
                this.isin_ = i;
                return this;
            }

            public Builder clearIsin() {
                this.bitField0_ &= -17;
                this.isin_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupJudgeInGroupRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupJudgeInGroupRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupJudgeInGroupRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupJudgeInGroupRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupJudgeInGroupRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupJudgeInGroupRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.checkUserId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.isin_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupJudgeInGroupRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasCheckUserId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getCheckUserId() {
            return this.checkUserId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasIsin() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getIsin() {
            return this.isin_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.checkUserId_ = 0;
            this.resultCode_ = 0;
            this.isin_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCheckUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsin()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.checkUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.resultCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.isin_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.checkUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.resultCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.isin_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupJudgeInGroupRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupJudgeInGroupRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupJudgeInGroupRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupJudgeInGroupRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupJudgeInGroupRsp iMGroupJudgeInGroupRsp) {
            return newBuilder().mergeFrom(iMGroupJudgeInGroupRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupJudgeInGroupRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getCheckUserId();

        int getGroupId();

        int getIsin();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasCheckUserId();

        boolean hasGroupId();

        boolean hasIsin();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupLeaveConferenceReq extends GeneratedMessageLite implements IMGroupLeaveConferenceReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int LEAVE_UID_FIELD_NUMBER = 3;
        public static Parser<IMGroupLeaveConferenceReq> PARSER = new AbstractParser<IMGroupLeaveConferenceReq>() {
            public IMGroupLeaveConferenceReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupLeaveConferenceReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 5;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupLeaveConferenceReq defaultInstance = new IMGroupLeaveConferenceReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int leaveUid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupLeaveConferenceReq, Builder> implements IMGroupLeaveConferenceReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int leaveUid_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.leaveUid_ = 0;
                this.bitField0_ &= -5;
                this.conferenceId_ = "";
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                this.bitField0_ &= -17;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupLeaveConferenceReq getDefaultInstanceForType() {
                return IMGroupLeaveConferenceReq.getDefaultInstance();
            }

            public IMGroupLeaveConferenceReq build() {
                IMGroupLeaveConferenceReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupLeaveConferenceReq buildPartial() {
                int i = 1;
                IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq = new IMGroupLeaveConferenceReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupLeaveConferenceReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupLeaveConferenceReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupLeaveConferenceReq.leaveUid_ = this.leaveUid_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupLeaveConferenceReq.conferenceId_ = this.conferenceId_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupLeaveConferenceReq.userHandle_ = this.userHandle_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupLeaveConferenceReq.attachData_ = this.attachData_;
                iMGroupLeaveConferenceReq.bitField0_ = i;
                return iMGroupLeaveConferenceReq;
            }

            public Builder mergeFrom(IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq) {
                if (iMGroupLeaveConferenceReq != IMGroupLeaveConferenceReq.getDefaultInstance()) {
                    if (iMGroupLeaveConferenceReq.hasUserId()) {
                        setUserId(iMGroupLeaveConferenceReq.getUserId());
                    }
                    if (iMGroupLeaveConferenceReq.hasGroupId()) {
                        setGroupId(iMGroupLeaveConferenceReq.getGroupId());
                    }
                    if (iMGroupLeaveConferenceReq.hasLeaveUid()) {
                        setLeaveUid(iMGroupLeaveConferenceReq.getLeaveUid());
                    }
                    if (iMGroupLeaveConferenceReq.hasConferenceId()) {
                        this.bitField0_ |= 8;
                        this.conferenceId_ = iMGroupLeaveConferenceReq.conferenceId_;
                    }
                    if (iMGroupLeaveConferenceReq.hasUserHandle()) {
                        setUserHandle(iMGroupLeaveConferenceReq.getUserHandle());
                    }
                    if (iMGroupLeaveConferenceReq.hasAttachData()) {
                        setAttachData(iMGroupLeaveConferenceReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupLeaveConferenceReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasLeaveUid() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq;
                IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq2;
                try {
                    IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq3 = (IMGroupLeaveConferenceReq) IMGroupLeaveConferenceReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupLeaveConferenceReq3 != null) {
                        mergeFrom(iMGroupLeaveConferenceReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupLeaveConferenceReq2 = (IMGroupLeaveConferenceReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupLeaveConferenceReq = iMGroupLeaveConferenceReq2;
                    th = th2;
                }
                if (iMGroupLeaveConferenceReq != null) {
                    mergeFrom(iMGroupLeaveConferenceReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasLeaveUid() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getLeaveUid() {
                return this.leaveUid_;
            }

            public Builder setLeaveUid(int i) {
                this.bitField0_ |= 4;
                this.leaveUid_ = i;
                return this;
            }

            public Builder clearLeaveUid() {
                this.bitField0_ &= -5;
                this.leaveUid_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -9;
                this.conferenceId_ = IMGroupLeaveConferenceReq.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 16;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 32) == 32;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -33;
                this.attachData_ = IMGroupLeaveConferenceReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupLeaveConferenceReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupLeaveConferenceReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupLeaveConferenceReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupLeaveConferenceReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupLeaveConferenceReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.leaveUid_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.conferenceId_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupLeaveConferenceReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasLeaveUid() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getLeaveUid() {
            return this.leaveUid_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.leaveUid_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLeaveUid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.leaveUid_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.leaveUid_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupLeaveConferenceReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupLeaveConferenceReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupLeaveConferenceReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupLeaveConferenceReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupLeaveConferenceReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupLeaveConferenceReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupLeaveConferenceReq iMGroupLeaveConferenceReq) {
            return newBuilder().mergeFrom(iMGroupLeaveConferenceReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupLeaveConferenceReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getLeaveUid();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasLeaveUid();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupLeaveConferenceRsp extends GeneratedMessageLite implements IMGroupLeaveConferenceRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CONFERENCE_ID_FIELD_NUMBER = 5;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int LEAVE_UID_FIELD_NUMBER = 3;
        public static Parser<IMGroupLeaveConferenceRsp> PARSER = new AbstractParser<IMGroupLeaveConferenceRsp>() {
            public IMGroupLeaveConferenceRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupLeaveConferenceRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 4;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupLeaveConferenceRsp defaultInstance = new IMGroupLeaveConferenceRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public Object conferenceId_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int leaveUid_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupLeaveConferenceRsp, Builder> implements IMGroupLeaveConferenceRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private Object conferenceId_ = "";
            private int groupId_;
            private int leaveUid_;
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.leaveUid_ = 0;
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                this.bitField0_ &= -9;
                this.conferenceId_ = "";
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupLeaveConferenceRsp getDefaultInstanceForType() {
                return IMGroupLeaveConferenceRsp.getDefaultInstance();
            }

            public IMGroupLeaveConferenceRsp build() {
                IMGroupLeaveConferenceRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupLeaveConferenceRsp buildPartial() {
                int i = 1;
                IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp = new IMGroupLeaveConferenceRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupLeaveConferenceRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupLeaveConferenceRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupLeaveConferenceRsp.leaveUid_ = this.leaveUid_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupLeaveConferenceRsp.resultCode_ = this.resultCode_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupLeaveConferenceRsp.conferenceId_ = this.conferenceId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupLeaveConferenceRsp.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMGroupLeaveConferenceRsp.attachData_ = this.attachData_;
                iMGroupLeaveConferenceRsp.bitField0_ = i;
                return iMGroupLeaveConferenceRsp;
            }

            public Builder mergeFrom(IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp) {
                if (iMGroupLeaveConferenceRsp != IMGroupLeaveConferenceRsp.getDefaultInstance()) {
                    if (iMGroupLeaveConferenceRsp.hasUserId()) {
                        setUserId(iMGroupLeaveConferenceRsp.getUserId());
                    }
                    if (iMGroupLeaveConferenceRsp.hasGroupId()) {
                        setGroupId(iMGroupLeaveConferenceRsp.getGroupId());
                    }
                    if (iMGroupLeaveConferenceRsp.hasLeaveUid()) {
                        setLeaveUid(iMGroupLeaveConferenceRsp.getLeaveUid());
                    }
                    if (iMGroupLeaveConferenceRsp.hasResultCode()) {
                        setResultCode(iMGroupLeaveConferenceRsp.getResultCode());
                    }
                    if (iMGroupLeaveConferenceRsp.hasConferenceId()) {
                        this.bitField0_ |= 16;
                        this.conferenceId_ = iMGroupLeaveConferenceRsp.conferenceId_;
                    }
                    if (iMGroupLeaveConferenceRsp.hasUserHandle()) {
                        setUserHandle(iMGroupLeaveConferenceRsp.getUserHandle());
                    }
                    if (iMGroupLeaveConferenceRsp.hasAttachData()) {
                        setAttachData(iMGroupLeaveConferenceRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupLeaveConferenceRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasLeaveUid() && hasResultCode() && hasConferenceId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp;
                IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp2;
                try {
                    IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp3 = (IMGroupLeaveConferenceRsp) IMGroupLeaveConferenceRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupLeaveConferenceRsp3 != null) {
                        mergeFrom(iMGroupLeaveConferenceRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupLeaveConferenceRsp2 = (IMGroupLeaveConferenceRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupLeaveConferenceRsp = iMGroupLeaveConferenceRsp2;
                    th = th2;
                }
                if (iMGroupLeaveConferenceRsp != null) {
                    mergeFrom(iMGroupLeaveConferenceRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasLeaveUid() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getLeaveUid() {
                return this.leaveUid_;
            }

            public Builder setLeaveUid(int i) {
                this.bitField0_ |= 4;
                this.leaveUid_ = i;
                return this;
            }

            public Builder clearLeaveUid() {
                this.bitField0_ &= -5;
                this.leaveUid_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 8;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -9;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasConferenceId() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getConferenceId() {
                Object obj = this.conferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.conferenceId_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getConferenceIdBytes() {
                Object obj = this.conferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.conferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setConferenceId(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.conferenceId_ = str;
                return this;
            }

            public Builder clearConferenceId() {
                this.bitField0_ &= -17;
                this.conferenceId_ = IMGroupLeaveConferenceRsp.getDefaultInstance().getConferenceId();
                return this;
            }

            public Builder setConferenceIdBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.conferenceId_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupLeaveConferenceRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupLeaveConferenceRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupLeaveConferenceRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupLeaveConferenceRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupLeaveConferenceRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupLeaveConferenceRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.leaveUid_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 42:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.conferenceId_ = readBytes;
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupLeaveConferenceRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasLeaveUid() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getLeaveUid() {
            return this.leaveUid_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasConferenceId() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getConferenceId() {
            Object obj = this.conferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.conferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getConferenceIdBytes() {
            Object obj = this.conferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.conferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.leaveUid_ = 0;
            this.resultCode_ = 0;
            this.conferenceId_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLeaveUid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasConferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.leaveUid_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.resultCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.leaveUid_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.resultCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getConferenceIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupLeaveConferenceRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupLeaveConferenceRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupLeaveConferenceRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveConferenceRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupLeaveConferenceRsp iMGroupLeaveConferenceRsp) {
            return newBuilder().mergeFrom(iMGroupLeaveConferenceRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupLeaveConferenceRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        String getConferenceId();

        ByteString getConferenceIdBytes();

        int getGroupId();

        int getLeaveUid();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasConferenceId();

        boolean hasGroupId();

        boolean hasLeaveUid();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupLeaveGroupReq extends GeneratedMessageLite implements IMGroupLeaveGroupReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int ISFROMUSER_FIELD_NUMBER = 5;
        public static final int LEAVE_TYPE_FIELD_NUMBER = 3;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 4;
        public static Parser<IMGroupLeaveGroupReq> PARSER = new AbstractParser<IMGroupLeaveGroupReq>() {
            public IMGroupLeaveGroupReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupLeaveGroupReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupLeaveGroupReq defaultInstance = new IMGroupLeaveGroupReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public int leaveType_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupLeaveGroupReq, Builder> implements IMGroupLeaveGroupReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int isfromuser_;
            private int leaveType_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.leaveType_ = 0;
                this.bitField0_ &= -5;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                this.isfromuser_ = 0;
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupLeaveGroupReq getDefaultInstanceForType() {
                return IMGroupLeaveGroupReq.getDefaultInstance();
            }

            public IMGroupLeaveGroupReq build() {
                IMGroupLeaveGroupReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupLeaveGroupReq buildPartial() {
                int i = 1;
                IMGroupLeaveGroupReq iMGroupLeaveGroupReq = new IMGroupLeaveGroupReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupLeaveGroupReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupLeaveGroupReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupLeaveGroupReq.leaveType_ = this.leaveType_;
                if ((this.bitField0_ & 8) == 8) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -9;
                }
                iMGroupLeaveGroupReq.memberIdList_ = this.memberIdList_;
                if ((i2 & 16) == 16) {
                    i |= 8;
                }
                iMGroupLeaveGroupReq.isfromuser_ = this.isfromuser_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMGroupLeaveGroupReq.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupLeaveGroupReq.attachData_ = this.attachData_;
                iMGroupLeaveGroupReq.bitField0_ = i;
                return iMGroupLeaveGroupReq;
            }

            public Builder mergeFrom(IMGroupLeaveGroupReq iMGroupLeaveGroupReq) {
                if (iMGroupLeaveGroupReq != IMGroupLeaveGroupReq.getDefaultInstance()) {
                    if (iMGroupLeaveGroupReq.hasUserId()) {
                        setUserId(iMGroupLeaveGroupReq.getUserId());
                    }
                    if (iMGroupLeaveGroupReq.hasGroupId()) {
                        setGroupId(iMGroupLeaveGroupReq.getGroupId());
                    }
                    if (iMGroupLeaveGroupReq.hasLeaveType()) {
                        setLeaveType(iMGroupLeaveGroupReq.getLeaveType());
                    }
                    if (!iMGroupLeaveGroupReq.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupLeaveGroupReq.memberIdList_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupLeaveGroupReq.memberIdList_);
                        }
                    }
                    if (iMGroupLeaveGroupReq.hasIsfromuser()) {
                        setIsfromuser(iMGroupLeaveGroupReq.getIsfromuser());
                    }
                    if (iMGroupLeaveGroupReq.hasUserHandle()) {
                        setUserHandle(iMGroupLeaveGroupReq.getUserHandle());
                    }
                    if (iMGroupLeaveGroupReq.hasAttachData()) {
                        setAttachData(iMGroupLeaveGroupReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupLeaveGroupReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasLeaveType()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupLeaveGroupReq iMGroupLeaveGroupReq;
                IMGroupLeaveGroupReq iMGroupLeaveGroupReq2;
                try {
                    IMGroupLeaveGroupReq iMGroupLeaveGroupReq3 = (IMGroupLeaveGroupReq) IMGroupLeaveGroupReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupLeaveGroupReq3 != null) {
                        mergeFrom(iMGroupLeaveGroupReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupLeaveGroupReq2 = (IMGroupLeaveGroupReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupLeaveGroupReq = iMGroupLeaveGroupReq2;
                    th = th2;
                }
                if (iMGroupLeaveGroupReq != null) {
                    mergeFrom(iMGroupLeaveGroupReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasLeaveType() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getLeaveType() {
                return this.leaveType_;
            }

            public Builder setLeaveType(int i) {
                this.bitField0_ |= 4;
                this.leaveType_ = i;
                return this;
            }

            public Builder clearLeaveType() {
                this.bitField0_ &= -5;
                this.leaveType_ = 0;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 8;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 16;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -17;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupLeaveGroupReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupLeaveGroupReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupLeaveGroupReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupLeaveGroupReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupLeaveGroupReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupLeaveGroupReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.leaveType_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 34:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 40:
                            this.bitField0_ |= 8;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupLeaveGroupReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasLeaveType() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getLeaveType() {
            return this.leaveType_;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.leaveType_ = 0;
            this.memberIdList_ = Collections.emptyList();
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLeaveType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.leaveType_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(4, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(5, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 = i + CodedOutputStream.computeUInt32Size(3, this.leaveType_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 8) == 8) {
                size += CodedOutputStream.computeUInt32Size(5, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupLeaveGroupReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupLeaveGroupReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupLeaveGroupReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupLeaveGroupReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupLeaveGroupReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupLeaveGroupReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupLeaveGroupReq iMGroupLeaveGroupReq) {
            return newBuilder().mergeFrom(iMGroupLeaveGroupReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupLeaveGroupReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getIsfromuser();

        int getLeaveType();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasLeaveType();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupLeaveGroupRsp extends GeneratedMessageLite implements IMGroupLeaveGroupRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int CHG_USER_ID_LIST_FIELD_NUMBER = 5;
        public static final int CUR_USER_ID_LIST_FIELD_NUMBER = 4;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int ISFROMUSER_FIELD_NUMBER = 7;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 6;
        public static Parser<IMGroupLeaveGroupRsp> PARSER = new AbstractParser<IMGroupLeaveGroupRsp>() {
            public IMGroupLeaveGroupRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupLeaveGroupRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 8;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupLeaveGroupRsp defaultInstance = new IMGroupLeaveGroupRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<Integer> chgUserIdList_;
        /* access modifiers changed from: private */
        public List<Integer> curUserIdList_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupLeaveGroupRsp, Builder> implements IMGroupLeaveGroupRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<Integer> chgUserIdList_ = Collections.emptyList();
            private List<Integer> curUserIdList_ = Collections.emptyList();
            private int groupId_;
            private int isfromuser_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                this.isfromuser_ = 0;
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                this.bitField0_ &= -129;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -257;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupLeaveGroupRsp getDefaultInstanceForType() {
                return IMGroupLeaveGroupRsp.getDefaultInstance();
            }

            public IMGroupLeaveGroupRsp build() {
                IMGroupLeaveGroupRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupLeaveGroupRsp buildPartial() {
                int i = 1;
                IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp = new IMGroupLeaveGroupRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupLeaveGroupRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupLeaveGroupRsp.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupLeaveGroupRsp.groupId_ = this.groupId_;
                if ((this.bitField0_ & 8) == 8) {
                    this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    this.bitField0_ &= -9;
                }
                iMGroupLeaveGroupRsp.curUserIdList_ = this.curUserIdList_;
                if ((this.bitField0_ & 16) == 16) {
                    this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupLeaveGroupRsp.chgUserIdList_ = this.chgUserIdList_;
                if ((this.bitField0_ & 32) == 32) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -33;
                }
                iMGroupLeaveGroupRsp.memberIdList_ = this.memberIdList_;
                if ((i2 & 64) == 64) {
                    i |= 8;
                }
                iMGroupLeaveGroupRsp.isfromuser_ = this.isfromuser_;
                if ((i2 & 128) == 128) {
                    i |= 16;
                }
                iMGroupLeaveGroupRsp.userHandle_ = this.userHandle_;
                if ((i2 & 256) == 256) {
                    i |= 32;
                }
                iMGroupLeaveGroupRsp.attachData_ = this.attachData_;
                iMGroupLeaveGroupRsp.bitField0_ = i;
                return iMGroupLeaveGroupRsp;
            }

            public Builder mergeFrom(IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp) {
                if (iMGroupLeaveGroupRsp != IMGroupLeaveGroupRsp.getDefaultInstance()) {
                    if (iMGroupLeaveGroupRsp.hasUserId()) {
                        setUserId(iMGroupLeaveGroupRsp.getUserId());
                    }
                    if (iMGroupLeaveGroupRsp.hasResultCode()) {
                        setResultCode(iMGroupLeaveGroupRsp.getResultCode());
                    }
                    if (iMGroupLeaveGroupRsp.hasGroupId()) {
                        setGroupId(iMGroupLeaveGroupRsp.getGroupId());
                    }
                    if (!iMGroupLeaveGroupRsp.curUserIdList_.isEmpty()) {
                        if (this.curUserIdList_.isEmpty()) {
                            this.curUserIdList_ = iMGroupLeaveGroupRsp.curUserIdList_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureCurUserIdListIsMutable();
                            this.curUserIdList_.addAll(iMGroupLeaveGroupRsp.curUserIdList_);
                        }
                    }
                    if (!iMGroupLeaveGroupRsp.chgUserIdList_.isEmpty()) {
                        if (this.chgUserIdList_.isEmpty()) {
                            this.chgUserIdList_ = iMGroupLeaveGroupRsp.chgUserIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureChgUserIdListIsMutable();
                            this.chgUserIdList_.addAll(iMGroupLeaveGroupRsp.chgUserIdList_);
                        }
                    }
                    if (!iMGroupLeaveGroupRsp.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupLeaveGroupRsp.memberIdList_;
                            this.bitField0_ &= -33;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupLeaveGroupRsp.memberIdList_);
                        }
                    }
                    if (iMGroupLeaveGroupRsp.hasIsfromuser()) {
                        setIsfromuser(iMGroupLeaveGroupRsp.getIsfromuser());
                    }
                    if (iMGroupLeaveGroupRsp.hasUserHandle()) {
                        setUserHandle(iMGroupLeaveGroupRsp.getUserHandle());
                    }
                    if (iMGroupLeaveGroupRsp.hasAttachData()) {
                        setAttachData(iMGroupLeaveGroupRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupLeaveGroupRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasResultCode() && hasGroupId() && hasIsfromuser()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp;
                IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp2;
                try {
                    IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp3 = (IMGroupLeaveGroupRsp) IMGroupLeaveGroupRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupLeaveGroupRsp3 != null) {
                        mergeFrom(iMGroupLeaveGroupRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupLeaveGroupRsp2 = (IMGroupLeaveGroupRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupLeaveGroupRsp = iMGroupLeaveGroupRsp2;
                    th = th2;
                }
                if (iMGroupLeaveGroupRsp != null) {
                    mergeFrom(iMGroupLeaveGroupRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            private void ensureCurUserIdListIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.curUserIdList_ = new ArrayList(this.curUserIdList_);
                    this.bitField0_ |= 8;
                }
            }

            public List<Integer> getCurUserIdListList() {
                return Collections.unmodifiableList(this.curUserIdList_);
            }

            public int getCurUserIdListCount() {
                return this.curUserIdList_.size();
            }

            public int getCurUserIdList(int i) {
                return ((Integer) this.curUserIdList_.get(i)).intValue();
            }

            public Builder setCurUserIdList(int i, int i2) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addCurUserIdList(int i) {
                ensureCurUserIdListIsMutable();
                this.curUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllCurUserIdList(Iterable<? extends Integer> iterable) {
                ensureCurUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.curUserIdList_);
                return this;
            }

            public Builder clearCurUserIdList() {
                this.curUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -9;
                return this;
            }

            private void ensureChgUserIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.chgUserIdList_ = new ArrayList(this.chgUserIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getChgUserIdListList() {
                return Collections.unmodifiableList(this.chgUserIdList_);
            }

            public int getChgUserIdListCount() {
                return this.chgUserIdList_.size();
            }

            public int getChgUserIdList(int i) {
                return ((Integer) this.chgUserIdList_.get(i)).intValue();
            }

            public Builder setChgUserIdList(int i, int i2) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addChgUserIdList(int i) {
                ensureChgUserIdListIsMutable();
                this.chgUserIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllChgUserIdList(Iterable<? extends Integer> iterable) {
                ensureChgUserIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.chgUserIdList_);
                return this;
            }

            public Builder clearChgUserIdList() {
                this.chgUserIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 32;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 64;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -65;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 128;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -129;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 256) == 256;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 256;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -257;
                this.attachData_ = IMGroupLeaveGroupRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupLeaveGroupRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupLeaveGroupRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupLeaveGroupRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupLeaveGroupRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupLeaveGroupRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            if (!(z2 & true)) {
                                this.curUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 34:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.curUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.chgUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit2 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.chgUserIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit2);
                            break;
                        case 48:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 50:
                            int pushLimit3 = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit3);
                            break;
                        case 56:
                            this.bitField0_ |= 8;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
                    }
                    if (z2 & true) {
                        this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
                    }
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.curUserIdList_ = Collections.unmodifiableList(this.curUserIdList_);
            }
            if (z2 & true) {
                this.chgUserIdList_ = Collections.unmodifiableList(this.chgUserIdList_);
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupLeaveGroupRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public List<Integer> getCurUserIdListList() {
            return this.curUserIdList_;
        }

        public int getCurUserIdListCount() {
            return this.curUserIdList_.size();
        }

        public int getCurUserIdList(int i) {
            return ((Integer) this.curUserIdList_.get(i)).intValue();
        }

        public List<Integer> getChgUserIdListList() {
            return this.chgUserIdList_;
        }

        public int getChgUserIdListCount() {
            return this.chgUserIdList_.size();
        }

        public int getChgUserIdList(int i) {
            return ((Integer) this.chgUserIdList_.get(i)).intValue();
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.curUserIdList_ = Collections.emptyList();
            this.chgUserIdList_ = Collections.emptyList();
            this.memberIdList_ = Collections.emptyList();
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIsfromuser()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            for (int i = 0; i < this.curUserIdList_.size(); i++) {
                codedOutputStream.writeUInt32(4, ((Integer) this.curUserIdList_.get(i)).intValue());
            }
            for (int i2 = 0; i2 < this.chgUserIdList_.size(); i2++) {
                codedOutputStream.writeUInt32(5, ((Integer) this.chgUserIdList_.get(i2)).intValue());
            }
            for (int i3 = 0; i3 < this.memberIdList_.size(); i3++) {
                codedOutputStream.writeUInt32(6, ((Integer) this.memberIdList_.get(i3)).intValue());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(8, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 = i + CodedOutputStream.computeUInt32Size(3, this.groupId_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            for (int i6 = 0; i6 < this.curUserIdList_.size(); i6++) {
                i5 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.curUserIdList_.get(i6)).intValue());
            }
            int size = i2 + i5 + (getCurUserIdListList().size() * 1);
            int i7 = 0;
            for (int i8 = 0; i8 < this.chgUserIdList_.size(); i8++) {
                i7 += CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.chgUserIdList_.get(i8)).intValue());
            }
            int size2 = size + i7 + (getChgUserIdListList().size() * 1);
            int i9 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i9 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i9;
            }
            int size3 = size2 + i9 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 8) == 8) {
                size3 += CodedOutputStream.computeUInt32Size(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                size3 += CodedOutputStream.computeUInt32Size(8, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size3 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size4 = size3 + this.unknownFields.size();
            this.memoizedSerializedSize = size4;
            return size4;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupLeaveGroupRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupLeaveGroupRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupLeaveGroupRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupLeaveGroupRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupLeaveGroupRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupLeaveGroupRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupLeaveGroupRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupLeaveGroupRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupLeaveGroupRsp iMGroupLeaveGroupRsp) {
            return newBuilder().mergeFrom(iMGroupLeaveGroupRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupLeaveGroupRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getChgUserIdList(int i);

        int getChgUserIdListCount();

        List<Integer> getChgUserIdListList();

        int getCurUserIdList(int i);

        int getCurUserIdListCount();

        List<Integer> getCurUserIdListList();

        int getGroupId();

        int getIsfromuser();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupShieldReq extends GeneratedMessageLite implements IMGroupShieldReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupShieldReq> PARSER = new AbstractParser<IMGroupShieldReq>() {
            public IMGroupShieldReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupShieldReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int SHIELD_STATUS_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupShieldReq defaultInstance = new IMGroupShieldReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int shieldStatus_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupShieldReq, Builder> implements IMGroupShieldReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int shieldStatus_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.shieldStatus_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupShieldReq getDefaultInstanceForType() {
                return IMGroupShieldReq.getDefaultInstance();
            }

            public IMGroupShieldReq build() {
                IMGroupShieldReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupShieldReq buildPartial() {
                int i = 1;
                IMGroupShieldReq iMGroupShieldReq = new IMGroupShieldReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupShieldReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupShieldReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupShieldReq.shieldStatus_ = this.shieldStatus_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupShieldReq.attachData_ = this.attachData_;
                iMGroupShieldReq.bitField0_ = i;
                return iMGroupShieldReq;
            }

            public Builder mergeFrom(IMGroupShieldReq iMGroupShieldReq) {
                if (iMGroupShieldReq != IMGroupShieldReq.getDefaultInstance()) {
                    if (iMGroupShieldReq.hasUserId()) {
                        setUserId(iMGroupShieldReq.getUserId());
                    }
                    if (iMGroupShieldReq.hasGroupId()) {
                        setGroupId(iMGroupShieldReq.getGroupId());
                    }
                    if (iMGroupShieldReq.hasShieldStatus()) {
                        setShieldStatus(iMGroupShieldReq.getShieldStatus());
                    }
                    if (iMGroupShieldReq.hasAttachData()) {
                        setAttachData(iMGroupShieldReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupShieldReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasShieldStatus()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupShieldReq iMGroupShieldReq;
                IMGroupShieldReq iMGroupShieldReq2;
                try {
                    IMGroupShieldReq iMGroupShieldReq3 = (IMGroupShieldReq) IMGroupShieldReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupShieldReq3 != null) {
                        mergeFrom(iMGroupShieldReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupShieldReq2 = (IMGroupShieldReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupShieldReq = iMGroupShieldReq2;
                    th = th2;
                }
                if (iMGroupShieldReq != null) {
                    mergeFrom(iMGroupShieldReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasShieldStatus() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getShieldStatus() {
                return this.shieldStatus_;
            }

            public Builder setShieldStatus(int i) {
                this.bitField0_ |= 4;
                this.shieldStatus_ = i;
                return this;
            }

            public Builder clearShieldStatus() {
                this.bitField0_ &= -5;
                this.shieldStatus_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupShieldReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupShieldReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupShieldReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupShieldReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupShieldReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupShieldReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.shieldStatus_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 8;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupShieldReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasShieldStatus() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getShieldStatus() {
            return this.shieldStatus_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 8) == 8;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.shieldStatus_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasShieldStatus()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.shieldStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.shieldStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupShieldReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupShieldReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupShieldReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupShieldReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupShieldReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupShieldReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupShieldReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupShieldReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupShieldReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupShieldReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupShieldReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupShieldReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupShieldReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupShieldReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupShieldReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupShieldReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupShieldReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupShieldReq iMGroupShieldReq) {
            return newBuilder().mergeFrom(iMGroupShieldReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupShieldReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getShieldStatus();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasShieldStatus();

        boolean hasUserId();
    }

    public static final class IMGroupShieldRsp extends GeneratedMessageLite implements IMGroupShieldRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static Parser<IMGroupShieldRsp> PARSER = new AbstractParser<IMGroupShieldRsp>() {
            public IMGroupShieldRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupShieldRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupShieldRsp defaultInstance = new IMGroupShieldRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupShieldRsp, Builder> implements IMGroupShieldRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int resultCode_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupShieldRsp getDefaultInstanceForType() {
                return IMGroupShieldRsp.getDefaultInstance();
            }

            public IMGroupShieldRsp build() {
                IMGroupShieldRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupShieldRsp buildPartial() {
                int i = 1;
                IMGroupShieldRsp iMGroupShieldRsp = new IMGroupShieldRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupShieldRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupShieldRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupShieldRsp.resultCode_ = this.resultCode_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupShieldRsp.attachData_ = this.attachData_;
                iMGroupShieldRsp.bitField0_ = i;
                return iMGroupShieldRsp;
            }

            public Builder mergeFrom(IMGroupShieldRsp iMGroupShieldRsp) {
                if (iMGroupShieldRsp != IMGroupShieldRsp.getDefaultInstance()) {
                    if (iMGroupShieldRsp.hasUserId()) {
                        setUserId(iMGroupShieldRsp.getUserId());
                    }
                    if (iMGroupShieldRsp.hasGroupId()) {
                        setGroupId(iMGroupShieldRsp.getGroupId());
                    }
                    if (iMGroupShieldRsp.hasResultCode()) {
                        setResultCode(iMGroupShieldRsp.getResultCode());
                    }
                    if (iMGroupShieldRsp.hasAttachData()) {
                        setAttachData(iMGroupShieldRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupShieldRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasResultCode()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupShieldRsp iMGroupShieldRsp;
                IMGroupShieldRsp iMGroupShieldRsp2;
                try {
                    IMGroupShieldRsp iMGroupShieldRsp3 = (IMGroupShieldRsp) IMGroupShieldRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupShieldRsp3 != null) {
                        mergeFrom(iMGroupShieldRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupShieldRsp2 = (IMGroupShieldRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupShieldRsp = iMGroupShieldRsp2;
                    th = th2;
                }
                if (iMGroupShieldRsp != null) {
                    mergeFrom(iMGroupShieldRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 4;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupShieldRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupShieldRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupShieldRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupShieldRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupShieldRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupShieldRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 8;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupShieldRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 8) == 8;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.resultCode_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.resultCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupShieldRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupShieldRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupShieldRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupShieldRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupShieldRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupShieldRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupShieldRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupShieldRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupShieldRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupShieldRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupShieldRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupShieldRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupShieldRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupShieldRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupShieldRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupShieldRsp iMGroupShieldRsp) {
            return newBuilder().mergeFrom(iMGroupShieldRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupShieldRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getResultCode();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasResultCode();

        boolean hasUserId();
    }

    public static final class IMGroupTransferCreatorReq extends GeneratedMessageLite implements IMGroupTransferCreatorReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int ISFROMUSER_FIELD_NUMBER = 5;
        public static final int NEW_CREATOR_FIELD_NUMBER = 3;
        public static Parser<IMGroupTransferCreatorReq> PARSER = new AbstractParser<IMGroupTransferCreatorReq>() {
            public IMGroupTransferCreatorReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupTransferCreatorReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REASON_FIELD_NUMBER = 4;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupTransferCreatorReq defaultInstance = new IMGroupTransferCreatorReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int newCreator_;
        /* access modifiers changed from: private */
        public int reason_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupTransferCreatorReq, Builder> implements IMGroupTransferCreatorReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int isfromuser_;
            private int newCreator_;
            private int reason_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.newCreator_ = 0;
                this.bitField0_ &= -5;
                this.reason_ = 0;
                this.bitField0_ &= -9;
                this.isfromuser_ = 0;
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupTransferCreatorReq getDefaultInstanceForType() {
                return IMGroupTransferCreatorReq.getDefaultInstance();
            }

            public IMGroupTransferCreatorReq build() {
                IMGroupTransferCreatorReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupTransferCreatorReq buildPartial() {
                int i = 1;
                IMGroupTransferCreatorReq iMGroupTransferCreatorReq = new IMGroupTransferCreatorReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupTransferCreatorReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupTransferCreatorReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupTransferCreatorReq.newCreator_ = this.newCreator_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupTransferCreatorReq.reason_ = this.reason_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupTransferCreatorReq.isfromuser_ = this.isfromuser_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupTransferCreatorReq.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMGroupTransferCreatorReq.attachData_ = this.attachData_;
                iMGroupTransferCreatorReq.bitField0_ = i;
                return iMGroupTransferCreatorReq;
            }

            public Builder mergeFrom(IMGroupTransferCreatorReq iMGroupTransferCreatorReq) {
                if (iMGroupTransferCreatorReq != IMGroupTransferCreatorReq.getDefaultInstance()) {
                    if (iMGroupTransferCreatorReq.hasUserId()) {
                        setUserId(iMGroupTransferCreatorReq.getUserId());
                    }
                    if (iMGroupTransferCreatorReq.hasGroupId()) {
                        setGroupId(iMGroupTransferCreatorReq.getGroupId());
                    }
                    if (iMGroupTransferCreatorReq.hasNewCreator()) {
                        setNewCreator(iMGroupTransferCreatorReq.getNewCreator());
                    }
                    if (iMGroupTransferCreatorReq.hasReason()) {
                        setReason(iMGroupTransferCreatorReq.getReason());
                    }
                    if (iMGroupTransferCreatorReq.hasIsfromuser()) {
                        setIsfromuser(iMGroupTransferCreatorReq.getIsfromuser());
                    }
                    if (iMGroupTransferCreatorReq.hasUserHandle()) {
                        setUserHandle(iMGroupTransferCreatorReq.getUserHandle());
                    }
                    if (iMGroupTransferCreatorReq.hasAttachData()) {
                        setAttachData(iMGroupTransferCreatorReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupTransferCreatorReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasNewCreator()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupTransferCreatorReq iMGroupTransferCreatorReq;
                IMGroupTransferCreatorReq iMGroupTransferCreatorReq2;
                try {
                    IMGroupTransferCreatorReq iMGroupTransferCreatorReq3 = (IMGroupTransferCreatorReq) IMGroupTransferCreatorReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupTransferCreatorReq3 != null) {
                        mergeFrom(iMGroupTransferCreatorReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupTransferCreatorReq2 = (IMGroupTransferCreatorReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupTransferCreatorReq = iMGroupTransferCreatorReq2;
                    th = th2;
                }
                if (iMGroupTransferCreatorReq != null) {
                    mergeFrom(iMGroupTransferCreatorReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNewCreator() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getNewCreator() {
                return this.newCreator_;
            }

            public Builder setNewCreator(int i) {
                this.bitField0_ |= 4;
                this.newCreator_ = i;
                return this;
            }

            public Builder clearNewCreator() {
                this.bitField0_ &= -5;
                this.newCreator_ = 0;
                return this;
            }

            public boolean hasReason() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getReason() {
                return this.reason_;
            }

            public Builder setReason(int i) {
                this.bitField0_ |= 8;
                this.reason_ = i;
                return this;
            }

            public Builder clearReason() {
                this.bitField0_ &= -9;
                this.reason_ = 0;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 16;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -17;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMGroupTransferCreatorReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupTransferCreatorReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupTransferCreatorReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupTransferCreatorReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupTransferCreatorReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupTransferCreatorReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.newCreator_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.reason_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 64;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupTransferCreatorReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNewCreator() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getNewCreator() {
            return this.newCreator_;
        }

        public boolean hasReason() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getReason() {
            return this.reason_;
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 64) == 64;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.newCreator_ = 0;
            this.reason_ = 0;
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewCreator()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.newCreator_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.reason_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.isfromuser_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.newCreator_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.reason_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.isfromuser_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupTransferCreatorReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupTransferCreatorReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupTransferCreatorReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupTransferCreatorReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupTransferCreatorReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupTransferCreatorReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupTransferCreatorReq iMGroupTransferCreatorReq) {
            return newBuilder().mergeFrom(iMGroupTransferCreatorReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupTransferCreatorReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getIsfromuser();

        int getNewCreator();

        int getReason();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasNewCreator();

        boolean hasReason();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupTransferCreatorRsp extends GeneratedMessageLite implements IMGroupTransferCreatorRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 6;
        public static final int ISFROMUSER_FIELD_NUMBER = 7;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 5;
        public static final int NEW_CREATOR_FIELD_NUMBER = 4;
        public static final int OLD_CREATOR_FIELD_NUMBER = 1;
        public static Parser<IMGroupTransferCreatorRsp> PARSER = new AbstractParser<IMGroupTransferCreatorRsp>() {
            public IMGroupTransferCreatorRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupTransferCreatorRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REASON_FIELD_NUMBER = 8;
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 9;
        private static final IMGroupTransferCreatorRsp defaultInstance = new IMGroupTransferCreatorRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int newCreator_;
        /* access modifiers changed from: private */
        public int oldCreator_;
        /* access modifiers changed from: private */
        public int reason_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupTransferCreatorRsp, Builder> implements IMGroupTransferCreatorRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int isfromuser_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private int newCreator_;
            private int oldCreator_;
            private int reason_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.oldCreator_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.newCreator_ = 0;
                this.bitField0_ &= -9;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.groupName_ = "";
                this.bitField0_ &= -33;
                this.isfromuser_ = 0;
                this.bitField0_ &= -65;
                this.reason_ = 0;
                this.bitField0_ &= -129;
                this.userHandle_ = 0;
                this.bitField0_ &= -257;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -513;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupTransferCreatorRsp getDefaultInstanceForType() {
                return IMGroupTransferCreatorRsp.getDefaultInstance();
            }

            public IMGroupTransferCreatorRsp build() {
                IMGroupTransferCreatorRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupTransferCreatorRsp buildPartial() {
                int i = 1;
                IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp = new IMGroupTransferCreatorRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupTransferCreatorRsp.oldCreator_ = this.oldCreator_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupTransferCreatorRsp.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupTransferCreatorRsp.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupTransferCreatorRsp.newCreator_ = this.newCreator_;
                if ((this.bitField0_ & 16) == 16) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupTransferCreatorRsp.memberIdList_ = this.memberIdList_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMGroupTransferCreatorRsp.groupName_ = this.groupName_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupTransferCreatorRsp.isfromuser_ = this.isfromuser_;
                if ((i2 & 128) == 128) {
                    i |= 64;
                }
                iMGroupTransferCreatorRsp.reason_ = this.reason_;
                if ((i2 & 256) == 256) {
                    i |= 128;
                }
                iMGroupTransferCreatorRsp.userHandle_ = this.userHandle_;
                if ((i2 & 512) == 512) {
                    i |= 256;
                }
                iMGroupTransferCreatorRsp.attachData_ = this.attachData_;
                iMGroupTransferCreatorRsp.bitField0_ = i;
                return iMGroupTransferCreatorRsp;
            }

            public Builder mergeFrom(IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp) {
                if (iMGroupTransferCreatorRsp != IMGroupTransferCreatorRsp.getDefaultInstance()) {
                    if (iMGroupTransferCreatorRsp.hasOldCreator()) {
                        setOldCreator(iMGroupTransferCreatorRsp.getOldCreator());
                    }
                    if (iMGroupTransferCreatorRsp.hasResultCode()) {
                        setResultCode(iMGroupTransferCreatorRsp.getResultCode());
                    }
                    if (iMGroupTransferCreatorRsp.hasGroupId()) {
                        setGroupId(iMGroupTransferCreatorRsp.getGroupId());
                    }
                    if (iMGroupTransferCreatorRsp.hasNewCreator()) {
                        setNewCreator(iMGroupTransferCreatorRsp.getNewCreator());
                    }
                    if (!iMGroupTransferCreatorRsp.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupTransferCreatorRsp.memberIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupTransferCreatorRsp.memberIdList_);
                        }
                    }
                    if (iMGroupTransferCreatorRsp.hasGroupName()) {
                        this.bitField0_ |= 32;
                        this.groupName_ = iMGroupTransferCreatorRsp.groupName_;
                    }
                    if (iMGroupTransferCreatorRsp.hasIsfromuser()) {
                        setIsfromuser(iMGroupTransferCreatorRsp.getIsfromuser());
                    }
                    if (iMGroupTransferCreatorRsp.hasReason()) {
                        setReason(iMGroupTransferCreatorRsp.getReason());
                    }
                    if (iMGroupTransferCreatorRsp.hasUserHandle()) {
                        setUserHandle(iMGroupTransferCreatorRsp.getUserHandle());
                    }
                    if (iMGroupTransferCreatorRsp.hasAttachData()) {
                        setAttachData(iMGroupTransferCreatorRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupTransferCreatorRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasOldCreator() && hasResultCode() && hasGroupId() && hasNewCreator()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp;
                IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp2;
                try {
                    IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp3 = (IMGroupTransferCreatorRsp) IMGroupTransferCreatorRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupTransferCreatorRsp3 != null) {
                        mergeFrom(iMGroupTransferCreatorRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupTransferCreatorRsp2 = (IMGroupTransferCreatorRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupTransferCreatorRsp = iMGroupTransferCreatorRsp2;
                    th = th2;
                }
                if (iMGroupTransferCreatorRsp != null) {
                    mergeFrom(iMGroupTransferCreatorRsp);
                }
                throw th;
            }

            public boolean hasOldCreator() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getOldCreator() {
                return this.oldCreator_;
            }

            public Builder setOldCreator(int i) {
                this.bitField0_ |= 1;
                this.oldCreator_ = i;
                return this;
            }

            public Builder clearOldCreator() {
                this.bitField0_ &= -2;
                this.oldCreator_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNewCreator() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getNewCreator() {
                return this.newCreator_;
            }

            public Builder setNewCreator(int i) {
                this.bitField0_ |= 8;
                this.newCreator_ = i;
                return this;
            }

            public Builder clearNewCreator() {
                this.bitField0_ &= -9;
                this.newCreator_ = 0;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -33;
                this.groupName_ = IMGroupTransferCreatorRsp.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 64;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -65;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasReason() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getReason() {
                return this.reason_;
            }

            public Builder setReason(int i) {
                this.bitField0_ |= 128;
                this.reason_ = i;
                return this;
            }

            public Builder clearReason() {
                this.bitField0_ &= -129;
                this.reason_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 256) == 256;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 256;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -257;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 512) == 512;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 512;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -513;
                this.attachData_ = IMGroupTransferCreatorRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupTransferCreatorRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupTransferCreatorRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupTransferCreatorRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupTransferCreatorRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupTransferCreatorRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.oldCreator_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.newCreator_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 50:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.groupName_ = readBytes;
                            break;
                        case 56:
                            this.bitField0_ |= 32;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 64;
                            this.reason_ = codedInputStream.readUInt32();
                            break;
                        case 72:
                            this.bitField0_ |= 128;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 256;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupTransferCreatorRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasOldCreator() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getOldCreator() {
            return this.oldCreator_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNewCreator() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getNewCreator() {
            return this.newCreator_;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasReason() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getReason() {
            return this.reason_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 128) == 128;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 256) == 256;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.oldCreator_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.newCreator_ = 0;
            this.memberIdList_ = Collections.emptyList();
            this.groupName_ = "";
            this.isfromuser_ = 0;
            this.reason_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasOldCreator()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewCreator()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.oldCreator_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.newCreator_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(5, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(6, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeUInt32(8, this.reason_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeUInt32(9, this.userHandle_);
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.oldCreator_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeUInt32Size(4, this.newCreator_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeBytesSize(6, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeUInt32Size(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeUInt32Size(8, this.reason_);
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeUInt32Size(9, this.userHandle_);
            }
            if ((this.bitField0_ & 256) == 256) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupTransferCreatorRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupTransferCreatorRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupTransferCreatorRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupTransferCreatorRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupTransferCreatorRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupTransferCreatorRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupTransferCreatorRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupTransferCreatorRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupTransferCreatorRsp iMGroupTransferCreatorRsp) {
            return newBuilder().mergeFrom(iMGroupTransferCreatorRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupTransferCreatorRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getIsfromuser();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        int getNewCreator();

        int getOldCreator();

        int getReason();

        int getResultCode();

        int getUserHandle();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasIsfromuser();

        boolean hasNewCreator();

        boolean hasOldCreator();

        boolean hasReason();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMGroupUpdateGroupNameReq extends GeneratedMessageLite implements IMGroupUpdateGroupNameReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int ISFROMUSER_FIELD_NUMBER = 4;
        public static final int NEW_GROUP_NAME_FIELD_NUMBER = 3;
        public static Parser<IMGroupUpdateGroupNameReq> PARSER = new AbstractParser<IMGroupUpdateGroupNameReq>() {
            public IMGroupUpdateGroupNameReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupUpdateGroupNameReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 5;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupUpdateGroupNameReq defaultInstance = new IMGroupUpdateGroupNameReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object newGroupName_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupUpdateGroupNameReq, Builder> implements IMGroupUpdateGroupNameReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private int isfromuser_;
            private Object newGroupName_ = "";
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.newGroupName_ = "";
                this.bitField0_ &= -5;
                this.isfromuser_ = 0;
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                this.bitField0_ &= -17;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupUpdateGroupNameReq getDefaultInstanceForType() {
                return IMGroupUpdateGroupNameReq.getDefaultInstance();
            }

            public IMGroupUpdateGroupNameReq build() {
                IMGroupUpdateGroupNameReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupUpdateGroupNameReq buildPartial() {
                int i = 1;
                IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq = new IMGroupUpdateGroupNameReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupUpdateGroupNameReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupUpdateGroupNameReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupUpdateGroupNameReq.newGroupName_ = this.newGroupName_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupUpdateGroupNameReq.isfromuser_ = this.isfromuser_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMGroupUpdateGroupNameReq.userHandle_ = this.userHandle_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMGroupUpdateGroupNameReq.attachData_ = this.attachData_;
                iMGroupUpdateGroupNameReq.bitField0_ = i;
                return iMGroupUpdateGroupNameReq;
            }

            public Builder mergeFrom(IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq) {
                if (iMGroupUpdateGroupNameReq != IMGroupUpdateGroupNameReq.getDefaultInstance()) {
                    if (iMGroupUpdateGroupNameReq.hasUserId()) {
                        setUserId(iMGroupUpdateGroupNameReq.getUserId());
                    }
                    if (iMGroupUpdateGroupNameReq.hasGroupId()) {
                        setGroupId(iMGroupUpdateGroupNameReq.getGroupId());
                    }
                    if (iMGroupUpdateGroupNameReq.hasNewGroupName()) {
                        this.bitField0_ |= 4;
                        this.newGroupName_ = iMGroupUpdateGroupNameReq.newGroupName_;
                    }
                    if (iMGroupUpdateGroupNameReq.hasIsfromuser()) {
                        setIsfromuser(iMGroupUpdateGroupNameReq.getIsfromuser());
                    }
                    if (iMGroupUpdateGroupNameReq.hasUserHandle()) {
                        setUserHandle(iMGroupUpdateGroupNameReq.getUserHandle());
                    }
                    if (iMGroupUpdateGroupNameReq.hasAttachData()) {
                        setAttachData(iMGroupUpdateGroupNameReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupUpdateGroupNameReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasNewGroupName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq;
                IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq2;
                try {
                    IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq3 = (IMGroupUpdateGroupNameReq) IMGroupUpdateGroupNameReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupUpdateGroupNameReq3 != null) {
                        mergeFrom(iMGroupUpdateGroupNameReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupUpdateGroupNameReq2 = (IMGroupUpdateGroupNameReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupUpdateGroupNameReq = iMGroupUpdateGroupNameReq2;
                    th = th2;
                }
                if (iMGroupUpdateGroupNameReq != null) {
                    mergeFrom(iMGroupUpdateGroupNameReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNewGroupName() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getNewGroupName() {
                Object obj = this.newGroupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.newGroupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNewGroupNameBytes() {
                Object obj = this.newGroupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.newGroupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNewGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.newGroupName_ = str;
                return this;
            }

            public Builder clearNewGroupName() {
                this.bitField0_ &= -5;
                this.newGroupName_ = IMGroupUpdateGroupNameReq.getDefaultInstance().getNewGroupName();
                return this;
            }

            public Builder setNewGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.newGroupName_ = byteString;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 8;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -9;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 16;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 32) == 32;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -33;
                this.attachData_ = IMGroupUpdateGroupNameReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupUpdateGroupNameReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupUpdateGroupNameReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupUpdateGroupNameReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupUpdateGroupNameReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupUpdateGroupNameReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.newGroupName_ = readBytes;
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupUpdateGroupNameReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNewGroupName() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getNewGroupName() {
            Object obj = this.newGroupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.newGroupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNewGroupNameBytes() {
            Object obj = this.newGroupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.newGroupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.newGroupName_ = "";
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getNewGroupNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getNewGroupNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.isfromuser_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupUpdateGroupNameReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupUpdateGroupNameReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupUpdateGroupNameReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupUpdateGroupNameReq iMGroupUpdateGroupNameReq) {
            return newBuilder().mergeFrom(iMGroupUpdateGroupNameReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupUpdateGroupNameReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getIsfromuser();

        String getNewGroupName();

        ByteString getNewGroupNameBytes();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasIsfromuser();

        boolean hasNewGroupName();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupUpdateGroupNameRsp extends GeneratedMessageLite implements IMGroupUpdateGroupNameRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 6;
        public static final int ISFROMUSER_FIELD_NUMBER = 7;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 5;
        public static final int NEW_GROUP_NAME_FIELD_NUMBER = 4;
        public static Parser<IMGroupUpdateGroupNameRsp> PARSER = new AbstractParser<IMGroupUpdateGroupNameRsp>() {
            public IMGroupUpdateGroupNameRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupUpdateGroupNameRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 8;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupUpdateGroupNameRsp defaultInstance = new IMGroupUpdateGroupNameRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int isfromuser_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object newGroupName_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupUpdateGroupNameRsp, Builder> implements IMGroupUpdateGroupNameRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int isfromuser_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private Object newGroupName_ = "";
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.newGroupName_ = "";
                this.bitField0_ &= -9;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.groupName_ = "";
                this.bitField0_ &= -33;
                this.isfromuser_ = 0;
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                this.bitField0_ &= -129;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -257;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupUpdateGroupNameRsp getDefaultInstanceForType() {
                return IMGroupUpdateGroupNameRsp.getDefaultInstance();
            }

            public IMGroupUpdateGroupNameRsp build() {
                IMGroupUpdateGroupNameRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupUpdateGroupNameRsp buildPartial() {
                int i = 1;
                IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp = new IMGroupUpdateGroupNameRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupUpdateGroupNameRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupUpdateGroupNameRsp.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMGroupUpdateGroupNameRsp.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMGroupUpdateGroupNameRsp.newGroupName_ = this.newGroupName_;
                if ((this.bitField0_ & 16) == 16) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -17;
                }
                iMGroupUpdateGroupNameRsp.memberIdList_ = this.memberIdList_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMGroupUpdateGroupNameRsp.groupName_ = this.groupName_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMGroupUpdateGroupNameRsp.isfromuser_ = this.isfromuser_;
                if ((i2 & 128) == 128) {
                    i |= 64;
                }
                iMGroupUpdateGroupNameRsp.userHandle_ = this.userHandle_;
                if ((i2 & 256) == 256) {
                    i |= 128;
                }
                iMGroupUpdateGroupNameRsp.attachData_ = this.attachData_;
                iMGroupUpdateGroupNameRsp.bitField0_ = i;
                return iMGroupUpdateGroupNameRsp;
            }

            public Builder mergeFrom(IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp) {
                if (iMGroupUpdateGroupNameRsp != IMGroupUpdateGroupNameRsp.getDefaultInstance()) {
                    if (iMGroupUpdateGroupNameRsp.hasUserId()) {
                        setUserId(iMGroupUpdateGroupNameRsp.getUserId());
                    }
                    if (iMGroupUpdateGroupNameRsp.hasResultCode()) {
                        setResultCode(iMGroupUpdateGroupNameRsp.getResultCode());
                    }
                    if (iMGroupUpdateGroupNameRsp.hasGroupId()) {
                        setGroupId(iMGroupUpdateGroupNameRsp.getGroupId());
                    }
                    if (iMGroupUpdateGroupNameRsp.hasNewGroupName()) {
                        this.bitField0_ |= 8;
                        this.newGroupName_ = iMGroupUpdateGroupNameRsp.newGroupName_;
                    }
                    if (!iMGroupUpdateGroupNameRsp.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMGroupUpdateGroupNameRsp.memberIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMGroupUpdateGroupNameRsp.memberIdList_);
                        }
                    }
                    if (iMGroupUpdateGroupNameRsp.hasGroupName()) {
                        this.bitField0_ |= 32;
                        this.groupName_ = iMGroupUpdateGroupNameRsp.groupName_;
                    }
                    if (iMGroupUpdateGroupNameRsp.hasIsfromuser()) {
                        setIsfromuser(iMGroupUpdateGroupNameRsp.getIsfromuser());
                    }
                    if (iMGroupUpdateGroupNameRsp.hasUserHandle()) {
                        setUserHandle(iMGroupUpdateGroupNameRsp.getUserHandle());
                    }
                    if (iMGroupUpdateGroupNameRsp.hasAttachData()) {
                        setAttachData(iMGroupUpdateGroupNameRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupUpdateGroupNameRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasResultCode() && hasGroupId() && hasNewGroupName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp;
                IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp2;
                try {
                    IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp3 = (IMGroupUpdateGroupNameRsp) IMGroupUpdateGroupNameRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupUpdateGroupNameRsp3 != null) {
                        mergeFrom(iMGroupUpdateGroupNameRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupUpdateGroupNameRsp2 = (IMGroupUpdateGroupNameRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupUpdateGroupNameRsp = iMGroupUpdateGroupNameRsp2;
                    th = th2;
                }
                if (iMGroupUpdateGroupNameRsp != null) {
                    mergeFrom(iMGroupUpdateGroupNameRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNewGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getNewGroupName() {
                Object obj = this.newGroupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.newGroupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNewGroupNameBytes() {
                Object obj = this.newGroupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.newGroupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNewGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.newGroupName_ = str;
                return this;
            }

            public Builder clearNewGroupName() {
                this.bitField0_ &= -9;
                this.newGroupName_ = IMGroupUpdateGroupNameRsp.getDefaultInstance().getNewGroupName();
                return this;
            }

            public Builder setNewGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.newGroupName_ = byteString;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -33;
                this.groupName_ = IMGroupUpdateGroupNameRsp.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasIsfromuser() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getIsfromuser() {
                return this.isfromuser_;
            }

            public Builder setIsfromuser(int i) {
                this.bitField0_ |= 64;
                this.isfromuser_ = i;
                return this;
            }

            public Builder clearIsfromuser() {
                this.bitField0_ &= -65;
                this.isfromuser_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 128) == 128;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 128;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -129;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 256) == 256;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 256;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -257;
                this.attachData_ = IMGroupUpdateGroupNameRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupUpdateGroupNameRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupUpdateGroupNameRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupUpdateGroupNameRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupUpdateGroupNameRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupUpdateGroupNameRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.newGroupName_ = readBytes;
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 50:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.groupName_ = readBytes2;
                            break;
                        case 56:
                            this.bitField0_ |= 32;
                            this.isfromuser_ = codedInputStream.readUInt32();
                            break;
                        case 64:
                            this.bitField0_ |= 64;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 128;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupUpdateGroupNameRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNewGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getNewGroupName() {
            Object obj = this.newGroupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.newGroupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNewGroupNameBytes() {
            Object obj = this.newGroupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.newGroupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasIsfromuser() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getIsfromuser() {
            return this.isfromuser_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 128) == 128;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.newGroupName_ = "";
            this.memberIdList_ = Collections.emptyList();
            this.groupName_ = "";
            this.isfromuser_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNewGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getNewGroupNameBytes());
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(5, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(6, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeUInt32(8, this.userHandle_);
            }
            if ((this.bitField0_ & 128) == 128) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeBytesSize(4, getNewGroupNameBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeBytesSize(6, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeUInt32Size(7, this.isfromuser_);
            }
            if ((this.bitField0_ & 64) == 64) {
                size += CodedOutputStream.computeUInt32Size(8, this.userHandle_);
            }
            if ((this.bitField0_ & 128) == 128) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupUpdateGroupNameRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupUpdateGroupNameRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUpdateGroupNameRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupUpdateGroupNameRsp iMGroupUpdateGroupNameRsp) {
            return newBuilder().mergeFrom(iMGroupUpdateGroupNameRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupUpdateGroupNameRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getIsfromuser();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        String getNewGroupName();

        ByteString getNewGroupNameBytes();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasIsfromuser();

        boolean hasNewGroupName();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupUserInfoReq extends GeneratedMessageLite implements IMGroupUserInfoReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_LIST_FIELD_NUMBER = 2;
        public static Parser<IMGroupUserInfoReq> PARSER = new AbstractParser<IMGroupUserInfoReq>() {
            public IMGroupUserInfoReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupUserInfoReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupUserInfoReq defaultInstance = new IMGroupUserInfoReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<Integer> groupIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupUserInfoReq, Builder> implements IMGroupUserInfoReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<Integer> groupIdList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupIdList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupUserInfoReq getDefaultInstanceForType() {
                return IMGroupUserInfoReq.getDefaultInstance();
            }

            public IMGroupUserInfoReq build() {
                IMGroupUserInfoReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupUserInfoReq buildPartial() {
                int i = 1;
                IMGroupUserInfoReq iMGroupUserInfoReq = new IMGroupUserInfoReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupUserInfoReq.userId_ = this.userId_;
                if ((this.bitField0_ & 2) == 2) {
                    this.groupIdList_ = Collections.unmodifiableList(this.groupIdList_);
                    this.bitField0_ &= -3;
                }
                iMGroupUserInfoReq.groupIdList_ = this.groupIdList_;
                if ((i2 & 4) == 4) {
                    i |= 2;
                }
                iMGroupUserInfoReq.userHandle_ = this.userHandle_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMGroupUserInfoReq.attachData_ = this.attachData_;
                iMGroupUserInfoReq.bitField0_ = i;
                return iMGroupUserInfoReq;
            }

            public Builder mergeFrom(IMGroupUserInfoReq iMGroupUserInfoReq) {
                if (iMGroupUserInfoReq != IMGroupUserInfoReq.getDefaultInstance()) {
                    if (iMGroupUserInfoReq.hasUserId()) {
                        setUserId(iMGroupUserInfoReq.getUserId());
                    }
                    if (!iMGroupUserInfoReq.groupIdList_.isEmpty()) {
                        if (this.groupIdList_.isEmpty()) {
                            this.groupIdList_ = iMGroupUserInfoReq.groupIdList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureGroupIdListIsMutable();
                            this.groupIdList_.addAll(iMGroupUserInfoReq.groupIdList_);
                        }
                    }
                    if (iMGroupUserInfoReq.hasUserHandle()) {
                        setUserHandle(iMGroupUserInfoReq.getUserHandle());
                    }
                    if (iMGroupUserInfoReq.hasAttachData()) {
                        setAttachData(iMGroupUserInfoReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupUserInfoReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupUserInfoReq iMGroupUserInfoReq;
                IMGroupUserInfoReq iMGroupUserInfoReq2;
                try {
                    IMGroupUserInfoReq iMGroupUserInfoReq3 = (IMGroupUserInfoReq) IMGroupUserInfoReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupUserInfoReq3 != null) {
                        mergeFrom(iMGroupUserInfoReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupUserInfoReq2 = (IMGroupUserInfoReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupUserInfoReq = iMGroupUserInfoReq2;
                    th = th2;
                }
                if (iMGroupUserInfoReq != null) {
                    mergeFrom(iMGroupUserInfoReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            private void ensureGroupIdListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.groupIdList_ = new ArrayList(this.groupIdList_);
                    this.bitField0_ |= 2;
                }
            }

            public List<Integer> getGroupIdListList() {
                return Collections.unmodifiableList(this.groupIdList_);
            }

            public int getGroupIdListCount() {
                return this.groupIdList_.size();
            }

            public int getGroupIdList(int i) {
                return ((Integer) this.groupIdList_.get(i)).intValue();
            }

            public Builder setGroupIdList(int i, int i2) {
                ensureGroupIdListIsMutable();
                this.groupIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addGroupIdList(int i) {
                ensureGroupIdListIsMutable();
                this.groupIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllGroupIdList(Iterable<? extends Integer> iterable) {
                ensureGroupIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupIdList_);
                return this;
            }

            public Builder clearGroupIdList() {
                this.groupIdList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 4;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMGroupUserInfoReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupUserInfoReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupUserInfoReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupUserInfoReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupUserInfoReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupUserInfoReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            if (!(z2 & true)) {
                                this.groupIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 18:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.groupIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.groupIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 24:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupIdList_ = Collections.unmodifiableList(this.groupIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupIdList_ = Collections.unmodifiableList(this.groupIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupUserInfoReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public List<Integer> getGroupIdListList() {
            return this.groupIdList_;
        }

        public int getGroupIdListCount() {
            return this.groupIdList_.size();
        }

        public int getGroupIdList(int i) {
            return ((Integer) this.groupIdList_.get(i)).intValue();
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupIdList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(2, ((Integer) this.groupIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2 = 0;
            int i3 = this.memoizedSerializedSize;
            if (i3 != -1) {
                return i3;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            int i4 = 0;
            while (i2 < this.groupIdList_.size()) {
                i2++;
                i4 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.groupIdList_.get(i2)).intValue()) + i4;
            }
            int size = i + i4 + (getGroupIdListList().size() * 1);
            if ((this.bitField0_ & 2) == 2) {
                size += CodedOutputStream.computeUInt32Size(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupUserInfoReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(byteString);
        }

        public static IMGroupUserInfoReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupUserInfoReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(bArr);
        }

        public static IMGroupUserInfoReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupUserInfoReq parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(inputStream);
        }

        public static IMGroupUserInfoReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUserInfoReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupUserInfoReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUserInfoReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupUserInfoReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupUserInfoReq iMGroupUserInfoReq) {
            return newBuilder().mergeFrom(iMGroupUserInfoReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupUserInfoReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupIdList(int i);

        int getGroupIdListCount();

        List<Integer> getGroupIdListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMGroupUserInfoRsp extends GeneratedMessageLite implements IMGroupUserInfoRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_USERINFO_LIST_FIELD_NUMBER = 3;
        public static Parser<IMGroupUserInfoRsp> PARSER = new AbstractParser<IMGroupUserInfoRsp>() {
            public IMGroupUserInfoRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMGroupUserInfoRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMGroupUserInfoRsp defaultInstance = new IMGroupUserInfoRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<GroupUserInfo> groupUserinfoList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMGroupUserInfoRsp, Builder> implements IMGroupUserInfoRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<GroupUserInfo> groupUserinfoList_ = Collections.emptyList();
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMGroupUserInfoRsp getDefaultInstanceForType() {
                return IMGroupUserInfoRsp.getDefaultInstance();
            }

            public IMGroupUserInfoRsp build() {
                IMGroupUserInfoRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMGroupUserInfoRsp buildPartial() {
                int i = 1;
                IMGroupUserInfoRsp iMGroupUserInfoRsp = new IMGroupUserInfoRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMGroupUserInfoRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMGroupUserInfoRsp.resultCode_ = this.resultCode_;
                if ((this.bitField0_ & 4) == 4) {
                    this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    this.bitField0_ &= -5;
                }
                iMGroupUserInfoRsp.groupUserinfoList_ = this.groupUserinfoList_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMGroupUserInfoRsp.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 8;
                }
                iMGroupUserInfoRsp.attachData_ = this.attachData_;
                iMGroupUserInfoRsp.bitField0_ = i;
                return iMGroupUserInfoRsp;
            }

            public Builder mergeFrom(IMGroupUserInfoRsp iMGroupUserInfoRsp) {
                if (iMGroupUserInfoRsp != IMGroupUserInfoRsp.getDefaultInstance()) {
                    if (iMGroupUserInfoRsp.hasUserId()) {
                        setUserId(iMGroupUserInfoRsp.getUserId());
                    }
                    if (iMGroupUserInfoRsp.hasResultCode()) {
                        setResultCode(iMGroupUserInfoRsp.getResultCode());
                    }
                    if (!iMGroupUserInfoRsp.groupUserinfoList_.isEmpty()) {
                        if (this.groupUserinfoList_.isEmpty()) {
                            this.groupUserinfoList_ = iMGroupUserInfoRsp.groupUserinfoList_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureGroupUserinfoListIsMutable();
                            this.groupUserinfoList_.addAll(iMGroupUserInfoRsp.groupUserinfoList_);
                        }
                    }
                    if (iMGroupUserInfoRsp.hasUserHandle()) {
                        setUserHandle(iMGroupUserInfoRsp.getUserHandle());
                    }
                    if (iMGroupUserInfoRsp.hasAttachData()) {
                        setAttachData(iMGroupUserInfoRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMGroupUserInfoRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasResultCode()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMGroupUserInfoRsp iMGroupUserInfoRsp;
                IMGroupUserInfoRsp iMGroupUserInfoRsp2;
                try {
                    IMGroupUserInfoRsp iMGroupUserInfoRsp3 = (IMGroupUserInfoRsp) IMGroupUserInfoRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMGroupUserInfoRsp3 != null) {
                        mergeFrom(iMGroupUserInfoRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMGroupUserInfoRsp2 = (IMGroupUserInfoRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMGroupUserInfoRsp = iMGroupUserInfoRsp2;
                    th = th2;
                }
                if (iMGroupUserInfoRsp != null) {
                    mergeFrom(iMGroupUserInfoRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            private void ensureGroupUserinfoListIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.groupUserinfoList_ = new ArrayList(this.groupUserinfoList_);
                    this.bitField0_ |= 4;
                }
            }

            public List<GroupUserInfo> getGroupUserinfoListList() {
                return Collections.unmodifiableList(this.groupUserinfoList_);
            }

            public int getGroupUserinfoListCount() {
                return this.groupUserinfoList_.size();
            }

            public GroupUserInfo getGroupUserinfoList(int i) {
                return (GroupUserInfo) this.groupUserinfoList_.get(i);
            }

            public Builder setGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, groupUserInfo);
                return this;
            }

            public Builder setGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(int i, GroupUserInfo groupUserInfo) {
                if (groupUserInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, groupUserInfo);
                return this;
            }

            public Builder addGroupUserinfoList(com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(builder.build());
                return this;
            }

            public Builder addGroupUserinfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupUserInfo.Builder builder) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupUserinfoList(Iterable<? extends GroupUserInfo> iterable) {
                ensureGroupUserinfoListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupUserinfoList_);
                return this;
            }

            public Builder clearGroupUserinfoList() {
                this.groupUserinfoList_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeGroupUserinfoList(int i) {
                ensureGroupUserinfoListIsMutable();
                this.groupUserinfoList_.remove(i);
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMGroupUserInfoRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMGroupUserInfoRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMGroupUserInfoRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMGroupUserInfoRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMGroupUserInfoRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMGroupUserInfoRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            if (!(z2 & true)) {
                                this.groupUserinfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupUserinfoList_.add(codedInputStream.readMessage(GroupUserInfo.PARSER, extensionRegistryLite));
                            break;
                        case 32:
                            this.bitField0_ |= 4;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 8;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupUserinfoList_ = Collections.unmodifiableList(this.groupUserinfoList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMGroupUserInfoRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public List<GroupUserInfo> getGroupUserinfoListList() {
            return this.groupUserinfoList_;
        }

        public List<? extends GroupUserInfoOrBuilder> getGroupUserinfoListOrBuilderList() {
            return this.groupUserinfoList_;
        }

        public int getGroupUserinfoListCount() {
            return this.groupUserinfoList_.size();
        }

        public GroupUserInfo getGroupUserinfoList(int i) {
            return (GroupUserInfo) this.groupUserinfoList_.get(i);
        }

        public GroupUserInfoOrBuilder getGroupUserinfoListOrBuilder(int i) {
            return (GroupUserInfoOrBuilder) this.groupUserinfoList_.get(i);
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 8) == 8;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.resultCode_ = 0;
            this.groupUserinfoList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupUserinfoList_.size()) {
                    break;
                }
                codedOutputStream.writeMessage(3, (MessageLite) this.groupUserinfoList_.get(i2));
                i = i2 + 1;
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            while (true) {
                i2 = i;
                if (i3 >= this.groupUserinfoList_.size()) {
                    break;
                }
                i = CodedOutputStream.computeMessageSize(3, (MessageLite) this.groupUserinfoList_.get(i3)) + i2;
                i3++;
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = this.unknownFields.size() + i2;
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMGroupUserInfoRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(byteString);
        }

        public static IMGroupUserInfoRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMGroupUserInfoRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(bArr);
        }

        public static IMGroupUserInfoRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMGroupUserInfoRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(inputStream);
        }

        public static IMGroupUserInfoRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUserInfoRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMGroupUserInfoRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMGroupUserInfoRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMGroupUserInfoRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMGroupUserInfoRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMGroupUserInfoRsp iMGroupUserInfoRsp) {
            return newBuilder().mergeFrom(iMGroupUserInfoRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMGroupUserInfoRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupUserInfo getGroupUserinfoList(int i);

        int getGroupUserinfoListCount();

        List<GroupUserInfo> getGroupUserinfoListList();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMInviteUserJoinGroupReq extends GeneratedMessageLite implements IMInviteUserJoinGroupReqOrBuilder {
        public static final int GROUP_ID_FIELD_NUMBER = 4;
        public static final int GROUP_NAME_FIELD_NUMBER = 5;
        public static final int INVITEE_UID_LIST_FIELD_NUMBER = 6;
        public static final int INVITE_USER_ID_FIELD_NUMBER = 3;
        public static Parser<IMInviteUserJoinGroupReq> PARSER = new AbstractParser<IMInviteUserJoinGroupReq>() {
            public IMInviteUserJoinGroupReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_HANDLE_FIELD_NUMBER = 7;
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int REQ_USER_NAME_FIELD_NUMBER = 2;
        private static final IMInviteUserJoinGroupReq defaultInstance = new IMInviteUserJoinGroupReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int inviteUserId_;
        /* access modifiers changed from: private */
        public List<Integer> inviteeUidList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserHandle_;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public Object reqUserName_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupReq, Builder> implements IMInviteUserJoinGroupReqOrBuilder {
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int inviteUserId_;
            private List<Integer> inviteeUidList_ = Collections.emptyList();
            private int reqUserHandle_;
            private int reqUserId_;
            private Object reqUserName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.reqUserName_ = "";
                this.bitField0_ &= -3;
                this.inviteUserId_ = 0;
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                this.bitField0_ &= -9;
                this.groupName_ = "";
                this.bitField0_ &= -17;
                this.inviteeUidList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                this.reqUserHandle_ = 0;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupReq getDefaultInstanceForType() {
                return IMInviteUserJoinGroupReq.getDefaultInstance();
            }

            public IMInviteUserJoinGroupReq build() {
                IMInviteUserJoinGroupReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupReq buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq = new IMInviteUserJoinGroupReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupReq.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupReq.reqUserName_ = this.reqUserName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMInviteUserJoinGroupReq.inviteUserId_ = this.inviteUserId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMInviteUserJoinGroupReq.groupId_ = this.groupId_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMInviteUserJoinGroupReq.groupName_ = this.groupName_;
                if ((this.bitField0_ & 32) == 32) {
                    this.inviteeUidList_ = Collections.unmodifiableList(this.inviteeUidList_);
                    this.bitField0_ &= -33;
                }
                iMInviteUserJoinGroupReq.inviteeUidList_ = this.inviteeUidList_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMInviteUserJoinGroupReq.reqUserHandle_ = this.reqUserHandle_;
                iMInviteUserJoinGroupReq.bitField0_ = i;
                return iMInviteUserJoinGroupReq;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq) {
                if (iMInviteUserJoinGroupReq != IMInviteUserJoinGroupReq.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupReq.hasReqUserId()) {
                        setReqUserId(iMInviteUserJoinGroupReq.getReqUserId());
                    }
                    if (iMInviteUserJoinGroupReq.hasReqUserName()) {
                        this.bitField0_ |= 2;
                        this.reqUserName_ = iMInviteUserJoinGroupReq.reqUserName_;
                    }
                    if (iMInviteUserJoinGroupReq.hasInviteUserId()) {
                        setInviteUserId(iMInviteUserJoinGroupReq.getInviteUserId());
                    }
                    if (iMInviteUserJoinGroupReq.hasGroupId()) {
                        setGroupId(iMInviteUserJoinGroupReq.getGroupId());
                    }
                    if (iMInviteUserJoinGroupReq.hasGroupName()) {
                        this.bitField0_ |= 16;
                        this.groupName_ = iMInviteUserJoinGroupReq.groupName_;
                    }
                    if (!iMInviteUserJoinGroupReq.inviteeUidList_.isEmpty()) {
                        if (this.inviteeUidList_.isEmpty()) {
                            this.inviteeUidList_ = iMInviteUserJoinGroupReq.inviteeUidList_;
                            this.bitField0_ &= -33;
                        } else {
                            ensureInviteeUidListIsMutable();
                            this.inviteeUidList_.addAll(iMInviteUserJoinGroupReq.inviteeUidList_);
                        }
                    }
                    if (iMInviteUserJoinGroupReq.hasReqUserHandle()) {
                        setReqUserHandle(iMInviteUserJoinGroupReq.getReqUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasReqUserName() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq;
                IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq2;
                try {
                    IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq3 = (IMInviteUserJoinGroupReq) IMInviteUserJoinGroupReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupReq3 != null) {
                        mergeFrom(iMInviteUserJoinGroupReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupReq2 = (IMInviteUserJoinGroupReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupReq = iMInviteUserJoinGroupReq2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupReq != null) {
                    mergeFrom(iMInviteUserJoinGroupReq);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasReqUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getReqUserName() {
                Object obj = this.reqUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.reqUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getReqUserNameBytes() {
                Object obj = this.reqUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.reqUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setReqUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = str;
                return this;
            }

            public Builder clearReqUserName() {
                this.bitField0_ &= -3;
                this.reqUserName_ = IMInviteUserJoinGroupReq.getDefaultInstance().getReqUserName();
                return this;
            }

            public Builder setReqUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = byteString;
                return this;
            }

            public boolean hasInviteUserId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getInviteUserId() {
                return this.inviteUserId_;
            }

            public Builder setInviteUserId(int i) {
                this.bitField0_ |= 4;
                this.inviteUserId_ = i;
                return this;
            }

            public Builder clearInviteUserId() {
                this.bitField0_ &= -5;
                this.inviteUserId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 8;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -9;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -17;
                this.groupName_ = IMInviteUserJoinGroupReq.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupName_ = byteString;
                return this;
            }

            private void ensureInviteeUidListIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.inviteeUidList_ = new ArrayList(this.inviteeUidList_);
                    this.bitField0_ |= 32;
                }
            }

            public List<Integer> getInviteeUidListList() {
                return Collections.unmodifiableList(this.inviteeUidList_);
            }

            public int getInviteeUidListCount() {
                return this.inviteeUidList_.size();
            }

            public int getInviteeUidList(int i) {
                return ((Integer) this.inviteeUidList_.get(i)).intValue();
            }

            public Builder setInviteeUidList(int i, int i2) {
                ensureInviteeUidListIsMutable();
                this.inviteeUidList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addInviteeUidList(int i) {
                ensureInviteeUidListIsMutable();
                this.inviteeUidList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllInviteeUidList(Iterable<? extends Integer> iterable) {
                ensureInviteeUidListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.inviteeUidList_);
                return this;
            }

            public Builder clearInviteeUidList() {
                this.inviteeUidList_ = Collections.emptyList();
                this.bitField0_ &= -33;
                return this;
            }

            public boolean hasReqUserHandle() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getReqUserHandle() {
                return this.reqUserHandle_;
            }

            public Builder setReqUserHandle(int i) {
                this.bitField0_ |= 64;
                this.reqUserHandle_ = i;
                return this;
            }

            public Builder clearReqUserHandle() {
                this.bitField0_ &= -65;
                this.reqUserHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.reqUserName_ = readBytes;
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.inviteUserId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 42:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.groupName_ = readBytes2;
                            break;
                        case 48:
                            if (!(z2 & true)) {
                                this.inviteeUidList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.inviteeUidList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 50:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.inviteeUidList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.inviteeUidList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 56:
                            this.bitField0_ |= 32;
                            this.reqUserHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.inviteeUidList_ = Collections.unmodifiableList(this.inviteeUidList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.inviteeUidList_ = Collections.unmodifiableList(this.inviteeUidList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupReq> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasReqUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getReqUserName() {
            Object obj = this.reqUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.reqUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getReqUserNameBytes() {
            Object obj = this.reqUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasInviteUserId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getInviteUserId() {
            return this.inviteUserId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public List<Integer> getInviteeUidListList() {
            return this.inviteeUidList_;
        }

        public int getInviteeUidListCount() {
            return this.inviteeUidList_.size();
        }

        public int getInviteeUidList(int i) {
            return ((Integer) this.inviteeUidList_.get(i)).intValue();
        }

        public boolean hasReqUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getReqUserHandle() {
            return this.reqUserHandle_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.reqUserName_ = "";
            this.inviteUserId_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.inviteeUidList_ = Collections.emptyList();
            this.reqUserHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.inviteUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.groupId_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getGroupNameBytes());
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.inviteeUidList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(6, ((Integer) this.inviteeUidList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(7, this.reqUserHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.reqUserId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeBytesSize(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeUInt32Size(3, this.inviteUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i += CodedOutputStream.computeUInt32Size(4, this.groupId_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 = i + CodedOutputStream.computeBytesSize(5, getGroupNameBytes());
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.inviteeUidList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.inviteeUidList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getInviteeUidListList().size() * 1);
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeUInt32Size(7, this.reqUserHandle_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReq parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupReq iMInviteUserJoinGroupReq) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public static final class IMInviteUserJoinGroupReqAck extends GeneratedMessageLite implements IMInviteUserJoinGroupReqAckOrBuilder {
        public static Parser<IMInviteUserJoinGroupReqAck> PARSER = new AbstractParser<IMInviteUserJoinGroupReqAck>() {
            public IMInviteUserJoinGroupReqAck parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupReqAck(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 1;
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        private static final IMInviteUserJoinGroupReqAck defaultInstance = new IMInviteUserJoinGroupReqAck(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupReqAck, Builder> implements IMInviteUserJoinGroupReqAckOrBuilder {
            private int bitField0_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.resultCode_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupReqAck getDefaultInstanceForType() {
                return IMInviteUserJoinGroupReqAck.getDefaultInstance();
            }

            public IMInviteUserJoinGroupReqAck build() {
                IMInviteUserJoinGroupReqAck buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupReqAck buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck = new IMInviteUserJoinGroupReqAck((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupReqAck.resultCode_ = this.resultCode_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupReqAck.userHandle_ = this.userHandle_;
                iMInviteUserJoinGroupReqAck.bitField0_ = i;
                return iMInviteUserJoinGroupReqAck;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck) {
                if (iMInviteUserJoinGroupReqAck != IMInviteUserJoinGroupReqAck.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupReqAck.hasResultCode()) {
                        setResultCode(iMInviteUserJoinGroupReqAck.getResultCode());
                    }
                    if (iMInviteUserJoinGroupReqAck.hasUserHandle()) {
                        setUserHandle(iMInviteUserJoinGroupReqAck.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupReqAck.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResultCode()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck;
                IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck2;
                try {
                    IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck3 = (IMInviteUserJoinGroupReqAck) IMInviteUserJoinGroupReqAck.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupReqAck3 != null) {
                        mergeFrom(iMInviteUserJoinGroupReqAck3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupReqAck2 = (IMInviteUserJoinGroupReqAck) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupReqAck = iMInviteUserJoinGroupReqAck2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupReqAck != null) {
                    mergeFrom(iMInviteUserJoinGroupReqAck);
                }
                throw th;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 1;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupReqAck(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupReqAck(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupReqAck getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupReqAck getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupReqAck(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupReqAck> getParserForType() {
            return PARSER;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.resultCode_ = 0;
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqAck parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReqAck parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupReqAck parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqAck) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupReqAck iMInviteUserJoinGroupReqAck) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupReqAck);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMInviteUserJoinGroupReqAckOrBuilder extends MessageLiteOrBuilder {
        int getResultCode();

        int getUserHandle();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMInviteUserJoinGroupReqNotify extends GeneratedMessageLite implements IMInviteUserJoinGroupReqNotifyOrBuilder {
        public static final int GROUP_ID_FIELD_NUMBER = 4;
        public static final int GROUP_NAME_FIELD_NUMBER = 5;
        public static final int INVITE_USER_ID_FIELD_NUMBER = 3;
        public static Parser<IMInviteUserJoinGroupReqNotify> PARSER = new AbstractParser<IMInviteUserJoinGroupReqNotify>() {
            public IMInviteUserJoinGroupReqNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupReqNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_HANDLE_FIELD_NUMBER = 6;
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int REQ_USER_NAME_FIELD_NUMBER = 2;
        private static final IMInviteUserJoinGroupReqNotify defaultInstance = new IMInviteUserJoinGroupReqNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int inviteUserId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserHandle_;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public Object reqUserName_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupReqNotify, Builder> implements IMInviteUserJoinGroupReqNotifyOrBuilder {
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int inviteUserId_;
            private int reqUserHandle_;
            private int reqUserId_;
            private Object reqUserName_ = "";

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.reqUserName_ = "";
                this.bitField0_ &= -3;
                this.inviteUserId_ = 0;
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                this.bitField0_ &= -9;
                this.groupName_ = "";
                this.bitField0_ &= -17;
                this.reqUserHandle_ = 0;
                this.bitField0_ &= -33;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupReqNotify getDefaultInstanceForType() {
                return IMInviteUserJoinGroupReqNotify.getDefaultInstance();
            }

            public IMInviteUserJoinGroupReqNotify build() {
                IMInviteUserJoinGroupReqNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupReqNotify buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify = new IMInviteUserJoinGroupReqNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupReqNotify.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupReqNotify.reqUserName_ = this.reqUserName_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMInviteUserJoinGroupReqNotify.inviteUserId_ = this.inviteUserId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMInviteUserJoinGroupReqNotify.groupId_ = this.groupId_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMInviteUserJoinGroupReqNotify.groupName_ = this.groupName_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMInviteUserJoinGroupReqNotify.reqUserHandle_ = this.reqUserHandle_;
                iMInviteUserJoinGroupReqNotify.bitField0_ = i;
                return iMInviteUserJoinGroupReqNotify;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify) {
                if (iMInviteUserJoinGroupReqNotify != IMInviteUserJoinGroupReqNotify.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupReqNotify.hasReqUserId()) {
                        setReqUserId(iMInviteUserJoinGroupReqNotify.getReqUserId());
                    }
                    if (iMInviteUserJoinGroupReqNotify.hasReqUserName()) {
                        this.bitField0_ |= 2;
                        this.reqUserName_ = iMInviteUserJoinGroupReqNotify.reqUserName_;
                    }
                    if (iMInviteUserJoinGroupReqNotify.hasInviteUserId()) {
                        setInviteUserId(iMInviteUserJoinGroupReqNotify.getInviteUserId());
                    }
                    if (iMInviteUserJoinGroupReqNotify.hasGroupId()) {
                        setGroupId(iMInviteUserJoinGroupReqNotify.getGroupId());
                    }
                    if (iMInviteUserJoinGroupReqNotify.hasGroupName()) {
                        this.bitField0_ |= 16;
                        this.groupName_ = iMInviteUserJoinGroupReqNotify.groupName_;
                    }
                    if (iMInviteUserJoinGroupReqNotify.hasReqUserHandle()) {
                        setReqUserHandle(iMInviteUserJoinGroupReqNotify.getReqUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupReqNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasReqUserName() && hasInviteUserId() && hasGroupId()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify;
                IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify2;
                try {
                    IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify3 = (IMInviteUserJoinGroupReqNotify) IMInviteUserJoinGroupReqNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupReqNotify3 != null) {
                        mergeFrom(iMInviteUserJoinGroupReqNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupReqNotify2 = (IMInviteUserJoinGroupReqNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupReqNotify = iMInviteUserJoinGroupReqNotify2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupReqNotify != null) {
                    mergeFrom(iMInviteUserJoinGroupReqNotify);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasReqUserName() {
                return (this.bitField0_ & 2) == 2;
            }

            public String getReqUserName() {
                Object obj = this.reqUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.reqUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getReqUserNameBytes() {
                Object obj = this.reqUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.reqUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setReqUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = str;
                return this;
            }

            public Builder clearReqUserName() {
                this.bitField0_ &= -3;
                this.reqUserName_ = IMInviteUserJoinGroupReqNotify.getDefaultInstance().getReqUserName();
                return this;
            }

            public Builder setReqUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                this.reqUserName_ = byteString;
                return this;
            }

            public boolean hasInviteUserId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getInviteUserId() {
                return this.inviteUserId_;
            }

            public Builder setInviteUserId(int i) {
                this.bitField0_ |= 4;
                this.inviteUserId_ = i;
                return this;
            }

            public Builder clearInviteUserId() {
                this.bitField0_ &= -5;
                this.inviteUserId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 8;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -9;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 16) == 16;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -17;
                this.groupName_ = IMInviteUserJoinGroupReqNotify.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasReqUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getReqUserHandle() {
                return this.reqUserHandle_;
            }

            public Builder setReqUserHandle(int i) {
                this.bitField0_ |= 32;
                this.reqUserHandle_ = i;
                return this;
            }

            public Builder clearReqUserHandle() {
                this.bitField0_ &= -33;
                this.reqUserHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupReqNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupReqNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupReqNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupReqNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupReqNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 2;
                            this.reqUserName_ = readBytes;
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.inviteUserId_ = codedInputStream.readUInt32();
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 42:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 16;
                            this.groupName_ = readBytes2;
                            break;
                        case 48:
                            this.bitField0_ |= 32;
                            this.reqUserHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupReqNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasReqUserName() {
            return (this.bitField0_ & 2) == 2;
        }

        public String getReqUserName() {
            Object obj = this.reqUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.reqUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getReqUserNameBytes() {
            Object obj = this.reqUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.reqUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasInviteUserId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getInviteUserId() {
            return this.inviteUserId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 16) == 16;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasReqUserHandle() {
            return (this.bitField0_ & 32) == 32;
        }

        public int getReqUserHandle() {
            return this.reqUserHandle_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.reqUserName_ = "";
            this.inviteUserId_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.reqUserHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasReqUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasInviteUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.inviteUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.groupId_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeUInt32(6, this.reqUserHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getReqUserNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.inviteUserId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.groupId_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getGroupNameBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeUInt32Size(6, this.reqUserHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupReqNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupReqNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupReqNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupReqNotify iMInviteUserJoinGroupReqNotify) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupReqNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMInviteUserJoinGroupReqNotifyOrBuilder extends MessageLiteOrBuilder {
        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getInviteUserId();

        int getReqUserHandle();

        int getReqUserId();

        String getReqUserName();

        ByteString getReqUserNameBytes();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasInviteUserId();

        boolean hasReqUserHandle();

        boolean hasReqUserId();

        boolean hasReqUserName();
    }

    public interface IMInviteUserJoinGroupReqOrBuilder extends MessageLiteOrBuilder {
        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getInviteUserId();

        int getInviteeUidList(int i);

        int getInviteeUidListCount();

        List<Integer> getInviteeUidListList();

        int getReqUserHandle();

        int getReqUserId();

        String getReqUserName();

        ByteString getReqUserNameBytes();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasInviteUserId();

        boolean hasReqUserHandle();

        boolean hasReqUserId();

        boolean hasReqUserName();
    }

    public static final class IMInviteUserJoinGroupRsp extends GeneratedMessageLite implements IMInviteUserJoinGroupRspOrBuilder {
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static final int INVITE_USER_ID_FIELD_NUMBER = 5;
        public static final int INVITE_USER_NAME_FIELD_NUMBER = 6;
        public static Parser<IMInviteUserJoinGroupRsp> PARSER = new AbstractParser<IMInviteUserJoinGroupRsp>() {
            public IMInviteUserJoinGroupRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 7;
        private static final IMInviteUserJoinGroupRsp defaultInstance = new IMInviteUserJoinGroupRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int inviteUserId_;
        /* access modifiers changed from: private */
        public Object inviteUserName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupRsp, Builder> implements IMInviteUserJoinGroupRspOrBuilder {
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int inviteUserId_;
            private Object inviteUserName_ = "";
            private int reqUserId_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.inviteUserId_ = 0;
                this.bitField0_ &= -17;
                this.inviteUserName_ = "";
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupRsp getDefaultInstanceForType() {
                return IMInviteUserJoinGroupRsp.getDefaultInstance();
            }

            public IMInviteUserJoinGroupRsp build() {
                IMInviteUserJoinGroupRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupRsp buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp = new IMInviteUserJoinGroupRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupRsp.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupRsp.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMInviteUserJoinGroupRsp.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMInviteUserJoinGroupRsp.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMInviteUserJoinGroupRsp.inviteUserId_ = this.inviteUserId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMInviteUserJoinGroupRsp.inviteUserName_ = this.inviteUserName_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMInviteUserJoinGroupRsp.userHandle_ = this.userHandle_;
                iMInviteUserJoinGroupRsp.bitField0_ = i;
                return iMInviteUserJoinGroupRsp;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp) {
                if (iMInviteUserJoinGroupRsp != IMInviteUserJoinGroupRsp.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupRsp.hasReqUserId()) {
                        setReqUserId(iMInviteUserJoinGroupRsp.getReqUserId());
                    }
                    if (iMInviteUserJoinGroupRsp.hasResultCode()) {
                        setResultCode(iMInviteUserJoinGroupRsp.getResultCode());
                    }
                    if (iMInviteUserJoinGroupRsp.hasGroupId()) {
                        setGroupId(iMInviteUserJoinGroupRsp.getGroupId());
                    }
                    if (iMInviteUserJoinGroupRsp.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMInviteUserJoinGroupRsp.groupName_;
                    }
                    if (iMInviteUserJoinGroupRsp.hasInviteUserId()) {
                        setInviteUserId(iMInviteUserJoinGroupRsp.getInviteUserId());
                    }
                    if (iMInviteUserJoinGroupRsp.hasInviteUserName()) {
                        this.bitField0_ |= 32;
                        this.inviteUserName_ = iMInviteUserJoinGroupRsp.inviteUserName_;
                    }
                    if (iMInviteUserJoinGroupRsp.hasUserHandle()) {
                        setUserHandle(iMInviteUserJoinGroupRsp.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasResultCode() && hasGroupId() && hasGroupName() && hasInviteUserId() && hasInviteUserName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp;
                IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp2;
                try {
                    IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp3 = (IMInviteUserJoinGroupRsp) IMInviteUserJoinGroupRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupRsp3 != null) {
                        mergeFrom(iMInviteUserJoinGroupRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupRsp2 = (IMInviteUserJoinGroupRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupRsp = iMInviteUserJoinGroupRsp2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupRsp != null) {
                    mergeFrom(iMInviteUserJoinGroupRsp);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMInviteUserJoinGroupRsp.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasInviteUserId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getInviteUserId() {
                return this.inviteUserId_;
            }

            public Builder setInviteUserId(int i) {
                this.bitField0_ |= 16;
                this.inviteUserId_ = i;
                return this;
            }

            public Builder clearInviteUserId() {
                this.bitField0_ &= -17;
                this.inviteUserId_ = 0;
                return this;
            }

            public boolean hasInviteUserName() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getInviteUserName() {
                Object obj = this.inviteUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.inviteUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getInviteUserNameBytes() {
                Object obj = this.inviteUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.inviteUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setInviteUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.inviteUserName_ = str;
                return this;
            }

            public Builder clearInviteUserName() {
                this.bitField0_ &= -33;
                this.inviteUserName_ = IMInviteUserJoinGroupRsp.getDefaultInstance().getInviteUserName();
                return this;
            }

            public Builder setInviteUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.inviteUserName_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 64;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.inviteUserId_ = codedInputStream.readUInt32();
                            break;
                        case 50:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 32;
                            this.inviteUserName_ = readBytes2;
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasInviteUserId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getInviteUserId() {
            return this.inviteUserId_;
        }

        public boolean hasInviteUserName() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getInviteUserName() {
            Object obj = this.inviteUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.inviteUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getInviteUserNameBytes() {
            Object obj = this.inviteUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.inviteUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.inviteUserId_ = 0;
            this.inviteUserName_ = "";
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasInviteUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasInviteUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.inviteUserId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getInviteUserNameBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeUInt32(7, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.inviteUserId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getInviteUserNameBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeUInt32Size(7, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupRsp iMInviteUserJoinGroupRsp) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public static final class IMInviteUserJoinGroupRspAck extends GeneratedMessageLite implements IMInviteUserJoinGroupRspAckOrBuilder {
        public static Parser<IMInviteUserJoinGroupRspAck> PARSER = new AbstractParser<IMInviteUserJoinGroupRspAck>() {
            public IMInviteUserJoinGroupRspAck parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupRspAck(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 1;
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        private static final IMInviteUserJoinGroupRspAck defaultInstance = new IMInviteUserJoinGroupRspAck(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupRspAck, Builder> implements IMInviteUserJoinGroupRspAckOrBuilder {
            private int bitField0_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.resultCode_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupRspAck getDefaultInstanceForType() {
                return IMInviteUserJoinGroupRspAck.getDefaultInstance();
            }

            public IMInviteUserJoinGroupRspAck build() {
                IMInviteUserJoinGroupRspAck buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupRspAck buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck = new IMInviteUserJoinGroupRspAck((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupRspAck.resultCode_ = this.resultCode_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupRspAck.userHandle_ = this.userHandle_;
                iMInviteUserJoinGroupRspAck.bitField0_ = i;
                return iMInviteUserJoinGroupRspAck;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck) {
                if (iMInviteUserJoinGroupRspAck != IMInviteUserJoinGroupRspAck.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupRspAck.hasResultCode()) {
                        setResultCode(iMInviteUserJoinGroupRspAck.getResultCode());
                    }
                    if (iMInviteUserJoinGroupRspAck.hasUserHandle()) {
                        setUserHandle(iMInviteUserJoinGroupRspAck.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupRspAck.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResultCode()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck;
                IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck2;
                try {
                    IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck3 = (IMInviteUserJoinGroupRspAck) IMInviteUserJoinGroupRspAck.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupRspAck3 != null) {
                        mergeFrom(iMInviteUserJoinGroupRspAck3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupRspAck2 = (IMInviteUserJoinGroupRspAck) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupRspAck = iMInviteUserJoinGroupRspAck2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupRspAck != null) {
                    mergeFrom(iMInviteUserJoinGroupRspAck);
                }
                throw th;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 1;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupRspAck(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupRspAck(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupRspAck getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupRspAck getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupRspAck(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupRspAck> getParserForType() {
            return PARSER;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.resultCode_ = 0;
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.resultCode_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspAck parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRspAck parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupRspAck parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspAck) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupRspAck iMInviteUserJoinGroupRspAck) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupRspAck);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMInviteUserJoinGroupRspAckOrBuilder extends MessageLiteOrBuilder {
        int getResultCode();

        int getUserHandle();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMInviteUserJoinGroupRspNotify extends GeneratedMessageLite implements IMInviteUserJoinGroupRspNotifyOrBuilder {
        public static final int GROUP_ID_FIELD_NUMBER = 3;
        public static final int GROUP_NAME_FIELD_NUMBER = 4;
        public static final int INVITE_USER_ID_FIELD_NUMBER = 5;
        public static final int INVITE_USER_NAME_FIELD_NUMBER = 6;
        public static Parser<IMInviteUserJoinGroupRspNotify> PARSER = new AbstractParser<IMInviteUserJoinGroupRspNotify>() {
            public IMInviteUserJoinGroupRspNotify parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMInviteUserJoinGroupRspNotify(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REQ_USER_ID_FIELD_NUMBER = 1;
        public static final int RESULT_CODE_FIELD_NUMBER = 2;
        public static final int USER_HANDLE_FIELD_NUMBER = 7;
        private static final IMInviteUserJoinGroupRspNotify defaultInstance = new IMInviteUserJoinGroupRspNotify(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public Object groupName_;
        /* access modifiers changed from: private */
        public int inviteUserId_;
        /* access modifiers changed from: private */
        public Object inviteUserName_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public int reqUserId_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMInviteUserJoinGroupRspNotify, Builder> implements IMInviteUserJoinGroupRspNotifyOrBuilder {
            private int bitField0_;
            private int groupId_;
            private Object groupName_ = "";
            private int inviteUserId_;
            private Object inviteUserName_ = "";
            private int reqUserId_;
            private int resultCode_;
            private int userHandle_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.reqUserId_ = 0;
                this.bitField0_ &= -2;
                this.resultCode_ = 0;
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                this.bitField0_ &= -5;
                this.groupName_ = "";
                this.bitField0_ &= -9;
                this.inviteUserId_ = 0;
                this.bitField0_ &= -17;
                this.inviteUserName_ = "";
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMInviteUserJoinGroupRspNotify getDefaultInstanceForType() {
                return IMInviteUserJoinGroupRspNotify.getDefaultInstance();
            }

            public IMInviteUserJoinGroupRspNotify build() {
                IMInviteUserJoinGroupRspNotify buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMInviteUserJoinGroupRspNotify buildPartial() {
                int i = 1;
                IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify = new IMInviteUserJoinGroupRspNotify((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMInviteUserJoinGroupRspNotify.reqUserId_ = this.reqUserId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMInviteUserJoinGroupRspNotify.resultCode_ = this.resultCode_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMInviteUserJoinGroupRspNotify.groupId_ = this.groupId_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMInviteUserJoinGroupRspNotify.groupName_ = this.groupName_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMInviteUserJoinGroupRspNotify.inviteUserId_ = this.inviteUserId_;
                if ((i2 & 32) == 32) {
                    i |= 32;
                }
                iMInviteUserJoinGroupRspNotify.inviteUserName_ = this.inviteUserName_;
                if ((i2 & 64) == 64) {
                    i |= 64;
                }
                iMInviteUserJoinGroupRspNotify.userHandle_ = this.userHandle_;
                iMInviteUserJoinGroupRspNotify.bitField0_ = i;
                return iMInviteUserJoinGroupRspNotify;
            }

            public Builder mergeFrom(IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify) {
                if (iMInviteUserJoinGroupRspNotify != IMInviteUserJoinGroupRspNotify.getDefaultInstance()) {
                    if (iMInviteUserJoinGroupRspNotify.hasReqUserId()) {
                        setReqUserId(iMInviteUserJoinGroupRspNotify.getReqUserId());
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasResultCode()) {
                        setResultCode(iMInviteUserJoinGroupRspNotify.getResultCode());
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasGroupId()) {
                        setGroupId(iMInviteUserJoinGroupRspNotify.getGroupId());
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasGroupName()) {
                        this.bitField0_ |= 8;
                        this.groupName_ = iMInviteUserJoinGroupRspNotify.groupName_;
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasInviteUserId()) {
                        setInviteUserId(iMInviteUserJoinGroupRspNotify.getInviteUserId());
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasInviteUserName()) {
                        this.bitField0_ |= 32;
                        this.inviteUserName_ = iMInviteUserJoinGroupRspNotify.inviteUserName_;
                    }
                    if (iMInviteUserJoinGroupRspNotify.hasUserHandle()) {
                        setUserHandle(iMInviteUserJoinGroupRspNotify.getUserHandle());
                    }
                    setUnknownFields(getUnknownFields().concat(iMInviteUserJoinGroupRspNotify.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasReqUserId() && hasResultCode() && hasGroupId() && hasGroupName() && hasInviteUserId() && hasInviteUserName()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify;
                IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify2;
                try {
                    IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify3 = (IMInviteUserJoinGroupRspNotify) IMInviteUserJoinGroupRspNotify.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMInviteUserJoinGroupRspNotify3 != null) {
                        mergeFrom(iMInviteUserJoinGroupRspNotify3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMInviteUserJoinGroupRspNotify2 = (IMInviteUserJoinGroupRspNotify) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMInviteUserJoinGroupRspNotify = iMInviteUserJoinGroupRspNotify2;
                    th = th2;
                }
                if (iMInviteUserJoinGroupRspNotify != null) {
                    mergeFrom(iMInviteUserJoinGroupRspNotify);
                }
                throw th;
            }

            public boolean hasReqUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getReqUserId() {
                return this.reqUserId_;
            }

            public Builder setReqUserId(int i) {
                this.bitField0_ |= 1;
                this.reqUserId_ = i;
                return this;
            }

            public Builder clearReqUserId() {
                this.bitField0_ &= -2;
                this.reqUserId_ = 0;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 2;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -3;
                this.resultCode_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 4;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -5;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasGroupName() {
                return (this.bitField0_ & 8) == 8;
            }

            public String getGroupName() {
                Object obj = this.groupName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.groupName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getGroupNameBytes() {
                Object obj = this.groupName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.groupName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setGroupName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = str;
                return this;
            }

            public Builder clearGroupName() {
                this.bitField0_ &= -9;
                this.groupName_ = IMInviteUserJoinGroupRspNotify.getDefaultInstance().getGroupName();
                return this;
            }

            public Builder setGroupNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.groupName_ = byteString;
                return this;
            }

            public boolean hasInviteUserId() {
                return (this.bitField0_ & 16) == 16;
            }

            public int getInviteUserId() {
                return this.inviteUserId_;
            }

            public Builder setInviteUserId(int i) {
                this.bitField0_ |= 16;
                this.inviteUserId_ = i;
                return this;
            }

            public Builder clearInviteUserId() {
                this.bitField0_ &= -17;
                this.inviteUserId_ = 0;
                return this;
            }

            public boolean hasInviteUserName() {
                return (this.bitField0_ & 32) == 32;
            }

            public String getInviteUserName() {
                Object obj = this.inviteUserName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.inviteUserName_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getInviteUserNameBytes() {
                Object obj = this.inviteUserName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.inviteUserName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setInviteUserName(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.inviteUserName_ = str;
                return this;
            }

            public Builder clearInviteUserName() {
                this.bitField0_ &= -33;
                this.inviteUserName_ = IMInviteUserJoinGroupRspNotify.getDefaultInstance().getInviteUserName();
                return this;
            }

            public Builder setInviteUserNameBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 32;
                this.inviteUserName_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 64) == 64;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 64;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -65;
                this.userHandle_ = 0;
                return this;
            }
        }

        private IMInviteUserJoinGroupRspNotify(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMInviteUserJoinGroupRspNotify(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMInviteUserJoinGroupRspNotify getDefaultInstance() {
            return defaultInstance;
        }

        public IMInviteUserJoinGroupRspNotify getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMInviteUserJoinGroupRspNotify(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.reqUserId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 24:
                            this.bitField0_ |= 4;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 34:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 8;
                            this.groupName_ = readBytes;
                            break;
                        case 40:
                            this.bitField0_ |= 16;
                            this.inviteUserId_ = codedInputStream.readUInt32();
                            break;
                        case 50:
                            ByteString readBytes2 = codedInputStream.readBytes();
                            this.bitField0_ |= 32;
                            this.inviteUserName_ = readBytes2;
                            break;
                        case 56:
                            this.bitField0_ |= 64;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMInviteUserJoinGroupRspNotify> getParserForType() {
            return PARSER;
        }

        public boolean hasReqUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getReqUserId() {
            return this.reqUserId_;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasGroupName() {
            return (this.bitField0_ & 8) == 8;
        }

        public String getGroupName() {
            Object obj = this.groupName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.groupName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getGroupNameBytes() {
            Object obj = this.groupName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.groupName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasInviteUserId() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getInviteUserId() {
            return this.inviteUserId_;
        }

        public boolean hasInviteUserName() {
            return (this.bitField0_ & 32) == 32;
        }

        public String getInviteUserName() {
            Object obj = this.inviteUserName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.inviteUserName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getInviteUserNameBytes() {
            Object obj = this.inviteUserName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.inviteUserName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 64) == 64;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        private void initFields() {
            this.reqUserId_ = 0;
            this.resultCode_ = 0;
            this.groupId_ = 0;
            this.groupName_ = "";
            this.inviteUserId_ = 0;
            this.inviteUserName_ = "";
            this.userHandle_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasReqUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasInviteUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasInviteUserName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(5, this.inviteUserId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getInviteUserNameBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeUInt32(7, this.userHandle_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.reqUserId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.resultCode_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.groupId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getGroupNameBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeUInt32Size(5, this.inviteUserId_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getInviteUserNameBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeUInt32Size(7, this.userHandle_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(byteString);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(bArr);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspNotify parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMInviteUserJoinGroupRspNotify parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(codedInputStream);
        }

        public static IMInviteUserJoinGroupRspNotify parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMInviteUserJoinGroupRspNotify) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMInviteUserJoinGroupRspNotify iMInviteUserJoinGroupRspNotify) {
            return newBuilder().mergeFrom(iMInviteUserJoinGroupRspNotify);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMInviteUserJoinGroupRspNotifyOrBuilder extends MessageLiteOrBuilder {
        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getInviteUserId();

        String getInviteUserName();

        ByteString getInviteUserNameBytes();

        int getReqUserId();

        int getResultCode();

        int getUserHandle();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasInviteUserId();

        boolean hasInviteUserName();

        boolean hasReqUserId();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public interface IMInviteUserJoinGroupRspOrBuilder extends MessageLiteOrBuilder {
        int getGroupId();

        String getGroupName();

        ByteString getGroupNameBytes();

        int getInviteUserId();

        String getInviteUserName();

        ByteString getInviteUserNameBytes();

        int getReqUserId();

        int getResultCode();

        int getUserHandle();

        boolean hasGroupId();

        boolean hasGroupName();

        boolean hasInviteUserId();

        boolean hasInviteUserName();

        boolean hasReqUserId();

        boolean hasResultCode();

        boolean hasUserHandle();
    }

    public static final class IMNormalGroupListReq extends GeneratedMessageLite implements IMNormalGroupListReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static Parser<IMNormalGroupListReq> PARSER = new AbstractParser<IMNormalGroupListReq>() {
            public IMNormalGroupListReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMNormalGroupListReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMNormalGroupListReq defaultInstance = new IMNormalGroupListReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMNormalGroupListReq, Builder> implements IMNormalGroupListReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMNormalGroupListReq getDefaultInstanceForType() {
                return IMNormalGroupListReq.getDefaultInstance();
            }

            public IMNormalGroupListReq build() {
                IMNormalGroupListReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMNormalGroupListReq buildPartial() {
                int i = 1;
                IMNormalGroupListReq iMNormalGroupListReq = new IMNormalGroupListReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMNormalGroupListReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMNormalGroupListReq.userHandle_ = this.userHandle_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMNormalGroupListReq.attachData_ = this.attachData_;
                iMNormalGroupListReq.bitField0_ = i;
                return iMNormalGroupListReq;
            }

            public Builder mergeFrom(IMNormalGroupListReq iMNormalGroupListReq) {
                if (iMNormalGroupListReq != IMNormalGroupListReq.getDefaultInstance()) {
                    if (iMNormalGroupListReq.hasUserId()) {
                        setUserId(iMNormalGroupListReq.getUserId());
                    }
                    if (iMNormalGroupListReq.hasUserHandle()) {
                        setUserHandle(iMNormalGroupListReq.getUserHandle());
                    }
                    if (iMNormalGroupListReq.hasAttachData()) {
                        setAttachData(iMNormalGroupListReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMNormalGroupListReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMNormalGroupListReq iMNormalGroupListReq;
                IMNormalGroupListReq iMNormalGroupListReq2;
                try {
                    IMNormalGroupListReq iMNormalGroupListReq3 = (IMNormalGroupListReq) IMNormalGroupListReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMNormalGroupListReq3 != null) {
                        mergeFrom(iMNormalGroupListReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMNormalGroupListReq2 = (IMNormalGroupListReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMNormalGroupListReq = iMNormalGroupListReq2;
                    th = th2;
                }
                if (iMNormalGroupListReq != null) {
                    mergeFrom(iMNormalGroupListReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 4) == 4;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -5;
                this.attachData_ = IMNormalGroupListReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMNormalGroupListReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMNormalGroupListReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMNormalGroupListReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMNormalGroupListReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMNormalGroupListReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMNormalGroupListReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMNormalGroupListReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMNormalGroupListReq) PARSER.parseFrom(byteString);
        }

        public static IMNormalGroupListReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMNormalGroupListReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMNormalGroupListReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMNormalGroupListReq) PARSER.parseFrom(bArr);
        }

        public static IMNormalGroupListReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMNormalGroupListReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMNormalGroupListReq parseFrom(InputStream inputStream) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseFrom(inputStream);
        }

        public static IMNormalGroupListReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMNormalGroupListReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMNormalGroupListReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMNormalGroupListReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMNormalGroupListReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMNormalGroupListReq iMNormalGroupListReq) {
            return newBuilder().mergeFrom(iMNormalGroupListReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMNormalGroupListReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMNormalGroupListRsp extends GeneratedMessageLite implements IMNormalGroupListRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_VERSION_LIST_FIELD_NUMBER = 2;
        public static Parser<IMNormalGroupListRsp> PARSER = new AbstractParser<IMNormalGroupListRsp>() {
            public IMNormalGroupListRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMNormalGroupListRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 3;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMNormalGroupListRsp defaultInstance = new IMNormalGroupListRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<GroupVersionInfo> groupVersionList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMNormalGroupListRsp, Builder> implements IMNormalGroupListRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<GroupVersionInfo> groupVersionList_ = Collections.emptyList();
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupVersionList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                this.bitField0_ &= -5;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMNormalGroupListRsp getDefaultInstanceForType() {
                return IMNormalGroupListRsp.getDefaultInstance();
            }

            public IMNormalGroupListRsp build() {
                IMNormalGroupListRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMNormalGroupListRsp buildPartial() {
                int i = 1;
                IMNormalGroupListRsp iMNormalGroupListRsp = new IMNormalGroupListRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMNormalGroupListRsp.userId_ = this.userId_;
                if ((this.bitField0_ & 2) == 2) {
                    this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
                    this.bitField0_ &= -3;
                }
                iMNormalGroupListRsp.groupVersionList_ = this.groupVersionList_;
                if ((i2 & 4) == 4) {
                    i |= 2;
                }
                iMNormalGroupListRsp.userHandle_ = this.userHandle_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMNormalGroupListRsp.attachData_ = this.attachData_;
                iMNormalGroupListRsp.bitField0_ = i;
                return iMNormalGroupListRsp;
            }

            public Builder mergeFrom(IMNormalGroupListRsp iMNormalGroupListRsp) {
                if (iMNormalGroupListRsp != IMNormalGroupListRsp.getDefaultInstance()) {
                    if (iMNormalGroupListRsp.hasUserId()) {
                        setUserId(iMNormalGroupListRsp.getUserId());
                    }
                    if (!iMNormalGroupListRsp.groupVersionList_.isEmpty()) {
                        if (this.groupVersionList_.isEmpty()) {
                            this.groupVersionList_ = iMNormalGroupListRsp.groupVersionList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureGroupVersionListIsMutable();
                            this.groupVersionList_.addAll(iMNormalGroupListRsp.groupVersionList_);
                        }
                    }
                    if (iMNormalGroupListRsp.hasUserHandle()) {
                        setUserHandle(iMNormalGroupListRsp.getUserHandle());
                    }
                    if (iMNormalGroupListRsp.hasAttachData()) {
                        setAttachData(iMNormalGroupListRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMNormalGroupListRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                for (int i = 0; i < getGroupVersionListCount(); i++) {
                    if (!getGroupVersionList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMNormalGroupListRsp iMNormalGroupListRsp;
                IMNormalGroupListRsp iMNormalGroupListRsp2;
                try {
                    IMNormalGroupListRsp iMNormalGroupListRsp3 = (IMNormalGroupListRsp) IMNormalGroupListRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMNormalGroupListRsp3 != null) {
                        mergeFrom(iMNormalGroupListRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMNormalGroupListRsp2 = (IMNormalGroupListRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMNormalGroupListRsp = iMNormalGroupListRsp2;
                    th = th2;
                }
                if (iMNormalGroupListRsp != null) {
                    mergeFrom(iMNormalGroupListRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            private void ensureGroupVersionListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.groupVersionList_ = new ArrayList(this.groupVersionList_);
                    this.bitField0_ |= 2;
                }
            }

            public List<GroupVersionInfo> getGroupVersionListList() {
                return Collections.unmodifiableList(this.groupVersionList_);
            }

            public int getGroupVersionListCount() {
                return this.groupVersionList_.size();
            }

            public GroupVersionInfo getGroupVersionList(int i) {
                return (GroupVersionInfo) this.groupVersionList_.get(i);
            }

            public Builder setGroupVersionList(int i, GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.set(i, groupVersionInfo);
                return this;
            }

            public Builder setGroupVersionList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupVersionList(GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(groupVersionInfo);
                return this;
            }

            public Builder addGroupVersionList(int i, GroupVersionInfo groupVersionInfo) {
                if (groupVersionInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(i, groupVersionInfo);
                return this;
            }

            public Builder addGroupVersionList(com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(builder.build());
                return this;
            }

            public Builder addGroupVersionList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupVersionInfo.Builder builder) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupVersionList(Iterable<? extends GroupVersionInfo> iterable) {
                ensureGroupVersionListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupVersionList_);
                return this;
            }

            public Builder clearGroupVersionList() {
                this.groupVersionList_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            public Builder removeGroupVersionList(int i) {
                ensureGroupVersionListIsMutable();
                this.groupVersionList_.remove(i);
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 4) == 4;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 4;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 8) == 8;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -9;
                this.attachData_ = IMNormalGroupListRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMNormalGroupListRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMNormalGroupListRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMNormalGroupListRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMNormalGroupListRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMNormalGroupListRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 18:
                            if (!(z2 & true)) {
                                this.groupVersionList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupVersionList_.add(codedInputStream.readMessage(GroupVersionInfo.PARSER, extensionRegistryLite));
                            break;
                        case 24:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupVersionList_ = Collections.unmodifiableList(this.groupVersionList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMNormalGroupListRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public List<GroupVersionInfo> getGroupVersionListList() {
            return this.groupVersionList_;
        }

        public List<? extends GroupVersionInfoOrBuilder> getGroupVersionListOrBuilderList() {
            return this.groupVersionList_;
        }

        public int getGroupVersionListCount() {
            return this.groupVersionList_.size();
        }

        public GroupVersionInfo getGroupVersionList(int i) {
            return (GroupVersionInfo) this.groupVersionList_.get(i);
        }

        public GroupVersionInfoOrBuilder getGroupVersionListOrBuilder(int i) {
            return (GroupVersionInfoOrBuilder) this.groupVersionList_.get(i);
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupVersionList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getGroupVersionListCount(); i++) {
                if (!getGroupVersionList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupVersionList_.size()) {
                    break;
                }
                codedOutputStream.writeMessage(2, (MessageLite) this.groupVersionList_.get(i2));
                i = i2 + 1;
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            while (true) {
                i2 = i;
                if (i3 >= this.groupVersionList_.size()) {
                    break;
                }
                i = CodedOutputStream.computeMessageSize(2, (MessageLite) this.groupVersionList_.get(i3)) + i2;
                i3++;
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(3, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = this.unknownFields.size() + i2;
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMNormalGroupListRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(byteString);
        }

        public static IMNormalGroupListRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMNormalGroupListRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(bArr);
        }

        public static IMNormalGroupListRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMNormalGroupListRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(inputStream);
        }

        public static IMNormalGroupListRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMNormalGroupListRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMNormalGroupListRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMNormalGroupListRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMNormalGroupListRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMNormalGroupListRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMNormalGroupListRsp iMNormalGroupListRsp) {
            return newBuilder().mergeFrom(iMNormalGroupListRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMNormalGroupListRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupVersionInfo getGroupVersionList(int i);

        int getGroupVersionListCount();

        List<GroupVersionInfo> getGroupVersionListList();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMQueryGroupImInReq extends GeneratedMessageLite implements IMQueryGroupImInReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static Parser<IMQueryGroupImInReq> PARSER = new AbstractParser<IMQueryGroupImInReq>() {
            public IMQueryGroupImInReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMQueryGroupImInReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 2;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMQueryGroupImInReq defaultInstance = new IMQueryGroupImInReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMQueryGroupImInReq, Builder> implements IMQueryGroupImInReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.userHandle_ = 0;
                this.bitField0_ &= -3;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMQueryGroupImInReq getDefaultInstanceForType() {
                return IMQueryGroupImInReq.getDefaultInstance();
            }

            public IMQueryGroupImInReq build() {
                IMQueryGroupImInReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMQueryGroupImInReq buildPartial() {
                int i = 1;
                IMQueryGroupImInReq iMQueryGroupImInReq = new IMQueryGroupImInReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMQueryGroupImInReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMQueryGroupImInReq.userHandle_ = this.userHandle_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMQueryGroupImInReq.attachData_ = this.attachData_;
                iMQueryGroupImInReq.bitField0_ = i;
                return iMQueryGroupImInReq;
            }

            public Builder mergeFrom(IMQueryGroupImInReq iMQueryGroupImInReq) {
                if (iMQueryGroupImInReq != IMQueryGroupImInReq.getDefaultInstance()) {
                    if (iMQueryGroupImInReq.hasUserId()) {
                        setUserId(iMQueryGroupImInReq.getUserId());
                    }
                    if (iMQueryGroupImInReq.hasUserHandle()) {
                        setUserHandle(iMQueryGroupImInReq.getUserHandle());
                    }
                    if (iMQueryGroupImInReq.hasAttachData()) {
                        setAttachData(iMQueryGroupImInReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMQueryGroupImInReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMQueryGroupImInReq iMQueryGroupImInReq;
                IMQueryGroupImInReq iMQueryGroupImInReq2;
                try {
                    IMQueryGroupImInReq iMQueryGroupImInReq3 = (IMQueryGroupImInReq) IMQueryGroupImInReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMQueryGroupImInReq3 != null) {
                        mergeFrom(iMQueryGroupImInReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMQueryGroupImInReq2 = (IMQueryGroupImInReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMQueryGroupImInReq = iMQueryGroupImInReq2;
                    th = th2;
                }
                if (iMQueryGroupImInReq != null) {
                    mergeFrom(iMQueryGroupImInReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 2;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -3;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 4) == 4;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -5;
                this.attachData_ = IMQueryGroupImInReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMQueryGroupImInReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMQueryGroupImInReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMQueryGroupImInReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMQueryGroupImInReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMQueryGroupImInReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 4;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMQueryGroupImInReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 4) == 4;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.userHandle_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMQueryGroupImInReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(byteString);
        }

        public static IMQueryGroupImInReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMQueryGroupImInReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(bArr);
        }

        public static IMQueryGroupImInReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMQueryGroupImInReq parseFrom(InputStream inputStream) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(inputStream);
        }

        public static IMQueryGroupImInReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMQueryGroupImInReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMQueryGroupImInReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMQueryGroupImInReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMQueryGroupImInReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMQueryGroupImInReq iMQueryGroupImInReq) {
            return newBuilder().mergeFrom(iMQueryGroupImInReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMQueryGroupImInReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMQueryGroupImInRsp extends GeneratedMessageLite implements IMQueryGroupImInRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_INFO_LIST_FIELD_NUMBER = 3;
        public static final int GROUP_NUM_FIELD_NUMBER = 2;
        public static Parser<IMQueryGroupImInRsp> PARSER = new AbstractParser<IMQueryGroupImInRsp>() {
            public IMQueryGroupImInRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMQueryGroupImInRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMQueryGroupImInRsp defaultInstance = new IMQueryGroupImInRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public List<GroupInfo> groupInfoList_;
        /* access modifiers changed from: private */
        public int groupNum_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMQueryGroupImInRsp, Builder> implements IMQueryGroupImInRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private List<GroupInfo> groupInfoList_ = Collections.emptyList();
            private int groupNum_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupNum_ = 0;
                this.bitField0_ &= -3;
                this.groupInfoList_ = Collections.emptyList();
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMQueryGroupImInRsp getDefaultInstanceForType() {
                return IMQueryGroupImInRsp.getDefaultInstance();
            }

            public IMQueryGroupImInRsp build() {
                IMQueryGroupImInRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMQueryGroupImInRsp buildPartial() {
                int i = 1;
                IMQueryGroupImInRsp iMQueryGroupImInRsp = new IMQueryGroupImInRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMQueryGroupImInRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMQueryGroupImInRsp.groupNum_ = this.groupNum_;
                if ((this.bitField0_ & 4) == 4) {
                    this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
                    this.bitField0_ &= -5;
                }
                iMQueryGroupImInRsp.groupInfoList_ = this.groupInfoList_;
                if ((i2 & 8) == 8) {
                    i |= 4;
                }
                iMQueryGroupImInRsp.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 8;
                }
                iMQueryGroupImInRsp.attachData_ = this.attachData_;
                iMQueryGroupImInRsp.bitField0_ = i;
                return iMQueryGroupImInRsp;
            }

            public Builder mergeFrom(IMQueryGroupImInRsp iMQueryGroupImInRsp) {
                if (iMQueryGroupImInRsp != IMQueryGroupImInRsp.getDefaultInstance()) {
                    if (iMQueryGroupImInRsp.hasUserId()) {
                        setUserId(iMQueryGroupImInRsp.getUserId());
                    }
                    if (iMQueryGroupImInRsp.hasGroupNum()) {
                        setGroupNum(iMQueryGroupImInRsp.getGroupNum());
                    }
                    if (!iMQueryGroupImInRsp.groupInfoList_.isEmpty()) {
                        if (this.groupInfoList_.isEmpty()) {
                            this.groupInfoList_ = iMQueryGroupImInRsp.groupInfoList_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureGroupInfoListIsMutable();
                            this.groupInfoList_.addAll(iMQueryGroupImInRsp.groupInfoList_);
                        }
                    }
                    if (iMQueryGroupImInRsp.hasUserHandle()) {
                        setUserHandle(iMQueryGroupImInRsp.getUserHandle());
                    }
                    if (iMQueryGroupImInRsp.hasAttachData()) {
                        setAttachData(iMQueryGroupImInRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMQueryGroupImInRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (!hasUserId() || !hasGroupNum()) {
                    return false;
                }
                for (int i = 0; i < getGroupInfoListCount(); i++) {
                    if (!getGroupInfoList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMQueryGroupImInRsp iMQueryGroupImInRsp;
                IMQueryGroupImInRsp iMQueryGroupImInRsp2;
                try {
                    IMQueryGroupImInRsp iMQueryGroupImInRsp3 = (IMQueryGroupImInRsp) IMQueryGroupImInRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMQueryGroupImInRsp3 != null) {
                        mergeFrom(iMQueryGroupImInRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMQueryGroupImInRsp2 = (IMQueryGroupImInRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMQueryGroupImInRsp = iMQueryGroupImInRsp2;
                    th = th2;
                }
                if (iMQueryGroupImInRsp != null) {
                    mergeFrom(iMQueryGroupImInRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupNum() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupNum() {
                return this.groupNum_;
            }

            public Builder setGroupNum(int i) {
                this.bitField0_ |= 2;
                this.groupNum_ = i;
                return this;
            }

            public Builder clearGroupNum() {
                this.bitField0_ &= -3;
                this.groupNum_ = 0;
                return this;
            }

            private void ensureGroupInfoListIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.groupInfoList_ = new ArrayList(this.groupInfoList_);
                    this.bitField0_ |= 4;
                }
            }

            public List<GroupInfo> getGroupInfoListList() {
                return Collections.unmodifiableList(this.groupInfoList_);
            }

            public int getGroupInfoListCount() {
                return this.groupInfoList_.size();
            }

            public GroupInfo getGroupInfoList(int i) {
                return (GroupInfo) this.groupInfoList_.get(i);
            }

            public Builder setGroupInfoList(int i, GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.set(i, groupInfo);
                return this;
            }

            public Builder setGroupInfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.set(i, builder.build());
                return this;
            }

            public Builder addGroupInfoList(GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(groupInfo);
                return this;
            }

            public Builder addGroupInfoList(int i, GroupInfo groupInfo) {
                if (groupInfo == null) {
                    throw new NullPointerException();
                }
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(i, groupInfo);
                return this;
            }

            public Builder addGroupInfoList(com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(builder.build());
                return this;
            }

            public Builder addGroupInfoList(int i, com.ifengyu.im.protobuf.IMBaseDefine.GroupInfo.Builder builder) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.add(i, builder.build());
                return this;
            }

            public Builder addAllGroupInfoList(Iterable<? extends GroupInfo> iterable) {
                ensureGroupInfoListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.groupInfoList_);
                return this;
            }

            public Builder clearGroupInfoList() {
                this.groupInfoList_ = Collections.emptyList();
                this.bitField0_ &= -5;
                return this;
            }

            public Builder removeGroupInfoList(int i) {
                ensureGroupInfoListIsMutable();
                this.groupInfoList_.remove(i);
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMQueryGroupImInRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMQueryGroupImInRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMQueryGroupImInRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMQueryGroupImInRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMQueryGroupImInRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMQueryGroupImInRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupNum_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            if (!(z2 & true)) {
                                this.groupInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.groupInfoList_.add(codedInputStream.readMessage(GroupInfo.PARSER, extensionRegistryLite));
                            break;
                        case 32:
                            this.bitField0_ |= 4;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 8;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.groupInfoList_ = Collections.unmodifiableList(this.groupInfoList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMQueryGroupImInRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupNum() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupNum() {
            return this.groupNum_;
        }

        public List<GroupInfo> getGroupInfoListList() {
            return this.groupInfoList_;
        }

        public List<? extends GroupInfoOrBuilder> getGroupInfoListOrBuilderList() {
            return this.groupInfoList_;
        }

        public int getGroupInfoListCount() {
            return this.groupInfoList_.size();
        }

        public GroupInfo getGroupInfoList(int i) {
            return (GroupInfo) this.groupInfoList_.get(i);
        }

        public GroupInfoOrBuilder getGroupInfoListOrBuilder(int i) {
            return (GroupInfoOrBuilder) this.groupInfoList_.get(i);
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 4) == 4;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 8) == 8;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupNum_ = 0;
            this.groupInfoList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupNum()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getGroupInfoListCount(); i++) {
                    if (!getGroupInfoList(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupNum_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.groupInfoList_.size()) {
                    break;
                }
                codedOutputStream.writeMessage(3, (MessageLite) this.groupInfoList_.get(i2));
                i = i2 + 1;
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.groupNum_);
            }
            while (true) {
                i2 = i;
                if (i3 >= this.groupInfoList_.size()) {
                    break;
                }
                i = CodedOutputStream.computeMessageSize(3, (MessageLite) this.groupInfoList_.get(i3)) + i2;
                i3++;
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = this.unknownFields.size() + i2;
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMQueryGroupImInRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(byteString);
        }

        public static IMQueryGroupImInRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMQueryGroupImInRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(bArr);
        }

        public static IMQueryGroupImInRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMQueryGroupImInRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(inputStream);
        }

        public static IMQueryGroupImInRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMQueryGroupImInRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMQueryGroupImInRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMQueryGroupImInRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMQueryGroupImInRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMQueryGroupImInRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMQueryGroupImInRsp iMQueryGroupImInRsp) {
            return newBuilder().mergeFrom(iMQueryGroupImInRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMQueryGroupImInRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        GroupInfo getGroupInfoList(int i);

        int getGroupInfoListCount();

        List<GroupInfo> getGroupInfoListList();

        int getGroupNum();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupNum();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMUpdateNickNameInGroupReq extends GeneratedMessageLite implements IMUpdateNickNameInGroupReqOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int NICKNAME_INGROUP_FIELD_NUMBER = 3;
        public static Parser<IMUpdateNickNameInGroupReq> PARSER = new AbstractParser<IMUpdateNickNameInGroupReq>() {
            public IMUpdateNickNameInGroupReq parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMUpdateNickNameInGroupReq(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int USER_HANDLE_FIELD_NUMBER = 4;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMUpdateNickNameInGroupReq defaultInstance = new IMUpdateNickNameInGroupReq(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object nicknameIngroup_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMUpdateNickNameInGroupReq, Builder> implements IMUpdateNickNameInGroupReqOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private Object nicknameIngroup_ = "";
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.nicknameIngroup_ = "";
                this.bitField0_ &= -5;
                this.userHandle_ = 0;
                this.bitField0_ &= -9;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMUpdateNickNameInGroupReq getDefaultInstanceForType() {
                return IMUpdateNickNameInGroupReq.getDefaultInstance();
            }

            public IMUpdateNickNameInGroupReq build() {
                IMUpdateNickNameInGroupReq buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMUpdateNickNameInGroupReq buildPartial() {
                int i = 1;
                IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq = new IMUpdateNickNameInGroupReq((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMUpdateNickNameInGroupReq.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMUpdateNickNameInGroupReq.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMUpdateNickNameInGroupReq.nicknameIngroup_ = this.nicknameIngroup_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMUpdateNickNameInGroupReq.userHandle_ = this.userHandle_;
                if ((i2 & 16) == 16) {
                    i |= 16;
                }
                iMUpdateNickNameInGroupReq.attachData_ = this.attachData_;
                iMUpdateNickNameInGroupReq.bitField0_ = i;
                return iMUpdateNickNameInGroupReq;
            }

            public Builder mergeFrom(IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq) {
                if (iMUpdateNickNameInGroupReq != IMUpdateNickNameInGroupReq.getDefaultInstance()) {
                    if (iMUpdateNickNameInGroupReq.hasUserId()) {
                        setUserId(iMUpdateNickNameInGroupReq.getUserId());
                    }
                    if (iMUpdateNickNameInGroupReq.hasGroupId()) {
                        setGroupId(iMUpdateNickNameInGroupReq.getGroupId());
                    }
                    if (iMUpdateNickNameInGroupReq.hasNicknameIngroup()) {
                        this.bitField0_ |= 4;
                        this.nicknameIngroup_ = iMUpdateNickNameInGroupReq.nicknameIngroup_;
                    }
                    if (iMUpdateNickNameInGroupReq.hasUserHandle()) {
                        setUserHandle(iMUpdateNickNameInGroupReq.getUserHandle());
                    }
                    if (iMUpdateNickNameInGroupReq.hasAttachData()) {
                        setAttachData(iMUpdateNickNameInGroupReq.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMUpdateNickNameInGroupReq.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasNicknameIngroup()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq;
                IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq2;
                try {
                    IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq3 = (IMUpdateNickNameInGroupReq) IMUpdateNickNameInGroupReq.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMUpdateNickNameInGroupReq3 != null) {
                        mergeFrom(iMUpdateNickNameInGroupReq3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMUpdateNickNameInGroupReq2 = (IMUpdateNickNameInGroupReq) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMUpdateNickNameInGroupReq = iMUpdateNickNameInGroupReq2;
                    th = th2;
                }
                if (iMUpdateNickNameInGroupReq != null) {
                    mergeFrom(iMUpdateNickNameInGroupReq);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNicknameIngroup() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getNicknameIngroup() {
                Object obj = this.nicknameIngroup_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.nicknameIngroup_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNicknameIngroupBytes() {
                Object obj = this.nicknameIngroup_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.nicknameIngroup_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNicknameIngroup(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = str;
                return this;
            }

            public Builder clearNicknameIngroup() {
                this.bitField0_ &= -5;
                this.nicknameIngroup_ = IMUpdateNickNameInGroupReq.getDefaultInstance().getNicknameIngroup();
                return this;
            }

            public Builder setNicknameIngroupBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = byteString;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 8;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -9;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 16) == 16;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -17;
                this.attachData_ = IMUpdateNickNameInGroupReq.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMUpdateNickNameInGroupReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMUpdateNickNameInGroupReq(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMUpdateNickNameInGroupReq getDefaultInstance() {
            return defaultInstance;
        }

        public IMUpdateNickNameInGroupReq getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMUpdateNickNameInGroupReq(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.nicknameIngroup_ = readBytes;
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 16;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMUpdateNickNameInGroupReq> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNicknameIngroup() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getNicknameIngroup() {
            Object obj = this.nicknameIngroup_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.nicknameIngroup_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNicknameIngroupBytes() {
            Object obj = this.nicknameIngroup_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.nicknameIngroup_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 16) == 16;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.nicknameIngroup_ = "";
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNicknameIngroup()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getNicknameIngroupBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeUInt32Size(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getNicknameIngroupBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeUInt32Size(4, this.userHandle_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size = i2 + this.unknownFields.size();
            this.memoizedSerializedSize = size;
            return size;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMUpdateNickNameInGroupReq parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(byteString);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(bArr);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(InputStream inputStream) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(inputStream);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupReq parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMUpdateNickNameInGroupReq parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(codedInputStream);
        }

        public static IMUpdateNickNameInGroupReq parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupReq) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMUpdateNickNameInGroupReq iMUpdateNickNameInGroupReq) {
            return newBuilder().mergeFrom(iMUpdateNickNameInGroupReq);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMUpdateNickNameInGroupReqOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        String getNicknameIngroup();

        ByteString getNicknameIngroupBytes();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasNicknameIngroup();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    public static final class IMUpdateNickNameInGroupRsp extends GeneratedMessageLite implements IMUpdateNickNameInGroupRspOrBuilder {
        public static final int ATTACH_DATA_FIELD_NUMBER = 20;
        public static final int GROUP_ID_FIELD_NUMBER = 2;
        public static final int MEMBER_ID_LIST_FIELD_NUMBER = 5;
        public static final int NICKNAME_INGROUP_FIELD_NUMBER = 3;
        public static Parser<IMUpdateNickNameInGroupRsp> PARSER = new AbstractParser<IMUpdateNickNameInGroupRsp>() {
            public IMUpdateNickNameInGroupRsp parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IMUpdateNickNameInGroupRsp(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RESULT_CODE_FIELD_NUMBER = 4;
        public static final int USER_HANDLE_FIELD_NUMBER = 6;
        public static final int USER_ID_FIELD_NUMBER = 1;
        private static final IMUpdateNickNameInGroupRsp defaultInstance = new IMUpdateNickNameInGroupRsp(true);
        private static final long serialVersionUID = 0;
        /* access modifiers changed from: private */
        public ByteString attachData_;
        /* access modifiers changed from: private */
        public int bitField0_;
        /* access modifiers changed from: private */
        public int groupId_;
        /* access modifiers changed from: private */
        public List<Integer> memberIdList_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        /* access modifiers changed from: private */
        public Object nicknameIngroup_;
        /* access modifiers changed from: private */
        public int resultCode_;
        /* access modifiers changed from: private */
        public final ByteString unknownFields;
        /* access modifiers changed from: private */
        public int userHandle_;
        /* access modifiers changed from: private */
        public int userId_;

        public static final class Builder extends com.google.protobuf.GeneratedMessageLite.Builder<IMUpdateNickNameInGroupRsp, Builder> implements IMUpdateNickNameInGroupRspOrBuilder {
            private ByteString attachData_ = ByteString.EMPTY;
            private int bitField0_;
            private int groupId_;
            private List<Integer> memberIdList_ = Collections.emptyList();
            private Object nicknameIngroup_ = "";
            private int resultCode_;
            private int userHandle_;
            private int userId_;

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
            }

            /* access modifiers changed from: private */
            public static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                this.userId_ = 0;
                this.bitField0_ &= -2;
                this.groupId_ = 0;
                this.bitField0_ &= -3;
                this.nicknameIngroup_ = "";
                this.bitField0_ &= -5;
                this.resultCode_ = 0;
                this.bitField0_ &= -9;
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.userHandle_ = 0;
                this.bitField0_ &= -33;
                this.attachData_ = ByteString.EMPTY;
                this.bitField0_ &= -65;
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public IMUpdateNickNameInGroupRsp getDefaultInstanceForType() {
                return IMUpdateNickNameInGroupRsp.getDefaultInstance();
            }

            public IMUpdateNickNameInGroupRsp build() {
                IMUpdateNickNameInGroupRsp buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException(buildPartial);
            }

            public IMUpdateNickNameInGroupRsp buildPartial() {
                int i = 1;
                IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp = new IMUpdateNickNameInGroupRsp((com.google.protobuf.GeneratedMessageLite.Builder) this);
                int i2 = this.bitField0_;
                if ((i2 & 1) != 1) {
                    i = 0;
                }
                iMUpdateNickNameInGroupRsp.userId_ = this.userId_;
                if ((i2 & 2) == 2) {
                    i |= 2;
                }
                iMUpdateNickNameInGroupRsp.groupId_ = this.groupId_;
                if ((i2 & 4) == 4) {
                    i |= 4;
                }
                iMUpdateNickNameInGroupRsp.nicknameIngroup_ = this.nicknameIngroup_;
                if ((i2 & 8) == 8) {
                    i |= 8;
                }
                iMUpdateNickNameInGroupRsp.resultCode_ = this.resultCode_;
                if ((this.bitField0_ & 16) == 16) {
                    this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    this.bitField0_ &= -17;
                }
                iMUpdateNickNameInGroupRsp.memberIdList_ = this.memberIdList_;
                if ((i2 & 32) == 32) {
                    i |= 16;
                }
                iMUpdateNickNameInGroupRsp.userHandle_ = this.userHandle_;
                if ((i2 & 64) == 64) {
                    i |= 32;
                }
                iMUpdateNickNameInGroupRsp.attachData_ = this.attachData_;
                iMUpdateNickNameInGroupRsp.bitField0_ = i;
                return iMUpdateNickNameInGroupRsp;
            }

            public Builder mergeFrom(IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp) {
                if (iMUpdateNickNameInGroupRsp != IMUpdateNickNameInGroupRsp.getDefaultInstance()) {
                    if (iMUpdateNickNameInGroupRsp.hasUserId()) {
                        setUserId(iMUpdateNickNameInGroupRsp.getUserId());
                    }
                    if (iMUpdateNickNameInGroupRsp.hasGroupId()) {
                        setGroupId(iMUpdateNickNameInGroupRsp.getGroupId());
                    }
                    if (iMUpdateNickNameInGroupRsp.hasNicknameIngroup()) {
                        this.bitField0_ |= 4;
                        this.nicknameIngroup_ = iMUpdateNickNameInGroupRsp.nicknameIngroup_;
                    }
                    if (iMUpdateNickNameInGroupRsp.hasResultCode()) {
                        setResultCode(iMUpdateNickNameInGroupRsp.getResultCode());
                    }
                    if (!iMUpdateNickNameInGroupRsp.memberIdList_.isEmpty()) {
                        if (this.memberIdList_.isEmpty()) {
                            this.memberIdList_ = iMUpdateNickNameInGroupRsp.memberIdList_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureMemberIdListIsMutable();
                            this.memberIdList_.addAll(iMUpdateNickNameInGroupRsp.memberIdList_);
                        }
                    }
                    if (iMUpdateNickNameInGroupRsp.hasUserHandle()) {
                        setUserHandle(iMUpdateNickNameInGroupRsp.getUserHandle());
                    }
                    if (iMUpdateNickNameInGroupRsp.hasAttachData()) {
                        setAttachData(iMUpdateNickNameInGroupRsp.getAttachData());
                    }
                    setUnknownFields(getUnknownFields().concat(iMUpdateNickNameInGroupRsp.unknownFields));
                }
                return this;
            }

            public final boolean isInitialized() {
                if (hasUserId() && hasGroupId() && hasNicknameIngroup() && hasResultCode()) {
                    return true;
                }
                return false;
            }

            public Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp;
                IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp2;
                try {
                    IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp3 = (IMUpdateNickNameInGroupRsp) IMUpdateNickNameInGroupRsp.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (iMUpdateNickNameInGroupRsp3 != null) {
                        mergeFrom(iMUpdateNickNameInGroupRsp3);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    InvalidProtocolBufferException invalidProtocolBufferException = e;
                    iMUpdateNickNameInGroupRsp2 = (IMUpdateNickNameInGroupRsp) invalidProtocolBufferException.getUnfinishedMessage();
                    throw invalidProtocolBufferException;
                } catch (Throwable th) {
                    Throwable th2 = th;
                    iMUpdateNickNameInGroupRsp = iMUpdateNickNameInGroupRsp2;
                    th = th2;
                }
                if (iMUpdateNickNameInGroupRsp != null) {
                    mergeFrom(iMUpdateNickNameInGroupRsp);
                }
                throw th;
            }

            public boolean hasUserId() {
                return (this.bitField0_ & 1) == 1;
            }

            public int getUserId() {
                return this.userId_;
            }

            public Builder setUserId(int i) {
                this.bitField0_ |= 1;
                this.userId_ = i;
                return this;
            }

            public Builder clearUserId() {
                this.bitField0_ &= -2;
                this.userId_ = 0;
                return this;
            }

            public boolean hasGroupId() {
                return (this.bitField0_ & 2) == 2;
            }

            public int getGroupId() {
                return this.groupId_;
            }

            public Builder setGroupId(int i) {
                this.bitField0_ |= 2;
                this.groupId_ = i;
                return this;
            }

            public Builder clearGroupId() {
                this.bitField0_ &= -3;
                this.groupId_ = 0;
                return this;
            }

            public boolean hasNicknameIngroup() {
                return (this.bitField0_ & 4) == 4;
            }

            public String getNicknameIngroup() {
                Object obj = this.nicknameIngroup_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                ByteString byteString = (ByteString) obj;
                String stringUtf8 = byteString.toStringUtf8();
                if (byteString.isValidUtf8()) {
                    this.nicknameIngroup_ = stringUtf8;
                }
                return stringUtf8;
            }

            public ByteString getNicknameIngroupBytes() {
                Object obj = this.nicknameIngroup_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.nicknameIngroup_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public Builder setNicknameIngroup(String str) {
                if (str == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = str;
                return this;
            }

            public Builder clearNicknameIngroup() {
                this.bitField0_ &= -5;
                this.nicknameIngroup_ = IMUpdateNickNameInGroupRsp.getDefaultInstance().getNicknameIngroup();
                return this;
            }

            public Builder setNicknameIngroupBytes(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                this.nicknameIngroup_ = byteString;
                return this;
            }

            public boolean hasResultCode() {
                return (this.bitField0_ & 8) == 8;
            }

            public int getResultCode() {
                return this.resultCode_;
            }

            public Builder setResultCode(int i) {
                this.bitField0_ |= 8;
                this.resultCode_ = i;
                return this;
            }

            public Builder clearResultCode() {
                this.bitField0_ &= -9;
                this.resultCode_ = 0;
                return this;
            }

            private void ensureMemberIdListIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.memberIdList_ = new ArrayList(this.memberIdList_);
                    this.bitField0_ |= 16;
                }
            }

            public List<Integer> getMemberIdListList() {
                return Collections.unmodifiableList(this.memberIdList_);
            }

            public int getMemberIdListCount() {
                return this.memberIdList_.size();
            }

            public int getMemberIdList(int i) {
                return ((Integer) this.memberIdList_.get(i)).intValue();
            }

            public Builder setMemberIdList(int i, int i2) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.set(i, Integer.valueOf(i2));
                return this;
            }

            public Builder addMemberIdList(int i) {
                ensureMemberIdListIsMutable();
                this.memberIdList_.add(Integer.valueOf(i));
                return this;
            }

            public Builder addAllMemberIdList(Iterable<? extends Integer> iterable) {
                ensureMemberIdListIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(iterable, this.memberIdList_);
                return this;
            }

            public Builder clearMemberIdList() {
                this.memberIdList_ = Collections.emptyList();
                this.bitField0_ &= -17;
                return this;
            }

            public boolean hasUserHandle() {
                return (this.bitField0_ & 32) == 32;
            }

            public int getUserHandle() {
                return this.userHandle_;
            }

            public Builder setUserHandle(int i) {
                this.bitField0_ |= 32;
                this.userHandle_ = i;
                return this;
            }

            public Builder clearUserHandle() {
                this.bitField0_ &= -33;
                this.userHandle_ = 0;
                return this;
            }

            public boolean hasAttachData() {
                return (this.bitField0_ & 64) == 64;
            }

            public ByteString getAttachData() {
                return this.attachData_;
            }

            public Builder setAttachData(ByteString byteString) {
                if (byteString == null) {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                this.attachData_ = byteString;
                return this;
            }

            public Builder clearAttachData() {
                this.bitField0_ &= -65;
                this.attachData_ = IMUpdateNickNameInGroupRsp.getDefaultInstance().getAttachData();
                return this;
            }
        }

        private IMUpdateNickNameInGroupRsp(com.google.protobuf.GeneratedMessageLite.Builder builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IMUpdateNickNameInGroupRsp(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = ByteString.EMPTY;
        }

        public static IMUpdateNickNameInGroupRsp getDefaultInstance() {
            return defaultInstance;
        }

        public IMUpdateNickNameInGroupRsp getDefaultInstanceForType() {
            return defaultInstance;
        }

        private IMUpdateNickNameInGroupRsp(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            boolean z = false;
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            Output newOutput = ByteString.newOutput();
            CodedOutputStream newInstance = CodedOutputStream.newInstance((OutputStream) newOutput);
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            z = true;
                            break;
                        case 8:
                            this.bitField0_ |= 1;
                            this.userId_ = codedInputStream.readUInt32();
                            break;
                        case 16:
                            this.bitField0_ |= 2;
                            this.groupId_ = codedInputStream.readUInt32();
                            break;
                        case 26:
                            ByteString readBytes = codedInputStream.readBytes();
                            this.bitField0_ |= 4;
                            this.nicknameIngroup_ = readBytes;
                            break;
                        case 32:
                            this.bitField0_ |= 8;
                            this.resultCode_ = codedInputStream.readUInt32();
                            break;
                        case 40:
                            if (!(z2 & true)) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            break;
                        case 42:
                            int pushLimit = codedInputStream.pushLimit(codedInputStream.readRawVarint32());
                            if (!(z2 & true) && codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_ = new ArrayList();
                                z2 |= true;
                            }
                            while (codedInputStream.getBytesUntilLimit() > 0) {
                                this.memberIdList_.add(Integer.valueOf(codedInputStream.readUInt32()));
                            }
                            codedInputStream.popLimit(pushLimit);
                            break;
                        case 48:
                            this.bitField0_ |= 16;
                            this.userHandle_ = codedInputStream.readUInt32();
                            break;
                        case 162:
                            this.bitField0_ |= 32;
                            this.attachData_ = codedInputStream.readBytes();
                            break;
                        default:
                            if (parseUnknownField(codedInputStream, newInstance, extensionRegistryLite, readTag)) {
                                break;
                            } else {
                                z = true;
                                break;
                            }
                    }
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
                    }
                    try {
                        newInstance.flush();
                    } catch (IOException e3) {
                    } finally {
                        this.unknownFields = newOutput.toByteString();
                    }
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.memberIdList_ = Collections.unmodifiableList(this.memberIdList_);
            }
            try {
                newInstance.flush();
            } catch (IOException e4) {
            } finally {
                this.unknownFields = newOutput.toByteString();
            }
            makeExtensionsImmutable();
        }

        static {
            defaultInstance.initFields();
        }

        public Parser<IMUpdateNickNameInGroupRsp> getParserForType() {
            return PARSER;
        }

        public boolean hasUserId() {
            return (this.bitField0_ & 1) == 1;
        }

        public int getUserId() {
            return this.userId_;
        }

        public boolean hasGroupId() {
            return (this.bitField0_ & 2) == 2;
        }

        public int getGroupId() {
            return this.groupId_;
        }

        public boolean hasNicknameIngroup() {
            return (this.bitField0_ & 4) == 4;
        }

        public String getNicknameIngroup() {
            Object obj = this.nicknameIngroup_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.nicknameIngroup_ = stringUtf8;
            }
            return stringUtf8;
        }

        public ByteString getNicknameIngroupBytes() {
            Object obj = this.nicknameIngroup_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.nicknameIngroup_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public boolean hasResultCode() {
            return (this.bitField0_ & 8) == 8;
        }

        public int getResultCode() {
            return this.resultCode_;
        }

        public List<Integer> getMemberIdListList() {
            return this.memberIdList_;
        }

        public int getMemberIdListCount() {
            return this.memberIdList_.size();
        }

        public int getMemberIdList(int i) {
            return ((Integer) this.memberIdList_.get(i)).intValue();
        }

        public boolean hasUserHandle() {
            return (this.bitField0_ & 16) == 16;
        }

        public int getUserHandle() {
            return this.userHandle_;
        }

        public boolean hasAttachData() {
            return (this.bitField0_ & 32) == 32;
        }

        public ByteString getAttachData() {
            return this.attachData_;
        }

        private void initFields() {
            this.userId_ = 0;
            this.groupId_ = 0;
            this.nicknameIngroup_ = "";
            this.resultCode_ = 0;
            this.memberIdList_ = Collections.emptyList();
            this.userHandle_ = 0;
            this.attachData_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            if (!hasUserId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasGroupId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasNicknameIngroup()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResultCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeUInt32(1, this.userId_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeUInt32(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getNicknameIngroupBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeUInt32(4, this.resultCode_);
            }
            int i = 0;
            while (true) {
                int i2 = i;
                if (i2 >= this.memberIdList_.size()) {
                    break;
                }
                codedOutputStream.writeUInt32(5, ((Integer) this.memberIdList_.get(i2)).intValue());
                i = i2 + 1;
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeUInt32(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(20, this.attachData_);
            }
            codedOutputStream.writeRawBytes(this.unknownFields);
        }

        public int getSerializedSize() {
            int i;
            int i2;
            int i3 = 0;
            int i4 = this.memoizedSerializedSize;
            if (i4 != -1) {
                return i4;
            }
            if ((this.bitField0_ & 1) == 1) {
                i = CodedOutputStream.computeUInt32Size(1, this.userId_) + 0;
            } else {
                i = 0;
            }
            if ((this.bitField0_ & 2) == 2) {
                i += CodedOutputStream.computeUInt32Size(2, this.groupId_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i += CodedOutputStream.computeBytesSize(3, getNicknameIngroupBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 = i + CodedOutputStream.computeUInt32Size(4, this.resultCode_);
            } else {
                i2 = i;
            }
            int i5 = 0;
            while (i3 < this.memberIdList_.size()) {
                i3++;
                i5 = CodedOutputStream.computeUInt32SizeNoTag(((Integer) this.memberIdList_.get(i3)).intValue()) + i5;
            }
            int size = i2 + i5 + (getMemberIdListList().size() * 1);
            if ((this.bitField0_ & 16) == 16) {
                size += CodedOutputStream.computeUInt32Size(6, this.userHandle_);
            }
            if ((this.bitField0_ & 32) == 32) {
                size += CodedOutputStream.computeBytesSize(20, this.attachData_);
            }
            int size2 = size + this.unknownFields.size();
            this.memoizedSerializedSize = size2;
            return size2;
        }

        /* access modifiers changed from: protected */
        public Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(byteString);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(bArr);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(InputStream inputStream) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(inputStream);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupRsp parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseDelimitedFrom(inputStream);
        }

        public static IMUpdateNickNameInGroupRsp parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(codedInputStream);
        }

        public static IMUpdateNickNameInGroupRsp parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (IMUpdateNickNameInGroupRsp) PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(IMUpdateNickNameInGroupRsp iMUpdateNickNameInGroupRsp) {
            return newBuilder().mergeFrom(iMUpdateNickNameInGroupRsp);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }
    }

    public interface IMUpdateNickNameInGroupRspOrBuilder extends MessageLiteOrBuilder {
        ByteString getAttachData();

        int getGroupId();

        int getMemberIdList(int i);

        int getMemberIdListCount();

        List<Integer> getMemberIdListList();

        String getNicknameIngroup();

        ByteString getNicknameIngroupBytes();

        int getResultCode();

        int getUserHandle();

        int getUserId();

        boolean hasAttachData();

        boolean hasGroupId();

        boolean hasNicknameIngroup();

        boolean hasResultCode();

        boolean hasUserHandle();

        boolean hasUserId();
    }

    private IMGroup() {
    }

    public static void registerAllExtensions(ExtensionRegistryLite extensionRegistryLite) {
    }
}
