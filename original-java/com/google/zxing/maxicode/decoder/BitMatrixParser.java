package com.google.zxing.maxicode.decoder;

import com.autonavi.ae.gmap.utils.GLMapStaticValue;
import com.google.zxing.common.BitMatrix;
import com.ifengyu.im.protobuf.IMBaseDefine.MessageCmdID;
import com.mi.milinkforgame.sdk.data.Const.ServerPort;
import com.mi.milinkforgame.sdk.data.Error;
import okhttp3.internal.http.StatusLine;
import org.apache.http.HttpStatus;
import org.bouncycastle.crypto.tls.CipherSuite;
import org.bouncycastle.math.Primes;

final class BitMatrixParser {
    private static final int[][] BITNR = {new int[]{121, 120, 127, 126, 133, 132, 139, 138, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA, CipherSuite.TLS_DH_DSS_WITH_SEED_CBC_SHA, CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA, CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256, 163, 162, CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256, CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384, CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA256, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256, 192, 199, 198, -2, -2}, new int[]{123, 122, 129, 128, 135, 134, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA, 140, CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA, CipherSuite.TLS_DHE_DSS_WITH_SEED_CBC_SHA, CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA, CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_PSK_WITH_NULL_SHA384, CipherSuite.TLS_PSK_WITH_NULL_SHA256, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256, CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256, 188, CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256, CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256, HttpStatus.SC_CREATED, 200, 816, -3}, new int[]{125, 124, 131, 130, 137, 136, CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA, CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA, 154, 161, 160, CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, CipherSuite.TLS_RSA_PSK_WITH_AES_128_GCM_SHA256, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384, CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256, CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256, CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256, HttpStatus.SC_NON_AUTHORITATIVE_INFORMATION, HttpStatus.SC_ACCEPTED, 818, 817}, new int[]{283, 282, 277, 276, Error.E_WTSDK_TLV_DECRYPT, Error.E_WTSDK_A1_DECRYPT, 265, 264, 259, 258, 253, 252, 247, 246, 241, 240, 235, 234, 229, 228, 223, 222, 217, 216, Primes.SMALL_FACTOR_LIMIT, 210, HttpStatus.SC_RESET_CONTENT, HttpStatus.SC_NO_CONTENT, 819, -3}, new int[]{285, 284, 279, Error.E_WTSDK_OPENDB_FAIL, 273, Error.E_WTSDK_A1_INVALID, 267, 266, 261, 260, 255, 254, 249, 248, 243, 242, 237, 236, 231, 230, 225, 224, 219, 218, 213, 212, HttpStatus.SC_MULTI_STATUS, HttpStatus.SC_PARTIAL_CONTENT, 821, 820}, new int[]{287, 286, 281, 280, 275, 274, 269, 268, 263, 262, 257, 256, 251, 250, 245, 244, 239, 238, 233, 232, 227, 226, 221, 220, 215, 214, 209, 208, 822, -3}, new int[]{289, 288, 295, 294, HttpStatus.SC_MOVED_PERMANENTLY, 300, 307, 306, 313, 312, 319, 318, 325, 324, 331, 330, 337, 336, 343, 342, 349, 348, 355, 354, 361, 360, 367, 366, 824, 823}, new int[]{291, 290, 297, 296, HttpStatus.SC_SEE_OTHER, HttpStatus.SC_MOVED_TEMPORARILY, 309, StatusLine.HTTP_PERM_REDIRECT, 315, 314, 321, 320, 327, 326, 333, 332, 339, 338, 345, 344, 351, 350, 357, Error.E_WTSDK_PUSH_RECONNECT, 363, 362, 369, 368, 825, -3}, new int[]{293, 292, 299, 298, HttpStatus.SC_USE_PROXY, HttpStatus.SC_NOT_MODIFIED, 311, 310, 317, 316, 323, 322, 329, 328, 335, 334, 341, 340, 347, 346, 353, 352, 359, 358, 365, 364, 371, 370, 827, 826}, new int[]{HttpStatus.SC_CONFLICT, HttpStatus.SC_REQUEST_TIMEOUT, HttpStatus.SC_FORBIDDEN, HttpStatus.SC_PAYMENT_REQUIRED, 397, 396, 391, 390, 79, 78, -2, -2, 13, 12, 37, 36, 2, -1, 44, 43, 109, 108, 385, 384, 379, 378, 373, 372, 828, -3}, new int[]{HttpStatus.SC_LENGTH_REQUIRED, HttpStatus.SC_GONE, HttpStatus.SC_METHOD_NOT_ALLOWED, HttpStatus.SC_NOT_FOUND, 399, 398, 393, 392, 81, 80, 40, -2, 15, 14, 39, 38, 3, -1, -1, 45, 111, 110, 387, 386, 381, 380, 375, 374, 830, 829}, new int[]{HttpStatus.SC_REQUEST_TOO_LONG, HttpStatus.SC_PRECONDITION_FAILED, HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED, HttpStatus.SC_NOT_ACCEPTABLE, HttpStatus.SC_UNAUTHORIZED, 400, 395, 394, 83, 82, 41, -3, -3, -3, -3, -3, 5, 4, 47, 46, 113, 112, 389, 388, 383, 382, 377, 376, 831, -3}, new int[]{HttpStatus.SC_UNSUPPORTED_MEDIA_TYPE, HttpStatus.SC_REQUEST_URI_TOO_LONG, 421, HttpStatus.SC_METHOD_FAILURE, 427, 426, 103, 102, 55, 54, 16, -3, -3, -3, -3, -3, -3, -3, 20, 19, 85, 84, 433, 432, 439, 438, 445, 444, 833, 832}, new int[]{HttpStatus.SC_EXPECTATION_FAILED, HttpStatus.SC_REQUESTED_RANGE_NOT_SATISFIABLE, HttpStatus.SC_LOCKED, HttpStatus.SC_UNPROCESSABLE_ENTITY, 429, 428, 105, 104, 57, 56, -3, -3, -3, -3, -3, -3, -3, -3, 22, 21, 87, 86, 435, 434, 441, 440, 447, 446, 834, -3}, new int[]{HttpStatus.SC_INSUFFICIENT_SPACE_ON_RESOURCE, 418, 425, HttpStatus.SC_FAILED_DEPENDENCY, 431, 430, 107, 106, 59, 58, -3, -3, -3, -3, -3, -3, -3, -3, -3, 23, 89, 88, 437, 436, ServerPort.PORT_443, 442, 449, 448, 836, 835}, new int[]{481, 480, 475, 474, 469, 468, 48, -2, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 53, 52, 463, 462, 457, 456, 451, 450, 837, -3}, new int[]{483, 482, 477, 476, 471, 470, 49, -1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -2, -1, 465, 464, 459, 458, 453, 452, 839, 838}, new int[]{485, 484, 479, 478, 473, 472, 51, 50, 31, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 1, -2, 42, 467, 466, 461, 460, 455, 454, 840, -3}, new int[]{487, 486, 493, 492, 499, 498, 97, 96, 61, 60, -3, -3, -3, -3, -3, -3, -3, -3, -3, 26, 91, 90, HttpStatus.SC_HTTP_VERSION_NOT_SUPPORTED, HttpStatus.SC_GATEWAY_TIMEOUT, Error.E_WTSDK_IS_BUSY, Error.E_WTSDK_SUCCESS_BUT_NULL_A2, 517, 516, 842, 841}, new int[]{489, 488, 495, 494, HttpStatus.SC_NOT_IMPLEMENTED, 500, 99, 98, 63, 62, -3, -3, -3, -3, -3, -3, -3, -3, 28, 27, 93, 92, HttpStatus.SC_INSUFFICIENT_STORAGE, 506, 513, 512, 519, 518, 843, -3}, new int[]{491, 490, 497, 496, HttpStatus.SC_SERVICE_UNAVAILABLE, HttpStatus.SC_BAD_GATEWAY, 101, 100, 65, 64, 17, -3, -3, -3, -3, -3, -3, -3, 18, 29, 95, 94, 509, 508, 515, 514, 521, 520, 845, 844}, new int[]{Error.MNS_OPEN_SESSION_FAILED_PIC_SUC_IN_FOREGROUND, Error.IP_ADDRESS_NOT_VALID, Error.CHECK_SESSION_OLD_FAIL, Error.CHECK_SESSION_NEW_SUCCESS, Error.MNS_HEART_BEAT_PUSH, Error.MNS_CDN_IP_SESSION, Error.MNS_OPTI_IP_SESSION, Error.MNS_LOGGINGIN_SAMEUIN, 73, 72, 32, -3, -3, -3, -3, -3, -3, 10, 67, 66, 115, 114, Error.IO_EXCEPTION_ERROR, Error.CONNECT_EXCEPTION_ERROR, 529, 528, 523, 522, 846, -3}, new int[]{Error.MNS_OPEN_SESSION_FAILED_PIC_SUC_IN_POWERSAVING, Error.MNS_OPEN_SESSION_FAILED_PIC_SUC_IN_BACKGROUND, Error.TLV_DECOMPRESS_FAIL, Error.TLV_DECODE_FAIL, Error.MNS_DIAGNOSIS_NEED_AUTHENTIED, Error.MNS_HEART_BEAT_CONFIG, Error.MNS_RECENTLY_IP_SESSION, Error.MNS_REDIRECT_IP_SESSION, 75, 74, -2, -1, 7, 6, 35, 34, 11, -2, 69, 68, Error.E_REG_SESSION_GET_FAILED, Error.E_REG_WRONG_TOKEN, Error.DNS_ANALYZE_TIMEOUT, Error.ILLEGALARGUMENT_EXCEPTION_ERROR, Error.MNS_CANNOTSEND_INBG, Error.MNS_PACKAGE_RECEIVING, 525, 524, 848, 847}, new int[]{Error.NOT_SUPPORT_SHORT_COMMAND, Error.MNS_LOAD_LIBS_FAILED, Error.IP_ADDRESS_NULL, Error.TLV_WRONG_DECOMPRESS_LENGTH, Error.CHECK_SESSION_OLD_SUCCESS, Error.MNS_DIAGNOSIS_INSTALLED_FIREWALL, 545, 544, 77, 76, -2, 33, 9, 8, 25, 24, -1, -2, 71, 70, 119, 118, Error.MNS_BUSI_BUFFER_NONE, Error.ACCOUNT_IS_NULL, Error.MNS_NOT_LOGIN, Error.SEND_DONE_BUT_NETWORK_BROKEN, 527, 526, 849, -3}, new int[]{Error.MNS_OPEN_SESSION_FAILED_PIC_FAILED_IN_BACKGROUND, Error.MNS_OPEN_SESSION_FAILED_PIC_FAILED_IN_FOREGROUND, Error.MNS_SCORE_IP_SUCCESS, Error.MNS_OPEN_SESSION_FAILED_IN_NETWORK_DISABLED, 577, 576, 583, Error.MNS_LOGOUT_CLEAR, 589, 588, 595, 594, 601, 600, 607, 606, 613, 612, 619, 618, 625, 624, 631, 630, 637, 636, 643, 642, 851, 850}, new int[]{Error.MNS_OPEN_SESSION_FAILED_WIFI_REDIRECT_IN_FOREGROUND, Error.MNS_OPEN_SESSION_FAILED_PIC_FAILED_IN_POWERSAVING, 573, Error.MNS_SCORE_IP_SESSION, 579, 578, 585, 584, 591, 590, 597, 596, 603, 602, 609, 608, 615, 614, 621, 620, 627, 626, 633, 632, 639, 638, 645, 644, 852, -3}, new int[]{Error.MNS_OPEN_SESSION_FAILED_WIFI_REDIRECT_IN_POWERSAVING, Error.MNS_OPEN_SESSION_FAILED_WIFI_REDIRECT_IN_BACKGROUND, 575, 574, Error.MNS_REPORT_LOG_FAIL, Error.MNS_NEED_WIFI_AUTH, 587, 586, 593, 592, 599, 598, 605, 604, 611, 610, 617, 616, 623, 622, 629, 628, 635, 634, 641, 640, 647, 646, 854, 853}, new int[]{727, 726, 721, 720, 715, 714, 709, 708, 703, 702, 697, 696, 691, 690, 685, 684, 679, 678, 673, 672, 667, 666, 661, 660, 655, 654, 649, 648, 855, -3}, new int[]{729, 728, 723, 722, 717, 716, 711, 710, 705, 704, 699, 698, 693, 692, 687, 686, 681, 680, 675, 674, 669, 668, 663, 662, 657, 656, 651, 650, 857, 856}, new int[]{731, 730, 725, 724, 719, 718, 713, 712, 707, 706, 701, 700, 695, 694, 689, 688, 683, 682, 677, 676, 671, 670, 665, 664, 659, 658, 653, 652, 858, -3}, new int[]{733, 732, 739, 738, 745, 744, 751, 750, 757, 756, 763, 762, MessageCmdID.CID_MSG_DATA_VALUE, 768, MessageCmdID.CID_MSG_UNREAD_CNT_REQUEST_VALUE, MessageCmdID.CID_MSG_TIME_RESPONSE_VALUE, MessageCmdID.CID_MSG_GET_BY_MSG_ID_REQ_VALUE, MessageCmdID.CID_MSG_GET_LATEST_MSG_ID_RSP_VALUE, 787, 786, 793, 792, 799, 798, 805, 804, 811, 810, 860, 859}, new int[]{735, 734, 741, 740, 747, 746, 753, 752, 759, 758, 765, 764, MessageCmdID.CID_MSG_READ_ACK_VALUE, MessageCmdID.CID_MSG_DATA_ACK_VALUE, MessageCmdID.CID_MSG_LIST_REQUEST_VALUE, MessageCmdID.CID_MSG_UNREAD_CNT_RESPONSE_VALUE, 783, MessageCmdID.CID_MSG_GET_BY_MSG_ID_RES_VALUE, 789, 788, 795, 794, 801, GLMapStaticValue.ANIMATION_FLUENT_TIME, 807, 806, 813, 812, 861, -3}, new int[]{737, 736, 743, 742, 749, 748, 755, 754, 761, 760, 767, 766, MessageCmdID.CID_MSG_TIME_REQUEST_VALUE, MessageCmdID.CID_MSG_READ_NOTIFY_VALUE, MessageCmdID.CID_MSG_GET_LATEST_MSG_ID_REQ_VALUE, MessageCmdID.CID_MSG_LIST_RESPONSE_VALUE, 785, 784, 791, 790, 797, 796, 803, 802, 809, 808, 815, 814, 863, 862}};
    private final BitMatrix bitMatrix;

    BitMatrixParser(BitMatrix bitMatrix2) {
        this.bitMatrix = bitMatrix2;
    }

    /* access modifiers changed from: 0000 */
    public byte[] readCodewords() {
        byte[] bArr = new byte[CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA];
        int height = this.bitMatrix.getHeight();
        int width = this.bitMatrix.getWidth();
        for (int i = 0; i < height; i++) {
            int[] iArr = BITNR[i];
            for (int i2 = 0; i2 < width; i2++) {
                int i3 = iArr[i2];
                if (i3 >= 0 && this.bitMatrix.get(i2, i)) {
                    int i4 = i3 / 6;
                    bArr[i4] = (byte) (((byte) (1 << (5 - (i3 % 6)))) | bArr[i4]);
                }
            }
        }
        return bArr;
    }
}
